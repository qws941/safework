# SafeWork Docker Compose 환경변수 설정 예시
# 이 파일을 .env로 복사하여 실제 값들을 설정하세요

# ===========================================
# 🔐 보안 강화된 데이터베이스 인증 정보
# ===========================================

# MySQL 루트 패스워드 (최소 16자, 대소문자+숫자+특수문자)
MYSQL_ROOT_PASSWORD=SafeWork2024Root@!#$

# MySQL 사용자 패스워드 (최소 16자, 복잡한 조합)
MYSQL_PASSWORD=SafeWork2024User@!#$

# MySQL 데이터베이스 설정
MYSQL_DATABASE=safework_db
MYSQL_USER=safework
MYSQL_HOST=safework-mysql
MYSQL_PORT=3306

# ===========================================
# 🔑 Redis 캐시 보안 설정
# ===========================================

# Redis 패스워드 (빈값 대신 보안 패스워드 설정)
REDIS_PASSWORD=SafeWork2024Redis@!#$
REDIS_HOST=safework-redis
REDIS_PORT=6379
REDIS_DB=0

# ===========================================
# 🛡️ 애플리케이션 보안 키
# ===========================================

# Flask Secret Key (세션 암호화용 - 32자 이상)
SECRET_KEY=SafeWork-Production-Secret-Key-2024-Advanced-Security

# 관리자 계정 (강력한 패스워드 사용)
ADMIN_USERNAME=admin
ADMIN_PASSWORD=SafeWork2024Admin@!#$

# ===========================================
# 🐳 Docker Registry 인증 정보
# ===========================================

# Docker Registry 접근 정보 (고도화된 인증)
REGISTRY_HOST=registry.jclee.me
REGISTRY_USERNAME=admin
REGISTRY_PASSWORD=SafeWork2024Registry@!#$

# ===========================================
# 🤖 CI/CD 및 자동화 토큰
# ===========================================

# Watchtower HTTP API 토큰 (32자 무작위 문자열)
WATCHTOWER_HTTP_API_TOKEN=wt_aBcDeFgHiJkLmNoPqRsTuVwXyZ1234567890

# Claude Code OAuth 토큰 (GitHub App 연동)
# 설정 방법: Claude Code 터미널에서 /install-github-app 실행
CLAUDE_CODE_OAUTH_TOKEN=gho_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# ===========================================
# 📢 Slack 통합 설정
# ===========================================

# Slack Bot Token (#safework-alerts 채널용)
SLACK_BOT_TOKEN=xoxb-xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxx
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# ===========================================
# 🌐 환경 설정
# ===========================================

# 애플리케이션 환경
FLASK_CONFIG=production
FLASK_ENV=production
PYTHONUNBUFFERED=1
PYTHONDONTWRITEBYTECODE=1

# 타임존 설정
TZ=Asia/Seoul

# 애플리케이션 포트
APP_PORT=4545

# 업로드 폴더
UPLOAD_FOLDER=/app/uploads

# ===========================================
# 🔒 2FA 및 추가 보안 설정
# ===========================================

# GitHub Personal Access Token (2FA 활성화 계정용)
GITHUB_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# SSL/TLS 설정
SSL_CERT_PATH=/etc/ssl/certs/safework.crt
SSL_KEY_PATH=/etc/ssl/private/safework.key

# 로그 레벨
LOG_LEVEL=INFO

# 보안 헤더 설정
SECURE_HEADERS_ENABLED=true
CORS_ORIGINS=https://safework.jclee.me,http://localhost:4545

# ===========================================
# 🚨 에러 모니터링 및 자동 이슈 관리 (NEW)
# ===========================================

# 에러 모니터링 활성화 여부
ERROR_MONITORING_ENABLED=true

# GitHub 저장소 정보 (자동 이슈 생성용)
GITHUB_REPO=qws941/safework

# 모니터링 설정
MONITORING_INTERVAL=30  # 30초마다 체크
ERROR_SEVERITY_THRESHOLD=medium  # 에러 심각도 임계값

# 컨테이너 안정성 개선사항 적용됨:
# - 재시작 정책: on-failure:3 (MySQL/Redis), on-failure:5 (App)
# - 리소스 제한: 메모리/CPU 제한으로 시스템 안정성 보장
# - 헬스체크 강화: interval=15s~20s, retries=5, start_period 설정
# - 자동 에러 감지: Flask 애플리케이션 통합 모니터링