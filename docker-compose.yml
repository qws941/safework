version: '3.8'

# SafeWork Docker Compose Configuration
# Network must be created before deployment:
# docker network create safework_network
# Unified Pipeline: git push(auto) → build → registry → webhook → deploy

services:
  safework-postgres:
    image: registry.jclee.me/safework-postgres:latest
    container_name: safework-postgres
    environment:
      - POSTGRES_DB=safework_db
      - POSTGRES_USER=safework
      - POSTGRES_PASSWORD=${DB_PASSWORD:-safework2024}
      - TZ=Asia/Seoul
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - safework_network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "[safework-postgres-log] {{.Name}}"
        labels: "service=safework-postgres,env=production,component=database,stack=safework"

  safework-redis:
    image: registry.jclee.me/safework-redis:latest
    container_name: safework-redis
    environment:
      - TZ=Asia/Seoul
    volumes:
      - redis_data:/data
    networks:
      - safework_network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "[safework-redis-log] {{.Name}}"
        labels: "service=safework-redis,env=production,component=cache,stack=safework"

  safework-app:
    image: registry.jclee.me/safework-app:latest
    container_name: safework-app
    environment:
      - FLASK_CONFIG=${FLASK_CONFIG:-production}
      - TZ=Asia/Seoul
      - DB_HOST=safework-postgres
      - DB_PORT=5432
      - DB_NAME=safework_db
      - DB_USER=safework
      - DB_PASSWORD=${DB_PASSWORD:-safework2024}
      - REDIS_HOST=safework-redis
      - REDIS_PORT=6379
      - SECRET_KEY=${SECRET_KEY:-safework-production-secret-key-2024}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-safework2024}
    depends_on:
      - safework-postgres
      - safework-redis
    networks:
      - safework_network
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.safework.rule=Host(`safework.jclee.me`)"
      - "traefik.http.routers.safework.entrypoints=websecure"
      - "traefik.http.routers.safework.tls=true"
      - "traefik.http.routers.safework.tls.certresolver=letsencrypt"
      - "traefik.http.services.safework.loadbalancer.server.port=4545"
      - "traefik.docker.network=traefik-public"
      # HTTP to HTTPS redirect
      - "traefik.http.routers.safework-http.rule=Host(`safework.jclee.me`)"
      - "traefik.http.routers.safework-http.entrypoints=web"
      - "traefik.http.routers.safework-http.middlewares=https-redirect@docker"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      # Security headers
      - "traefik.http.middlewares.safework-headers.headers.customResponseHeaders.X-Robots-Tag=none,noarchive,nosnippet,notranslate,noimageindex"
      - "traefik.http.middlewares.safework-headers.headers.sslRedirect=true"
      - "traefik.http.middlewares.safework-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.safework-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.safework-headers.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.safework-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.safework-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.safework-headers.headers.stsSeconds=315360000"
      - "traefik.http.middlewares.safework-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.safework-headers.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.routers.safework.middlewares=safework-headers"
      # Health check configuration
      - "traefik.http.services.safework.loadbalancer.healthCheck.path=/health"
      - "traefik.http.services.safework.loadbalancer.healthCheck.interval=30s"
      - "traefik.http.services.safework.loadbalancer.healthCheck.timeout=10s"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4545/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "[safework-app-log] {{.Name}}"
        labels: "service=safework-app,env=production,component=application,stack=safework"

volumes:
  postgres_data:
    name: safework_postgres_data
  redis_data:
    name: safework_redis_data

networks:
  safework_network:
    driver: bridge
  traefik-public:
    external: true