#!/bin/bash
# SafeWork 통합 환경 설정 파일
# 모든 스크립트에서 사용하는 공통 설정

# .env 파일이 있으면 로드
if [ -f "${SCRIPT_DIR:-$(dirname "${BASH_SOURCE[0]}")}/../.env" ]; then
    export $(grep -v '^#' "${SCRIPT_DIR:-$(dirname "${BASH_SOURCE[0]}")}/../.env" | xargs)
fi

# ===== Portainer API 설정 =====
export PORTAINER_URL=${PORTAINER_URL:-"https://portainer.jclee.me"}
export PORTAINER_TOKEN=${PORTAINER_TOKEN:-"ptr_zdHC0mAdjC7hk7pZ8r2+pJZO+bLxBD/TaB3iPuQwx9Q="}
export ENDPOINT_ID=${PORTAINER_ENDPOINT:-"3"}  # Synology Endpoint

# ===== Docker Registry 설정 =====
export REGISTRY_URL=${REGISTRY_HOST:-"registry.jclee.me"}
export REGISTRY_USER=${REGISTRY_USER:-"admin"}
export REGISTRY_PASSWORD=${REGISTRY_PASSWORD:-"bingogo1"}

# ===== 애플리케이션 설정 =====
export APP_NAME="safework"
export APP_PORT="4545"
export FLASK_CONFIG="production"

# ===== 데이터베이스 설정 =====
export DB_HOST=${DB_HOST:-"safework-postgres"}
export DB_PORT=${DB_PORT:-"5432"}
export DB_NAME=${DB_NAME:-"safework_db"}
export DB_USER=${DB_USER:-"safework"}
export DB_PASSWORD=${DB_PASSWORD:-"safework2024"}

# ===== Redis 설정 =====
export REDIS_HOST="safework-redis"
export REDIS_PORT="6379"

# ===== 보안 설정 =====
export SECRET_KEY=${SECRET_KEY:-"safework-production-secret-key-2024"}
export ADMIN_USERNAME=${ADMIN_USERNAME:-"admin"}
export ADMIN_PASSWORD=${ADMIN_PASSWORD:-"safework2024"}

# ===== 타임존 설정 =====
export TZ="Asia/Seoul"

# ===== 색상 코드 =====
export GREEN='\033[0;32m'
export YELLOW='\033[1;33m'
export RED='\033[0;31m'
export BLUE='\033[0;34m'
export NC='\033[0m'  # No Color

# ===== 유틸리티 함수 =====
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# API 호출 래퍼 함수
portainer_api() {
    local method=$1
    local endpoint=$2
    local data=${3:-}

    if [ -z "$data" ]; then
        curl -s -X "$method" \
            -H "X-API-Key: $PORTAINER_TOKEN" \
            "$PORTAINER_URL/api/$endpoint"
    else
        curl -s -X "$method" \
            -H "X-API-Key: $PORTAINER_TOKEN" \
            -H "Content-Type: application/json" \
            "$PORTAINER_URL/api/$endpoint" \
            -d "$data"
    fi
}

# 스택 존재 확인 함수
check_stack_exists() {
    local stack_name=$1
    portainer_api GET "stacks" | jq -r ".[] | select(.Name == \"$stack_name\") | .Id" || echo ""
}

# 헬스체크 함수
health_check() {
    local url=${1:-"https://safework.jclee.me/health"}
    local max_attempts=${2:-30}
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        if curl -s "$url" > /dev/null 2>&1; then
            log_success "헬스체크 성공 (시도 $attempt/$max_attempts)"
            return 0
        fi
        log_info "헬스체크 대기 중... (시도 $attempt/$max_attempts)"
        sleep 2
        ((attempt++))
    done

    log_error "헬스체크 실패 (최대 시도 횟수 초과)"
    return 1
}