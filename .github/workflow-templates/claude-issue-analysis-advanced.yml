name: üéØ Advanced Issue Analysis with Claude Code Action

# Advanced issue analysis template with systematic problem-solving approach
# Features: Root cause analysis, solution validation, automated tracking

concurrency:
  group: claude-issue-${{ github.ref }}-${{ github.event.issue.number }}
  cancel-in-progress: false

on:
  workflow_call:
    inputs:
      analysis_depth:
        description: 'Analysis depth: surface, standard, deep, comprehensive'
        required: false
        default: 'standard'
        type: string
      auto_assign:
        description: 'Automatically assign issue based on analysis'
        required: false
        default: false
        type: boolean
      create_action_items:
        description: 'Create separate action item issues for complex solutions'
        required: false
        default: true
        type: boolean
      priority_assessment:
        description: 'Perform priority assessment and labeling'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  advanced-issue-analysis:
    name: üéØ Issue Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 35
    
    # Issue trigger conditions with type filtering
    if: >
      github.event.issue.state == 'open' &&
      !contains(github.event.issue.labels.*.name, 'duplicate') &&
      !contains(github.event.issue.labels.*.name, 'invalid') &&
      !contains(github.event.issue.labels.*.name, 'wontfix')
    
    steps:
      - name: üîç Issue Context Extraction
        id: context
        run: |
          echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          echo "issue_title=${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
          echo "issue_author=${{ github.event.issue.user.login }}" >> $GITHUB_OUTPUT
          echo "issue_body_length=${#'${{ github.event.issue.body }}'}" >> $GITHUB_OUTPUT
          
          # Extract issue type from title or labels
          issue_type="general"
          if [[ "${{ github.event.issue.title }}" == *"[BUG]"* ]] || [[ "${{ contains(github.event.issue.labels.*.name, 'bug') }}" == "true" ]]; then
            issue_type="bug"
          elif [[ "${{ github.event.issue.title }}" == *"[FEATURE]"* ]] || [[ "${{ contains(github.event.issue.labels.*.name, 'enhancement') }}" == "true" ]]; then
            issue_type="feature"
          elif [[ "${{ github.event.issue.title }}" == *"[SECURITY]"* ]] || [[ "${{ contains(github.event.issue.labels.*.name, 'security') }}" == "true" ]]; then
            issue_type="security"
          elif [[ "${{ github.event.issue.title }}" == *"[PERFORMANCE]"* ]] || [[ "${{ contains(github.event.issue.labels.*.name, 'performance') }}" == "true" ]]; then
            issue_type="performance"
          elif [[ "${{ github.event.issue.title }}" == *"[DOCS]"* ]] || [[ "${{ contains(github.event.issue.labels.*.name, 'documentation') }}" == "true" ]]; then
            issue_type="documentation"
          fi
          echo "issue_type=$issue_type" >> $GITHUB_OUTPUT
          
          # Determine urgency indicators
          urgency="normal"
          if [[ "${{ github.event.issue.title }}" == *"urgent"* ]] || 
             [[ "${{ github.event.issue.title }}" == *"critical"* ]] ||
             [[ "${{ github.event.issue.title }}" == *"production"* ]] ||
             [[ "${{ contains(github.event.issue.labels.*.name, 'critical') }}" == "true" ]]; then
            urgency="high"
          elif [[ "${{ github.event.issue.title }}" == *"minor"* ]] ||
               [[ "${{ contains(github.event.issue.labels.*.name, 'minor') }}" == "true" ]]; then
            urgency="low"
          fi
          echo "urgency=$urgency" >> $GITHUB_OUTPUT
          
          # Check for reproduction steps
          if [[ "${{ github.event.issue.body }}" == *"reproduction"* ]] ||
             [[ "${{ github.event.issue.body }}" == *"reproduce"* ]] ||
             [[ "${{ github.event.issue.body }}" == *"steps to"* ]]; then
            echo "has_reproduction_steps=true" >> $GITHUB_OUTPUT
          else
            echo "has_reproduction_steps=false" >> $GITHUB_OUTPUT
          fi

      - name: ü§ñ Claude Code Action - Advanced Issue Analysis
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            **ADVANCED ISSUE ANALYSIS REQUEST**
            
            **ISSUE CONTEXT:**
            - Repository: ${{ github.repository }}
            - Issue Number: #${{ steps.context.outputs.issue_number }}
            - Title: "${{ steps.context.outputs.issue_title }}"
            - Author: @${{ steps.context.outputs.issue_author }}
            - Type: ${{ steps.context.outputs.issue_type }}
            - Urgency: ${{ steps.context.outputs.urgency }}
            - Has Reproduction Steps: ${{ steps.context.outputs.has_reproduction_steps }}
            - Description Length: ${{ steps.context.outputs.issue_body_length }} chars
            
            **ANALYSIS CONFIGURATION:**
            - Analysis Depth: ${{ inputs.analysis_depth }}
            - Auto-assign: ${{ inputs.auto_assign }}
            - Create Action Items: ${{ inputs.create_action_items }}
            - Priority Assessment: ${{ inputs.priority_assessment }}
            
            **Issue Description:**
            ```
            ${{ github.event.issue.body }}
            ```
            
            **SYSTEMATIC ANALYSIS FRAMEWORK:**
            
            ## üîç Problem Understanding & Classification
            ### Analysis Checklist:
            ‚ñ° **Problem Statement**: Clear definition of the issue and its scope
            ‚ñ° **Impact Assessment**: Affected users, systems, and business processes
            ‚ñ° **Frequency Analysis**: How often the issue occurs and under what conditions
            ‚ñ° **Environment Context**: Development, staging, or production environment
            ‚ñ° **User Experience Impact**: Effect on user workflows and satisfaction
            
            ## üî¨ Root Cause Investigation
            ### Investigation Framework:
            ‚ñ° **Symptom Analysis**: Observable behaviors and error manifestations
            ‚ñ° **System Component Mapping**: Identify affected modules and dependencies
            ‚ñ° **Timeline Analysis**: When the issue started and any related changes
            ‚ñ° **Log Analysis**: Review relevant logs and error patterns
            ‚ñ° **Code Path Tracing**: Follow execution flow to identify failure points
            
            ## üõ†Ô∏è Solution Design & Validation
            ### Solution Framework:
            ‚ñ° **Primary Solution**: Main approach with implementation strategy
            ‚ñ° **Alternative Approaches**: Backup solutions and trade-off analysis
            ‚ñ° **Risk Assessment**: Potential side effects and mitigation strategies
            ‚ñ° **Testing Strategy**: Validation approach and test scenarios
            ‚ñ° **Rollback Plan**: Recovery strategy if solution causes issues
            
            ## üìã Implementation Planning
            ### Planning Checklist:
            ‚ñ° **Task Breakdown**: Decompose solution into actionable tasks
            ‚ñ° **Dependency Identification**: Required resources and prerequisites
            ‚ñ° **Timeline Estimation**: Effort estimation and delivery schedule
            ‚ñ° **Team Assignment**: Recommended assignees based on expertise
            ‚ñ° **Milestone Planning**: Intermediate checkpoints and deliverables
            
            ## üéØ Priority & Impact Matrix
            ### Assessment Criteria:
            
            **URGENCY FACTORS:**
            - üî¥ **Critical**: Production down, data loss, security breach
            - üü° **High**: Core functionality impaired, significant user impact
            - üü¢ **Medium**: Feature degradation, workflow inconvenience
            - üîµ **Low**: Minor issues, cosmetic problems, nice-to-have improvements
            
            **COMPLEXITY FACTORS:**
            - **Simple**: Single file changes, configuration updates
            - **Moderate**: Multi-file changes, API modifications
            - **Complex**: Architecture changes, database migrations
            - **Extensive**: System-wide changes, external integrations
            
            **TYPE-SPECIFIC ANALYSIS:**
            ${{ steps.context.outputs.issue_type == 'bug' && '
            ### Bug Analysis Focus:
            - Reproduction reliability and conditions
            - Error propagation and system impact
            - Data integrity and consistency issues
            - User workflow disruption assessment
            - Regression risk and testing strategy
            ' || steps.context.outputs.issue_type == 'feature' && '
            ### Feature Analysis Focus:
            - Business value and user benefit assessment
            - Technical feasibility and resource requirements
            - Integration complexity with existing systems
            - User experience design considerations
            - Performance and scalability implications
            ' || steps.context.outputs.issue_type == 'security' && '
            ### Security Analysis Focus:
            - Vulnerability assessment and exploitation potential
            - Data exposure and privacy implications
            - Authentication and authorization impact
            - Compliance and regulatory considerations
            - Incident response and containment strategy
            ' || steps.context.outputs.issue_type == 'performance' && '
            ### Performance Analysis Focus:
            - Bottleneck identification and measurement
            - Resource utilization and optimization opportunities
            - Scalability limits and capacity planning
            - User experience impact quantification
            - Monitoring and alerting recommendations
            ' || '
            ### General Analysis Focus:
            - Problem scope and boundary definition
            - Stakeholder impact and communication needs
            - Resource requirements and timeline considerations
            - Quality assurance and validation approach
            - Documentation and knowledge transfer needs
            ' }}
            
            **AUTOMATED RECOMMENDATIONS:**
            ${{ inputs.priority_assessment == 'true' && '
            - Provide priority level recommendation with justification
            - Suggest appropriate labels for issue categorization
            - Recommend milestone assignment based on timeline
            ' || '' }}
            ${{ inputs.auto_assign == 'true' && '
            - Suggest team member assignment based on expertise area
            - Recommend reviewer assignments for solution validation
            - Identify subject matter experts for consultation
            ' || '' }}
            ${{ inputs.create_action_items == 'true' && '
            - Break down complex solutions into separate action items
            - Create implementation checklist with dependencies
            - Generate follow-up tasks for validation and monitoring
            ' || '' }}
            
            **SUCCESS CRITERIA:**
            ‚úÖ Problem clearly understood and categorized with evidence
            ‚úÖ Root cause identified with supporting analysis
            ‚úÖ Viable solution designed with implementation strategy
            ‚úÖ Risk assessment completed with mitigation plans
            ‚úÖ Priority and complexity accurately assessed
            ‚úÖ Implementation plan created with clear next steps
            ${{ inputs.create_action_items == 'true' && '‚úÖ Action items generated for complex solutions' || '' }}
            ${{ inputs.priority_assessment == 'true' && '‚úÖ Priority recommendation provided with justification' || '' }}
            
            **DELIVERABLES:**
            1. **Executive Summary**: Problem overview and recommended approach
            2. **Detailed Analysis**: Comprehensive investigation findings
            3. **Solution Design**: Primary and alternative implementation strategies
            4. **Implementation Plan**: Step-by-step execution roadmap
            5. **Risk Assessment**: Potential issues and mitigation strategies
            6. **Resource Requirements**: Team assignments and timeline estimates
            ${{ inputs.create_action_items == 'true' && '7. **Action Items**: Separate issues for complex implementation tasks' || '' }}
            8. **Monitoring Plan**: Success metrics and validation approach
          claude_args: |
            --temperature 0.1
            --allowedTools "mcp__serena__*,mcp__github__*,mcp__sequential-thinking__*,mcp__memory__*,mcp__eslint__*,mcp__code-runner__*,Read,Grep,Glob,Bash(git:*),Bash(gh:*),Bash(gh issue comment:*),Bash(gh issue edit:*),TodoWrite"
            --contextSize 160000
            --maxTokens 8000
            --systemPrompt "Expert issue analyst specializing in systematic problem-solving with Claude Code Action methodologies. Implements comprehensive analysis frameworks for root cause investigation, solution design, and implementation planning. Provides structured assessment with actionable recommendations and automated workflow integration."

      - name: üìä Analysis Results Processing
        if: always()
        run: |
          echo "## üéØ Issue Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Issue Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Number: #${{ steps.context.outputs.issue_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- Type: ${{ steps.context.outputs.issue_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- Urgency: ${{ steps.context.outputs.urgency }}" >> $GITHUB_STEP_SUMMARY
          echo "- Has Reproduction: ${{ steps.context.outputs.has_reproduction_steps }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Depth: ${{ inputs.analysis_depth }}" >> $GITHUB_STEP_SUMMARY
          echo "- Auto-assign: ${{ inputs.auto_assign }}" >> $GITHUB_STEP_SUMMARY
          echo "- Create Action Items: ${{ inputs.create_action_items }}" >> $GITHUB_STEP_SUMMARY
          echo "- Priority Assessment: ${{ inputs.priority_assessment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Review Claude analysis and recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Validate proposed solutions and implementation plans" >> $GITHUB_STEP_SUMMARY
          echo "- Assign appropriate team members and set milestones" >> $GITHUB_STEP_SUMMARY
          echo "- Begin implementation based on priority assessment" >> $GITHUB_STEP_SUMMARY