name: üîç Advanced PR Review with Claude Code Action

# Advanced PR review template implementing Claude Code Action solutions best practices
# Features: Systematic checklists, inline comments, security focus, contributor logic

concurrency:
  group: claude-pr-review-${{ github.ref }}-${{ github.event.pull_request.number }}
  cancel-in-progress: false  # Don't cancel reviews in progress

on:
  workflow_call:
    inputs:
      review_scope:
        description: 'Review scope: full, security, performance, code-quality'
        required: false
        default: 'full'
        type: string
      enable_inline_comments:
        description: 'Enable inline comments for specific feedback'
        required: false
        default: true
        type: boolean
      security_threshold:
        description: 'Security issue threshold: low, medium, high, critical'
        required: false
        default: 'medium'
        type: string
      contributor_type:
        description: 'Contributor type: internal, external, dependabot'
        required: false
        default: 'internal'
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write
  security-events: write
  checks: write

jobs:
  advanced-pr-review:
    name: üîç Advanced PR Review
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    # Contributor-based conditional logic
    if: >
      github.event.pull_request.draft == false &&
      (
        inputs.contributor_type == 'internal' ||
        (inputs.contributor_type == 'external' && github.event.pull_request.author_association == 'COLLABORATOR') ||
        (inputs.contributor_type == 'dependabot' && github.actor == 'dependabot[bot]' && 
         (contains(github.event.pull_request.title, '[security]') || contains(github.event.pull_request.title, '[critical]')))
      )
    
    steps:
      - name: üîç PR Context Analysis
        id: context
        run: |
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr_author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "pr_base_branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
          echo "pr_head_branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          echo "files_changed=${{ github.event.pull_request.changed_files }}" >> $GITHUB_OUTPUT
          echo "additions=${{ github.event.pull_request.additions }}" >> $GITHUB_OUTPUT
          echo "deletions=${{ github.event.pull_request.deletions }}" >> $GITHUB_OUTPUT
          
          # Determine review complexity
          if [ "${{ github.event.pull_request.changed_files }}" -gt 20 ]; then
            echo "review_complexity=high" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.pull_request.changed_files }}" -gt 5 ]; then
            echo "review_complexity=medium" >> $GITHUB_OUTPUT
          else
            echo "review_complexity=low" >> $GITHUB_OUTPUT
          fi
          
          # Security-sensitive file detection
          if [[ "${{ github.event.pull_request.title }}" == *"[security]"* ]] || 
             [[ "${{ github.event.pull_request.title }}" == *"auth"* ]] ||
             [[ "${{ github.event.pull_request.title }}" == *"password"* ]] ||
             [[ "${{ github.event.pull_request.title }}" == *"token"* ]]; then
            echo "security_sensitive=true" >> $GITHUB_OUTPUT
          else
            echo "security_sensitive=false" >> $GITHUB_OUTPUT
          fi

      - name: ü§ñ Claude Code Action - Advanced PR Review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: ${{ inputs.enable_inline_comments }}
          prompt: |
            **ADVANCED PR REVIEW REQUEST**
            
            **PR CONTEXT:**
            - Repository: ${{ github.repository }}
            - PR Number: #${{ steps.context.outputs.pr_number }}
            - Title: "${{ steps.context.outputs.pr_title }}"
            - Author: @${{ steps.context.outputs.pr_author }}
            - Base Branch: ${{ steps.context.outputs.pr_base_branch }}
            - Head Branch: ${{ steps.context.outputs.pr_head_branch }}
            - Files Changed: ${{ steps.context.outputs.files_changed }}
            - Lines Added: +${{ steps.context.outputs.additions }}
            - Lines Deleted: -${{ steps.context.outputs.deletions }}
            - Review Complexity: ${{ steps.context.outputs.review_complexity }}
            - Security Sensitive: ${{ steps.context.outputs.security_sensitive }}
            
            **REVIEW CONFIGURATION:**
            - Review Scope: ${{ inputs.review_scope }}
            - Inline Comments: ${{ inputs.enable_inline_comments }}
            - Security Threshold: ${{ inputs.security_threshold }}
            - Contributor Type: ${{ inputs.contributor_type }}
            
            **SYSTEMATIC REVIEW FRAMEWORK:**
            
            ## üîç Code Quality Analysis (Weight: 25%)
            ### Checklist:
            ‚ñ° **Python Best Practices**: PEP8 compliance, naming conventions, code structure
            ‚ñ° **Type Safety**: Type hints usage, mypy compatibility, runtime validation
            ‚ñ° **Error Handling**: Exception management, logging, graceful degradation
            ‚ñ° **Code Clarity**: Readability, maintainability, documentation quality
            ‚ñ° **Performance**: Algorithm efficiency, resource usage optimization
            
            ## üõ°Ô∏è Security Assessment (Weight: 30%)
            ### Security Checklist:
            ‚ñ° **Input Validation**: SQL injection prevention, XSS protection, CSRF tokens
            ‚ñ° **Authentication**: Secure authentication flows, session management
            ‚ñ° **Authorization**: Access control verification, permission validation
            ‚ñ° **Data Protection**: Sensitive data handling, encryption, secure storage
            ‚ñ° **Dependencies**: Vulnerability scanning, package security assessment
            ‚ñ° **Configuration**: Secrets management, environment variable security
            
            ## ‚ö° Performance Evaluation (Weight: 20%)
            ### Performance Checklist:
            ‚ñ° **Database Operations**: Query optimization, N+1 prevention, indexing
            ‚ñ° **Caching Strategy**: Redis usage optimization, cache invalidation
            ‚ñ° **Resource Management**: Memory usage, connection pooling, cleanup
            ‚ñ° **API Efficiency**: Response time optimization, payload minimization
            ‚ñ° **Scalability**: Load handling capability, bottleneck identification
            
            ## üß™ Testing & Quality Assurance (Weight: 15%)
            ### Testing Checklist:
            ‚ñ° **Test Coverage**: Unit tests, integration tests, coverage metrics
            ‚ñ° **Test Quality**: Test cases effectiveness, edge case coverage
            ‚ñ° **Mocking**: Proper test isolation, dependency mocking
            ‚ñ° **Assertions**: Meaningful assertions, error scenario testing
            ‚ñ° **CI/CD**: Pipeline compatibility, automated testing integration
            
            ## üèóÔ∏è Architecture & Design (Weight: 10%)
            ### Architecture Checklist:
            ‚ñ° **Flask Patterns**: Blueprint organization, factory pattern usage
            ‚ñ° **Database Design**: Schema integrity, migration compatibility
            ‚ñ° **Container Architecture**: Docker best practices, multi-stage builds
            ‚ñ° **API Design**: RESTful principles, versioning strategy
            ‚ñ° **Configuration Management**: Environment-based configuration
            
            **INLINE COMMENT STRATEGY:**
            ${{ inputs.enable_inline_comments == 'true' && '
            - Use mcp__github_inline_comment__create_inline_comment for specific code issues
            - Provide constructive feedback with examples and suggestions
            - Focus on critical issues that require immediate attention
            - Include code snippets showing improved implementations
            - Reference relevant documentation and best practices
            ' || '
            - Provide general feedback in main review comment
            - Summarize key issues and recommendations
            - Include file-specific feedback with line number references
            ' }}
            
            **SEVERITY CLASSIFICATION:**
            - üî¥ **Critical**: Security vulnerabilities, data loss risks, system crashes
            - üü° **High**: Performance issues, architectural problems, significant bugs
            - üü¢ **Medium**: Code quality issues, minor bugs, optimization opportunities
            - üîµ **Low**: Style issues, documentation gaps, minor improvements
            
            **CONTRIBUTOR-SPECIFIC APPROACH:**
            ${{ inputs.contributor_type == 'external' && '
            - Provide detailed explanations for project-specific patterns
            - Include links to documentation and coding guidelines
            - Be especially constructive and welcoming in feedback
            - Explain the reasoning behind architectural decisions
            ' || inputs.contributor_type == 'dependabot' && '
            - Focus on security impact of dependency updates
            - Verify compatibility with existing codebase
            - Check for breaking changes and migration requirements
            - Validate test suite compatibility
            ' || '
            - Assume familiarity with project patterns and conventions
            - Focus on advanced optimization and architectural improvements
            - Suggest refactoring opportunities and technical debt reduction
            ' }}
            
            **SUCCESS CRITERIA:**
            ‚úÖ All code changes systematically reviewed against checklist criteria
            ‚úÖ Security vulnerabilities identified with specific remediation steps
            ‚úÖ Performance bottlenecks highlighted with optimization suggestions
            ‚úÖ Test coverage gaps identified with testing recommendations
            ‚úÖ Architecture improvements suggested with implementation guidance
            ${{ inputs.enable_inline_comments == 'true' && '‚úÖ Inline comments provided for specific code issues with examples' || '‚úÖ Comprehensive review summary with file-specific feedback' }}
            ‚úÖ Overall recommendation provided (Approve/Request Changes/Comment)
            
            **DELIVERABLES:**
            1. **Executive Summary**: Overall assessment with recommendation
            2. **Detailed Analysis**: Category-by-category evaluation with scores
            3. **Critical Issues**: High-priority items requiring immediate attention
            4. **Optimization Opportunities**: Performance and code quality improvements
            5. **Testing Recommendations**: Coverage gaps and test strategy improvements
            ${{ inputs.enable_inline_comments == 'true' && '6. **Inline Feedback**: Specific code-level comments with suggestions' || '6. **File-Specific Feedback**: Detailed analysis organized by modified files' }}
            7. **Next Steps**: Clear action items for the author
          claude_args: |
            --temperature 0.05
            --allowedTools "mcp__serena__*,mcp__github__*,mcp__sequential-thinking__*,mcp__memory__*,mcp__eslint__*,mcp__code-runner__*,Read,Grep,Glob,Bash(git:*),Bash(gh:*),Bash(gh pr comment:*),Bash(gh pr review:*),mcp__github_inline_comment__create_inline_comment"
            --contextSize 180000
            --maxTokens 10000
            --responseFormat structured
            --systemPrompt "Expert code reviewer specializing in systematic PR analysis with Claude Code Action advanced solutions. Implements comprehensive review methodologies with structured checklists, security-first assessment, and constructive feedback delivery. Provides inline comments for specific issues and detailed analysis across all code quality dimensions."

      - name: üìä Review Metrics Collection
        if: always()
        run: |
          echo "## üìä PR Review Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Review Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Scope: ${{ inputs.review_scope }}" >> $GITHUB_STEP_SUMMARY
          echo "- Inline Comments: ${{ inputs.enable_inline_comments }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Threshold: ${{ inputs.security_threshold }}" >> $GITHUB_STEP_SUMMARY
          echo "- Contributor Type: ${{ inputs.contributor_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR Statistics:**" >> $GITHUB_STEP_SUMMARY
          echo "- Files Changed: ${{ steps.context.outputs.files_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lines Added: +${{ steps.context.outputs.additions }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lines Deleted: -${{ steps.context.outputs.deletions }}" >> $GITHUB_STEP_SUMMARY
          echo "- Complexity: ${{ steps.context.outputs.review_complexity }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Sensitive: ${{ steps.context.outputs.security_sensitive }}" >> $GITHUB_STEP_SUMMARY