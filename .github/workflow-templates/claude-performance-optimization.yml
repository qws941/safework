name: ⚡ Claude Performance Optimization Template

# Specialized template for performance analysis and optimization

concurrency:
  group: claude-performance-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      optimization_target:
        description: 'Optimization target (database, frontend, backend, infrastructure)'
        required: false
        default: 'full'
        type: string
      performance_threshold:
        description: 'Performance threshold for recommendations'
        required: false
        default: '500ms'
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  performance-optimization:
    name: ⚡ Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 40
    
    steps:
      - name: ⚡ Claude Performance Optimization
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            **PERFORMANCE OPTIMIZATION REQUEST:**
            - Repository: ${{ github.repository }}
            - Optimization Target: ${{ inputs.optimization_target || 'full' }}
            - Performance Threshold: ${{ inputs.performance_threshold || '500ms' }}
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            
            **PERFORMANCE ANALYSIS AREAS:**
            1. **Database Performance:**
               - Query optimization and indexing
               - Connection pooling efficiency
               - Database schema optimization
               - Caching strategy implementation
               - Transaction performance analysis
            
            2. **Application Performance:**
               - Code efficiency and algorithmic complexity
               - Memory usage optimization
               - CPU utilization patterns
               - I/O operations optimization
               - Resource leak detection
            
            3. **Frontend Performance:**
               - Asset loading optimization
               - JavaScript performance bottlenecks
               - CSS optimization opportunities
               - Caching strategy for static assets
               - Progressive loading implementations
            
            4. **Infrastructure Performance:**
               - Container resource allocation
               - Network latency optimization
               - Load balancing efficiency
               - Scaling strategy recommendations
               - Monitoring and alerting setup
            
            **PERFORMANCE METRICS TO ANALYZE:**
            - Response time analysis (target: < ${{ inputs.performance_threshold || '500ms' }})
            - Throughput and concurrent user capacity
            - Resource utilization (CPU, Memory, Disk, Network)
            - Database query execution times
            - Cache hit rates and effectiveness
            
            **REQUIRED DELIVERABLES:**
            - Performance bottleneck identification with metrics
            - Specific optimization recommendations with code
            - Before/after performance projections
            - Implementation priority matrix
            - Monitoring setup for continuous optimization
            
            **SUCCESS CRITERIA:**
            - All performance bottlenecks identified with evidence
            - Optimization solutions with measurable impact provided
            - Implementation roadmap with priority levels
            - Performance monitoring recommendations included
          claude_args: |
            --temperature 0.1
            --allowedTools "mcp__serena__*,mcp__github__*,mcp__sequential-thinking__*,mcp__memory__*,mcp__code-runner__*,Read,Grep,Glob"
            --systemPrompt "Performance engineering expert specializing in application optimization, database tuning, and scalability. Focus on identifying performance bottlenecks and providing measurable optimization solutions."