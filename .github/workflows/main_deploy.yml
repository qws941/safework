name: SafeWork 고도화 배포 파이프라인

on:
  workflow_run:
    workflows: ["Claude Code"]
    types: [completed]
    branches: [master, main]
  workflow_dispatch:

env:
  REGISTRY: registry.jclee.me
  PROJECT_NAME: safework
  WATCHTOWER_HOST: watchtower.jclee.me
  WATCHTOWER_HTTP_API_TOKEN: ${{ secrets.WATCHTOWER_HTTP_API_TOKEN }}

jobs:
  deploy:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 🔍 고도화 배포 트리거 디버깅
        run: |
          echo "🚀 SafeWork 고도화 배포 파이프라인 시작!"
          echo "⏰ 배포 시작 시각: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')"
          echo "🎯 트리거 이벤트: ${{ github.event_name }}"
          echo "🔗 저장소: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}"
          
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "🤖 Claude 워크플로우 결과: ${{ github.event.workflow_run.conclusion }}"
            echo "📄 Claude 워크플로우명: ${{ github.event.workflow_run.name }}"
            echo "🔄 자돐 배포 모드: Claude 성공 후 자동 트리거"
          else
            echo "👤 수동 배포 모드: 워크플로우 디스패치"
          fi
          
      - name: 📥 소스코드 체크아웃 및 검증
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 배포 비교를 위한 두 개 커밋 취득
          
      - name: 🔍 코드 변경사항 분석
        run: |
          echo "📈 커밋 변경사항 분석:"
          git diff --name-only HEAD~1 HEAD | head -20
          echo "📊 총 변경 파일 수: $(git diff --name-only HEAD~1 HEAD | wc -l)"
          
      - name: 🏷️ 지능적 버전 생성
        id: version
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(TZ='Asia/Seoul' date '+%Y%m%d-%H%M')
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # 브랜치별 버전 전략
          if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
            VERSION="v3.2-prod-${COMMIT_SHA}"
          else
            VERSION="v3.2-${BRANCH_NAME}-${COMMIT_SHA}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 생성된 버전: $VERSION"
          echo "🔸 브랜치: $BRANCH_NAME"
          echo "⏰ 타임스탬프: $TIMESTAMP"
          
      - name: 🛠️ Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Docker Registry 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: admin
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: 🚀 SafeWork 고성능 빌드 & 푸시
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          platforms: linux/amd64,linux/arm64  # 멀티 플랫폼 지원
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=$(TZ='Asia/Seoul' date -u +%Y-%m-%dT%H:%M:%SZ)
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.version.outputs.version }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app:latest
            ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app:stable
          
      - name: 🩺 배포 후 건강상태 검사
        run: |
          echo "🔍 배포된 이미지 검증 시작..."
          
          # 레지스트리에서 이미지 메타데이터 확인
          docker manifest inspect ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app:${{ steps.version.outputs.version }} && \
          echo "✅ 이미지 메타데이터 검증 성공" || \
          echo "⚠️ 이미지 검증 실패"
          
          echo "📈 배포 완료 시간: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')"
          
      - name: 🔄 Watchtower 즉시 업데이트 트리거
        run: |
          echo "🔄 Watchtower API를 통한 즉시 업데이트 트리거..."
          
          # Watchtower HTTP API를 통해 특정 컨테이너 업데이트 트리거
          response=$(curl -s -w "%{http_code}" \
            -H "Authorization: Bearer ${{ env.WATCHTOWER_HTTP_API_TOKEN }}" \
            -X POST \
            "https://${{ env.WATCHTOWER_HOST }}/v1/update")
          
          http_code="${response: -3}"
          body="${response%???}"
          
          if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 204 ]; then
            echo "✅ Watchtower 업데이트 트리거 성공 (HTTP $http_code)"
            echo "📦 ${{ env.PROJECT_NAME }}/app:${{ steps.version.outputs.version }} 이미지 배포 요청 완료"
          else
            echo "⚠️ Watchtower 업데이트 트리거 실패 (HTTP $http_code)"
            echo "응답: $body"
            echo "💡 Watchtower가 자동으로 감지하여 업데이트할 예정입니다"
          fi
          
      - name: 🎉 고도화 배포 완료 및 이슈 자동 업데이트
        uses: actions/github-script@v7
        with:
          script: |
            console.log("🎉 SafeWork 배포 완료!");
            console.log("버전: ${{ steps.version.outputs.version }}");
            console.log("레지스트리: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app");
            
            if (context.eventName === "workflow_run") {
              console.log("✅ Claude 작업 후 자동 배포 성공!");
              console.log("워크플로우명:", context.payload.workflow_run.name);
              console.log("워크플로우 결과:", context.payload.workflow_run.conclusion);
              
              // 최근 이슈에서 Claude 관련 이슈 찾기
              try {
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'all',
                  sort: 'updated',
                  per_page: 10
                });
                
                const recentClaudeIssue = issues.data.find(issue => 
                  issue.updated_at > new Date(Date.now() - 60 * 60 * 1000).toISOString() && // 1시간 내
                  (issue.body?.includes('@claude') || 
                   issue.comments_url && 
                   issue.title?.includes('Claude') ||
                   issue.labels?.some(label => 
                     (typeof label === 'string' ? label : label.name)?.includes('claude')
                   ))
                );
                
                if (recentClaudeIssue) {
                  // 이슈 제목을 기반으로 관련 엔드포인트 URL 추론
                  const issueTitle = recentClaudeIssue.title || '';
                  let endpointUrls = [];
                  
                  // SafeWork 프로젝트의 운영 환경 엔드포인트 매핑
                  if (issueTitle.includes('설문') || issueTitle.includes('survey')) {
                    endpointUrls.push('- 설문조사 001 (근골격계): https://safework.jclee.me/survey/001');
                    endpointUrls.push('- 설문조사 002 (신규입사자): https://safework.jclee.me/survey/002');
                  }
                  if (issueTitle.includes('관리') || issueTitle.includes('admin')) {
                    endpointUrls.push('- 관리자 대시보드: https://safework.jclee.me/admin');
                    endpointUrls.push('- SafeWork 관리패널: https://safework.jclee.me/admin/safework');
                  }
                  if (issueTitle.includes('API') || issueTitle.includes('api')) {
                    endpointUrls.push('- SafeWork API: https://safework.jclee.me/api/safework/v2/workers');
                    endpointUrls.push('- 건강검진 API: https://safework.jclee.me/api/safework/v2/health-checks');
                  }
                  if (issueTitle.includes('문서') || issueTitle.includes('document')) {
                    endpointUrls.push('- 문서 관리: https://safework.jclee.me/admin/documents');
                    endpointUrls.push('- 공개 문서: https://safework.jclee.me/documents');
                  }
                  if (issueTitle.includes('인증') || issueTitle.includes('auth') || issueTitle.includes('로그인')) {
                    endpointUrls.push('- 로그인: https://safework.jclee.me/auth/login');
                    endpointUrls.push('- 회원가입: https://safework.jclee.me/auth/register');
                  }
                  
                  // 기본 운영 환경 엔드포인트
                  if (endpointUrls.length === 0) {
                    endpointUrls.push('- SafeWork 홈페이지: https://safework.jclee.me/');
                    endpointUrls.push('- 설문조사 메인: https://safework.jclee.me/survey');
                    endpointUrls.push('- 관리자 패널: https://safework.jclee.me/admin');
                  }
                  
                  const endpointSection = endpointUrls.length > 0 ? 
                    `\n\n**🔗 운영 환경 URL:**\n${endpointUrls.join('\n')}\n\n**✅ 운영 환경에서 직접 확인 가능합니다!**` : '';
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: recentClaudeIssue.number,
                    body: `🚀 **배포 완료!**
                    
                📋 **최종 완료 상태**  
                - ✅ 이슈 분석 완료
                - ✅ 코드 수정 완료
                - ✅ PR 생성 및 병합 완료
                - ✅ 자동 배포 완료
                - ✅ **운영 환경 반영 완료** 🎉${endpointSection}
                
                **🎯 배포 정보:**
                - **버전**: \`${{ steps.version.outputs.version }}\`
                - **레지스트리**: \`${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app\`
                - **완료 시간**: ${new Date().toLocaleString('ko-KR')}
                - **배포 상태**: 성공 ✅
                
                **모든 작업이 완료되었습니다!** 변경사항이 운영 환경에 정상 반영되었습니다.
                
                ---
                🤖 *Fully Automated Claude → Deploy Pipeline*`
                  });
                }
              } catch (error) {
                console.log("이슈 업데이트 중 오류:", error.message);
              }
            } else {
              console.log("✅ 수동 배포 성공!");
            }