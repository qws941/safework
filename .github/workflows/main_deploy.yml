name: SafeWork Deployment Pipeline

on:
  workflow_run:
    workflows: ["SafeWork Claude AI"]
    types: [completed]
    branches: [master, main]
  workflow_dispatch:
  push:
    branches: [master, main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  schedule:
    - cron: '0 2 * * 1'  # Weekly Monday 2AM KST health check

env:
  REGISTRY: registry.jclee.me
  PROJECT_NAME: safework
  WATCHTOWER_HOST: watchtower.jclee.me
  WATCHTOWER_HTTP_API_TOKEN: ${{ secrets.WATCHTOWER_HTTP_API_TOKEN }}
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
  DEPLOYMENT_ENVIRONMENT: production
  HEALTH_CHECK_RETRIES: 3
  HEALTH_CHECK_TIMEOUT: 30

jobs:
  # Pre-deployment Validation
  pre-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should_deploy: ${{ steps.validation.outputs.should_deploy }}
      deployment_reason: ${{ steps.validation.outputs.deployment_reason }}
      skip_reason: ${{ steps.validation.outputs.skip_reason }}
    steps:
      - name: Deploy Condition Validation
        id: validation
        run: |
          echo "🔍 Deployment condition validation started..."
          
          should_deploy="false"
          deployment_reason=""
          skip_reason=""
          
          # Manual execution
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            should_deploy="true"
            deployment_reason="Manual deployment triggered"
          
          # Auto execution after successful Claude workflow
          elif [ "${{ github.event_name }}" = "workflow_run" ] && [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
            should_deploy="true"
            deployment_reason="Automatic deployment after successful Claude workflow"
          
          # 직접 푸시 (긴급 배포)
          elif [ "${{ github.event_name }}" = "push" ]; then
            should_deploy="true"
            deployment_reason="Direct push to main branch (emergency deployment)"
          
          # 스케줄 실행 (건강 체크)
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            should_deploy="false"
            skip_reason="Scheduled health check - no deployment needed"
            deployment_reason="Weekly health check execution"
          
          else
            skip_reason="Deployment condition not met"
          fi
          
          echo "should_deploy=$should_deploy" >> $GITHUB_OUTPUT
          echo "deployment_reason=$deployment_reason" >> $GITHUB_OUTPUT
          echo "skip_reason=$skip_reason" >> $GITHUB_OUTPUT
          
          if [ "$should_deploy" = "true" ]; then
            echo "✅ 배포 조건 충족: $deployment_reason"
          else
            echo "⏭️ 배포 건너뜀: $skip_reason"
          fi

  # 🏗️ 메인 배포 작업
  deploy:
    needs: pre-validation
    if: needs.pre-validation.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    environment:
      name: production
      url: https://safework.jclee.me
    
    steps:
      - name: 🔍 고도화 배포 트리거 디버깅 및 보안 검증
        run: |
          echo "🚀 SafeWork 고도화 배포 파이프라인 v2.0 시작!"
          echo "⏰ 배포 시작 시각: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')"
          echo "🎯 트리거 이벤트: ${{ github.event_name }}"
          echo "🔗 저장소: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}"
          echo "🌐 배포 환경: ${{ env.DEPLOYMENT_ENVIRONMENT }}"
          echo "📋 배포 사유: ${{ needs.pre-validation.outputs.deployment_reason }}"
          
          # 보안 검증
          echo "🔐 보안 검증:"
          echo "  - CLAUDE_CODE_OAUTH_TOKEN: $([ -n "${{ env.CLAUDE_CODE_OAUTH_TOKEN }}" ] && echo "✅ 설정됨" || echo "❌ 누락")"
          echo "  - WATCHTOWER_TOKEN: $([ -n "${{ env.WATCHTOWER_HTTP_API_TOKEN }}" ] && echo "✅ 설정됨" || echo "❌ 누락")"
          echo "  - REGISTRY_PASSWORD: $([ -n "${{ secrets.REGISTRY_PASSWORD }}" ] && echo "✅ 설정됨" || echo "❌ 누락")"
          
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "🤖 Claude AI 워크플로우 정보:"
            echo "  - 결과: ${{ github.event.workflow_run.conclusion }}"
            echo "  - 워크플로우명: ${{ github.event.workflow_run.name }}"
            echo "  - 모드: Claude 성공 후 자동 배포"
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "🚨 긴급 배포 모드: 직접 푸시 감지"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "👤 수동 배포 모드: 관리자 실행"
          fi
          
      - name: 📥 소스코드 체크아웃 및 검증
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 배포 비교를 위한 두 개 커밋 취득
          
      - name: 🔍 코드 변경사항 분석
        run: |
          echo "📈 커밋 변경사항 분석:"
          git diff --name-only HEAD~1 HEAD | head -20
          echo "📊 총 변경 파일 수: $(git diff --name-only HEAD~1 HEAD | wc -l)"
          
      - name: 🏷️ 지능적 버전 생성
        id: version
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(TZ='Asia/Seoul' date '+%Y%m%d-%H%M')
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # 브랜치별 버전 전략
          if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
            VERSION="v3.2-prod-${COMMIT_SHA}"
          else
            VERSION="v3.2-${BRANCH_NAME}-${COMMIT_SHA}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 생성된 버전: $VERSION"
          echo "🔸 브랜치: $BRANCH_NAME"
          echo "⏰ 타임스탬프: $TIMESTAMP"
          
      - name: 🛠️ Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Docker Registry 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: admin
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: 🚀 SafeWork 고성능 빌드 & 푸시 with Enhanced Security
        uses: docker/build-push-action@v6
        id: build
        with:
          context: ./app
          push: true
          platforms: linux/amd64,linux/arm64  # 멀티 플랫폼 지원
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true  # Software Bill of Materials 생성
          provenance: true  # Build provenance 추가
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=$(TZ='Asia/Seoul' date -u +%Y-%m-%dT%H:%M:%SZ)
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.version.outputs.version }}
            DEPLOYMENT_ENVIRONMENT=${{ env.DEPLOYMENT_ENVIRONMENT }}
            CLAUDE_WORKFLOW_ID=${{ github.run_id }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app:latest
            ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app:stable
            ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app:${{ github.sha }}
          labels: |
            org.opencontainers.image.title=SafeWork Industrial Safety System
            org.opencontainers.image.description=Korean Industrial Health & Safety Management Platform
            org.opencontainers.image.url=https://safework.jclee.me
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT
            safework.deployment.environment=${{ env.DEPLOYMENT_ENVIRONMENT }}
            safework.claude.workflow=${{ github.workflow }}
            safework.claude.run-id=${{ github.run_id }}
          
      - name: 🩺 배포 후 건강상태 검사 및 보안 스캔
        run: |
          echo "🔍 배포된 이미지 검증 시작..."
          
          # 이미지 메타데이터 확인
          echo "📊 이미지 정보:"
          docker manifest inspect ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app:${{ steps.version.outputs.version }} && \
          echo "✅ 이미지 메타데이터 검증 성공" || \
          echo "⚠️ 이미지 검증 실패"
          
          # 이미지 크기 확인
          IMAGE_SIZE=$(docker manifest inspect ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app:${{ steps.version.outputs.version }} | jq -r '.manifests[0].size')
          echo "📦 이미지 크기: $(numfmt --to=iec $IMAGE_SIZE)B"
          
          # 빌드 정보 출력
          echo "🏗️ 빌드 정보:"
          echo "  - 이미지 ID: ${{ steps.build.outputs.imageid }}"
          echo "  - 다이제스트: ${{ steps.build.outputs.digest }}"
          echo "  - 메타데이터: ${{ steps.build.outputs.metadata }}"
          
          echo "📈 배포 완료 시간: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')"
          
      - name: 🔄 Watchtower 즉시 업데이트 트리거 with Enhanced Monitoring
        id: watchtower
        run: |
          echo "🔄 Watchtower API를 통한 즉시 업데이트 트리거..."
          
          # Watchtower 서비스 상태 확인
          echo "🩺 Watchtower 서비스 상태 확인..."
          WATCHTOWER_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.WATCHTOWER_HOST }}/v1/health" || echo "000")
          
          if [ "$WATCHTOWER_STATUS" != "200" ]; then
            echo "⚠️ Watchtower 서비스 불안정 (HTTP $WATCHTOWER_STATUS)"
          else
            echo "✅ Watchtower 서비스 정상 (HTTP $WATCHTOWER_STATUS)"
          fi
          
          # Watchtower HTTP API를 통해 특정 컨테이너 업데이트 트리거
          echo "🚀 컨테이너 업데이트 요청..."
          response=$(curl -s -w "%{http_code}" \
            -H "Authorization: Bearer ${{ env.WATCHTOWER_HTTP_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -X POST \
            -d '{"container_filter": "safework-app", "immediate": true}' \
            "https://${{ env.WATCHTOWER_HOST }}/v1/update")
          
          http_code="${response: -3}"
          body="${response%???}"
          
          if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 204 ]; then
            echo "✅ Watchtower 업데이트 트리거 성공 (HTTP $http_code)"
            echo "📦 ${{ env.PROJECT_NAME }}/app:${{ steps.version.outputs.version }} 이미지 즉시 배포 요청 완료"
            echo "watchtower_success=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Watchtower 업데이트 트리거 실패 (HTTP $http_code)"
            echo "응답: $body"
            echo "💡 Watchtower가 자동으로 감지하여 업데이트할 예정입니다"
            echo "watchtower_success=false" >> $GITHUB_OUTPUT
          fi
          
          # 배포 완료 대기 (30초)
          echo "⏳ 배포 완료 대기 중..."
          sleep 30

      - name: 🩺 실제 서비스 상태 확인
        id: health_check
        run: |
          echo "🔍 SafeWork 서비스 상태 확인..."
          
          # 서비스 응답 확인 (최대 3번 재시도)
          for i in $(seq 1 ${{ env.HEALTH_CHECK_RETRIES }}); do
            echo "🔄 건강 체크 시도 $i/${{ env.HEALTH_CHECK_RETRIES }}..."
            
            response=$(curl -s -o /dev/null -w "%{http_code}" \
              --connect-timeout ${{ env.HEALTH_CHECK_TIMEOUT }} \
              --max-time ${{ env.HEALTH_CHECK_TIMEOUT }} \
              "https://safework.jclee.me/health" || echo "000")
            
            if [ "$response" = "200" ]; then
              echo "✅ SafeWork 서비스 정상 응답 (HTTP $response)"
              echo "health_check_success=true" >> $GITHUB_OUTPUT
              break
            else
              echo "⚠️ SafeWork 서비스 응답 실패 (HTTP $response)"
              if [ "$i" -eq "${{ env.HEALTH_CHECK_RETRIES }}" ]; then
                echo "health_check_success=false" >> $GITHUB_OUTPUT
                echo "❌ 모든 건강 체크 시도 실패"
              else
                echo "⏳ 30초 후 재시도..."
                sleep 30
              fi
            fi
          done
          
      - name: 🎉 고도화 배포 완료 및 Claude 이슈 자동 업데이트 v2.0
        uses: actions/github-script@v7
        with:
          script: |
            console.log("🎉 SafeWork 배포 완료!");
            console.log("버전: ${{ steps.version.outputs.version }}");
            console.log("레지스트리: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app");
            
            if (context.eventName === "workflow_run") {
              console.log("✅ Claude 작업 후 자동 배포 성공!");
              console.log("워크플로우명:", context.payload.workflow_run.name);
              console.log("워크플로우 결과:", context.payload.workflow_run.conclusion);
              
              // 최근 이슈에서 Claude 관련 이슈 찾기
              try {
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'all',
                  sort: 'updated',
                  per_page: 10
                });
                
                const recentClaudeIssue = issues.data.find(issue => 
                  issue.updated_at > new Date(Date.now() - 60 * 60 * 1000).toISOString() && // 1시간 내
                  (issue.body?.includes('@claude') || 
                   issue.comments_url && 
                   issue.title?.includes('Claude') ||
                   issue.labels?.some(label => 
                     (typeof label === 'string' ? label : label.name)?.includes('claude')
                   ))
                );
                
                if (recentClaudeIssue) {
                  // 이슈 제목을 기반으로 관련 엔드포인트 URL 추론
                  const issueTitle = recentClaudeIssue.title || '';
                  let endpointUrls = [];
                  
                  // SafeWork 프로젝트의 운영 환경 엔드포인트 매핑
                  if (issueTitle.includes('설문') || issueTitle.includes('survey')) {
                    endpointUrls.push('- 설문조사 001 (근골격계): https://safework.jclee.me/survey/001');
                    endpointUrls.push('- 설문조사 002 (신규입사자): https://safework.jclee.me/survey/002');
                  }
                  if (issueTitle.includes('관리') || issueTitle.includes('admin')) {
                    endpointUrls.push('- 관리자 대시보드: https://safework.jclee.me/admin');
                    endpointUrls.push('- SafeWork 관리패널: https://safework.jclee.me/admin/safework');
                  }
                  if (issueTitle.includes('API') || issueTitle.includes('api')) {
                    endpointUrls.push('- SafeWork API: https://safework.jclee.me/api/safework/v2/workers');
                    endpointUrls.push('- 건강검진 API: https://safework.jclee.me/api/safework/v2/health-checks');
                  }
                  if (issueTitle.includes('문서') || issueTitle.includes('document')) {
                    endpointUrls.push('- 문서 관리: https://safework.jclee.me/admin/documents');
                    endpointUrls.push('- 공개 문서: https://safework.jclee.me/documents');
                  }
                  if (issueTitle.includes('인증') || issueTitle.includes('auth') || issueTitle.includes('로그인')) {
                    endpointUrls.push('- 로그인: https://safework.jclee.me/auth/login');
                    endpointUrls.push('- 회원가입: https://safework.jclee.me/auth/register');
                  }
                  
                  // 기본 운영 환경 엔드포인트
                  if (endpointUrls.length === 0) {
                    endpointUrls.push('- SafeWork 홈페이지: https://safework.jclee.me/');
                    endpointUrls.push('- 설문조사 메인: https://safework.jclee.me/survey');
                    endpointUrls.push('- 관리자 패널: https://safework.jclee.me/admin');
                  }
                  
                  const endpointSection = endpointUrls.length > 0 ? 
                    `\n\n**🔗 운영 환경 URL:**\n${endpointUrls.join('\n')}\n\n**✅ 운영 환경에서 직접 확인 가능합니다!**` : '';
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: recentClaudeIssue.number,
                    body: `🚀 **배포 완료!**
                    
                📋 **최종 완료 상태**  
                - ✅ 이슈 분석 완료
                - ✅ 코드 수정 완료
                - ✅ PR 생성 및 병합 완료
                - ✅ 자동 배포 완료
                - ✅ **운영 환경 반영 완료** 🎉${endpointSection}
                
                **🎯 배포 정보:**
                - **버전**: \`${{ steps.version.outputs.version }}\`
                - **레지스트리**: \`${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/app\`
                - **완료 시간**: ${new Date().toLocaleString('ko-KR')}
                - **배포 상태**: 성공 ✅
                
                **모든 작업이 완료되었습니다!** 변경사항이 운영 환경에 정상 반영되었습니다.
                
                ---
                🤖 *Fully Automated Claude → Deploy Pipeline*`
                  });
                }
              } catch (error) {
                console.log("이슈 업데이트 중 오류:", error.message);
              }
            } else {
              console.log("✅ 수동 배포 성공!");
            }

  # Slack 알림 Job 추가
  deployment-notification:
    runs-on: ubuntu-latest
    needs: [pre-validation, build-and-push, deploy, watchtower-trigger, health-check]
    if: always()  # 성공/실패 관계없이 항상 실행
    steps:
      - name: 🔔 SafeWork 배포 파이프라인 Slack 알림
        run: |
          # 배포 상태 결정
          if [ "${{ needs.health-check.result }}" = "success" ]; then
            STATUS="SUCCESS"
            COLOR="good"
            EMOJI="✅"
          else
            STATUS="FAILED" 
            COLOR="danger"
            EMOJI="❌"
          fi
          
          # Slack 메시지 전송
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-type: application/json" \
            --data "{
              \"channel\": \"#safework-alerts\",
              \"text\": \"$EMOJI SafeWork 배포 파이프라인 $STATUS\",
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"SafeWork Deployment Pipeline\",
                \"fields\": [
                  {\"title\": \"Status\", \"value\": \"$STATUS\", \"short\": true},
                  {\"title\": \"Environment\", \"value\": \"Production\", \"short\": true},
                  {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true},
                  {\"title\": \"Trigger\", \"value\": \"${{ github.event_name }}\", \"short\": true}
                ],
                \"footer\": \"SafeWork Deployment\",
                \"ts\": $(date +%s)
              }]
            }" \
            https://slack.com/api/chat.postMessage