name: 🚀 대량 이슈 자동 해결기

on:
  workflow_dispatch:
    inputs:
      max_issues:
        description: '처리할 최대 이슈 수'
        required: false
        default: '10'
        type: string
      issue_filter:
        description: '이슈 필터 (all/feature/bug/test)'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - feature
        - bug  
        - test

env:
  TZ: Asia/Seoul

jobs:
  bulk-resolve:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
      checks: read
      
    steps:
      - name: 🔍 열린 이슈 대량 분석 및 Claude 할당
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const maxIssues = parseInt('${{ github.event.inputs.max_issues }}') || 10;
            const issueFilter = '${{ github.event.inputs.issue_filter }}' || 'all';
            
            console.log(`🚀 대량 이슈 자동 해결 시작!`);
            console.log(`📊 처리 설정: 최대 ${maxIssues}개 이슈, 필터: ${issueFilter}`);
            
            try {
              // 열린 이슈 조회
              const openIssues = await github.rest.issues.listForRepo({
                owner,
                repo,
                state: 'open',
                per_page: maxIssues,
                sort: 'created',
                direction: 'desc'
              });
              
              console.log(`📋 발견된 열린 이슈: ${openIssues.data.length}개`);
              
              // 이슈 필터링
              let filteredIssues = openIssues.data.filter(issue => {
                if (issue.pull_request) return false; // PR 제외
                
                const title = issue.title.toLowerCase();
                const labels = issue.labels.map(label => 
                  typeof label === 'string' ? label : label.name
                ).join(' ').toLowerCase();
                
                switch(issueFilter) {
                  case 'feature':
                    return title.includes('[feature]') || title.includes('feature') || 
                           labels.includes('feature') || labels.includes('enhancement');
                  case 'bug':
                    return title.includes('[bug]') || title.includes('bug') || 
                           labels.includes('bug');
                  case 'test':
                    return title.includes('[test]') || title.includes('test') || 
                           title.includes('🧪');
                  default:
                    return true;
                }
              });
              
              console.log(`🎯 필터링된 이슈: ${filteredIssues.length}개`);
              
              if (filteredIssues.length === 0) {
                console.log('❌ 처리할 이슈가 없습니다.');
                return;
              }
              
              // 대량 처리 시작 알림
              const bulkProcessComment = `🚀 **대량 이슈 자동 해결 시작**

**📊 처리 현황:**
- 대상 이슈: ${filteredIssues.length}개
- 필터: ${issueFilter}
- 처리 시간: ${new Date().toLocaleString('ko-KR')}

**🤖 처리 방식:**
각 이슈에 @claude가 자동으로 할당되어 순차적으로 해결합니다.

**📋 대상 이슈 목록:**
${filteredIssues.map(issue => 
  `- #${issue.number}: ${issue.title}`
).join('\n')}

---
*🤖 대량 자동화 시스템 by Enhanced Claude*`;
              
              // 각 이슈에 Claude 할당 댓글 추가
              const processedIssues = [];
              let successCount = 0;
              let errorCount = 0;
              
              for (const issue of filteredIssues) {
                try {
                  console.log(`🔄 이슈 #${issue.number} 처리 중...`);
                  
                  // 이미 @claude 댓글이 있는지 확인
                  const comments = await github.rest.issues.listComments({
                    owner,
                    repo,
                    issue_number: issue.number,
                    per_page: 100
                  });
                  
                  const hasClaudeComment = comments.data.some(comment => 
                    comment.body && comment.body.includes('@claude')
                  );
                  
                  const hasClaudeInBody = issue.body && issue.body.includes('@claude');
                  
                  if (!hasClaudeComment && !hasClaudeInBody) {
                    // Claude 할당 댓글 추가
                    await github.rest.issues.createComment({
                      owner,
                      repo,
                      issue_number: issue.number,
                      body: `🤖 **대량 자동 처리 할당**

@claude 이 이슈를 자동으로 해결해 주세요!

**📋 이슈 정보:**
- 제목: ${issue.title}
- 생성일: ${new Date(issue.created_at).toLocaleDateString('ko-KR')}
- 라벨: ${issue.labels.map(l => typeof l === 'string' ? l : l.name).join(', ') || '없음'}

**🎯 처리 지침:**
1. 이슈 내용을 정확히 분석하세요
2. SafeWork 프로젝트 패턴을 따라 구현하세요
3. 코드 변경 후 적절한 커밋 메시지로 커밋하세요
4. 작업 완료 후 이슈를 닫아주세요

**우선순위**: 대량 처리 (${new Date().toLocaleString('ko-KR')})

---
*🚀 Enhanced Bulk Processing System*`
                    });
                    
                    successCount++;
                    processedIssues.push({
                      number: issue.number,
                      title: issue.title,
                      status: 'assigned'
                    });
                    
                    console.log(`✅ 이슈 #${issue.number} Claude 할당 완료`);
                    
                    // API 제한 방지를 위한 대기
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                  } else {
                    console.log(`⏩ 이슈 #${issue.number}는 이미 Claude 할당됨`);
                    processedIssues.push({
                      number: issue.number,
                      title: issue.title,
                      status: 'already_assigned'
                    });
                  }
                  
                } catch (error) {
                  console.error(`❌ 이슈 #${issue.number} 처리 실패:`, error.message);
                  errorCount++;
                  processedIssues.push({
                    number: issue.number,
                    title: issue.title,
                    status: 'error',
                    error: error.message
                  });
                }
              }
              
              // 최종 결과 요약
              console.log(`\n📊 **대량 처리 완료!**`);
              console.log(`✅ 성공: ${successCount}개`);
              console.log(`❌ 오류: ${errorCount}개`);
              console.log(`⏩ 이미 할당됨: ${processedIssues.filter(p => p.status === 'already_assigned').length}개`);
              
              // 결과 요약 이슈 생성
              const summaryBody = `🎯 **대량 이슈 처리 완료 보고서**

**📊 처리 결과:**
- ✅ 새로 할당된 이슈: ${successCount}개
- ⏩ 이미 할당된 이슈: ${processedIssues.filter(p => p.status === 'already_assigned').length}개  
- ❌ 처리 실패: ${errorCount}개
- 📋 총 처리된 이슈: ${processedIssues.length}개

**🔍 상세 내역:**
${processedIssues.map(issue => {
  const statusIcon = issue.status === 'assigned' ? '✅' : 
                    issue.status === 'already_assigned' ? '⏩' : '❌';
  return `${statusIcon} #${issue.number}: ${issue.title} (${issue.status})`;
}).join('\n')}

**⏰ 처리 시간:** ${new Date().toLocaleString('ko-KR')}

**🤖 다음 단계:**
각 이슈에서 Claude가 자동으로 작업을 시작합니다. GitHub Actions 로그에서 진행 상황을 확인하세요.

---
*🚀 Enhanced Bulk Issue Resolver v2.0*`;

              await github.rest.issues.create({
                owner,
                repo,
                title: `📊 대량 처리 완료: ${successCount}개 이슈 자동 할당 (${new Date().toLocaleDateString('ko-KR')})`,
                body: summaryBody,
                labels: ['🤖 claude-ready', '📊 bulk-processing', '✅ completed']
              });
              
              console.log(`🎉 대량 처리 완료! 결과 이슈가 생성되었습니다.`);
              
            } catch (error) {
              console.error('❌ 대량 처리 중 오류 발생:', error);
              throw error;
            }