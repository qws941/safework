name: 🔍 Claude PR Review

concurrency:
  group: pr-review-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  pr-review:
    if: github.event.pull_request.draft == false
    
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 PR Analysis
        id: pr_analysis
        run: |
          echo "🔍 Analyzing PR context..."
          
          # PR file analysis
          FILES_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | wc -l)
          LINES_CHANGED=$(git diff --stat ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | tail -1 | grep -o '[0-9]\+ insertion\|[0-9]\+ deletion' | head -1 | grep -o '[0-9]\+' || echo "0")
          
          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "lines_changed=$LINES_CHANGED" >> $GITHUB_OUTPUT
          
          # Check for security-related file changes
          if git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -E "(auth|login|password|secret|key|token)" > /dev/null; then
            echo "security_related=true" >> $GITHUB_OUTPUT
          else
            echo "security_related=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for database changes
          if git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -E "(models|migration|schema|sql)" > /dev/null; then
            echo "database_related=true" >> $GITHUB_OUTPUT
          else
            echo "database_related=false" >> $GITHUB_OUTPUT
          fi
          
          # Generate PR context file
          echo "=== SafeWork PR 컨텍스트 ===" > pr_context.txt
          echo "PR 번호: ${{ github.event.pull_request.number }}" >> pr_context.txt
          echo "제목: ${{ github.event.pull_request.title }}" >> pr_context.txt
          echo "작성자: ${{ github.event.pull_request.user.login }}" >> pr_context.txt
          echo "상태: ${{ github.event.pull_request.state }}" >> pr_context.txt
          echo "브랜치: ${{ github.event.pull_request.head.ref }} → ${{ github.event.pull_request.base.ref }}" >> pr_context.txt
          echo "변경 파일 수: $FILES_CHANGED" >> pr_context.txt
          echo "변경 라인 수: $LINES_CHANGED" >> pr_context.txt
          echo "보안 관련: ${{ steps.pr_analysis.outputs.security_related }}" >> pr_context.txt
          echo "데이터베이스 관련: ${{ steps.pr_analysis.outputs.database_related }}" >> pr_context.txt
          echo "" >> pr_context.txt
          
          echo "=== PR 설명 ===" >> pr_context.txt
          echo '${{ github.event.pull_request.body }}' >> pr_context.txt
          echo "" >> pr_context.txt
          
          echo "=== 변경된 파일 목록 ===" >> pr_context.txt
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} >> pr_context.txt
          echo "" >> pr_context.txt
          
          echo "=== 변경 내용 상세 ===" >> pr_context.txt
          git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} >> pr_context.txt
          
      - name: 🔍 Comprehensive PR Review  
        uses: anthropics/claude-code-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          anthropic_api_key: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          enable_progress: true  # Enable visual progress tracking
          enable_inline_comments: true  # Add inline code comments
          system_prompt: |
            You are Claude Code performing comprehensive PR reviews for SafeWork industrial safety management system.
            
            **Review Dimensions:**
            1. 🏗️ **Code Quality**: Structure, patterns, maintainability
            2. 🔒 **Security**: Vulnerabilities, auth, input validation  
            3. ⚡ **Performance**: Queries, caching, resource usage
            4. 🧪 **Testing**: Coverage, test quality, edge cases
            5. 📝 **Documentation**: Comments, README, API docs
            
            **SafeWork Context:**
            - Industrial safety management for Korean construction/manufacturing
            - Health surveys (001 Musculoskeletal, 002 New Employee)
            - SafeWork admin panels (13 specialized management areas)
            - PostgreSQL database with Redis caching
            - Anonymous survey access (user_id=1)
            - Bootstrap 4.6 + jQuery frontend
            
            **Review Standards:**
            - Korean workplace safety regulations compliance
            - Data privacy for health information
            - Mobile-responsive design for field workers
            - Korean language support (KST timezone)
            - Industrial environment reliability requirements
          prompt: |
            🔍 **SafeWork PR 종합 분석 및 리뷰**
            
            **변경 사항:**
            - 파일: ${{ steps.pr_analysis.outputs.files_changed }}개 변경
            - 라인: ${{ steps.pr_analysis.outputs.lines_changed }}줄 수정  
            - 보안 관련: ${{ steps.pr_analysis.outputs.security_related }}
            - 데이터베이스 관련: ${{ steps.pr_analysis.outputs.database_related }}
            
            **리뷰 체크리스트:**
            
            ☐ **코드 품질 검토**
            - [ ] 코딩 표준 준수 (PEP 8, Black formatting)
            - [ ] 함수/클래스 설계 적절성
            - [ ] 에러 핸들링 및 로깅
            - [ ] 코드 중복 최소화
            
            ☐ **보안 분석**  
            - [ ] 인증/권한 검증 (@login_required)
            - [ ] SQL 인젝션 방지 (ORM 사용)
            - [ ] XSS 방지 (템플릿 이스케이핑)
            - [ ] 민감 정보 하드코딩 확인
            
            ☐ **성능 최적화**
            - [ ] 데이터베이스 쿼리 효율성
            - [ ] Redis 캐싱 활용
            - [ ] 페이지네이션 구현
            - [ ] 메모리 사용량 최적화
            
            ☐ **테스트 커버리지**
            - [ ] 단위 테스트 존재/수정
            - [ ] 통합 테스트 고려
            - [ ] 엣지 케이스 처리
            
            ☐ **문서화**
            - [ ] 코드 주석 적절성
            - [ ] API 문서 업데이트
            - [ ] README 수정 필요성
            
            **특화 검토 사항:**
            - 건강 설문조사 로직 (001/002)
            - SafeWork 관리 패널 기능
            - 한국어/KST 지원
            - 산업 안전 규정 준수
            
            각 항목을 체크하고 상세한 피드백을 제공해주세요.
          
      - name: 📊 Review Metrics
        if: always()
        run: |
          echo "=== PR 리뷰 완료 ==="
          echo "PR 번호: ${{ github.event.pull_request.number }}"
          echo "제목: ${{ github.event.pull_request.title }}"
          echo "변경 파일: ${{ steps.pr_analysis.outputs.files_changed }}개"
          echo "변경 라인: ${{ steps.pr_analysis.outputs.lines_changed }}줄"
          echo "보안 관련: ${{ steps.pr_analysis.outputs.security_related }}"
          echo "데이터베이스 관련: ${{ steps.pr_analysis.outputs.database_related }}"
          echo "리뷰 상태: ${{ job.status }}"
          echo "완료 시간: $(date)"