name: 🎯 Issue Handler

concurrency:
  group: issue-handler-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: true

on:
  issues:
    types: [opened, labeled, assigned]
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: read
  id-token: write

jobs:
  handle-issue:
    if: |
      (github.event_name == 'issues' && (
        contains(github.event.issue.body, '@claude') || 
        contains(github.event.issue.title, '@claude') ||
        contains(github.event.issue.labels.*.name, 'claude-actionable') ||
        contains(github.event.issue.labels.*.name, 'needs-analysis')
      )) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude'))
    
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 🔗 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 🔍 Context Analysis
        id: context
        run: |
          echo "issue_number=${{ github.event.issue.number || 'N/A' }}" >> $GITHUB_OUTPUT
          echo "issue_title=${{ github.event.issue.title || 'N/A' }}" >> $GITHUB_OUTPUT
          echo "issue_author=${{ github.event.issue.user.login || 'N/A' }}" >> $GITHUB_OUTPUT
          echo "event_type=${{ github.event_name }}" >> $GITHUB_OUTPUT
          echo "repository=SafeWork Flask Application" >> $GITHUB_OUTPUT
          echo "architecture=Independent containers (PostgreSQL, Redis, Flask)" >> $GITHUB_OUTPUT
          
          # Extract issue labels
          LABELS="${{ join(github.event.issue.labels.*.name, ',') }}"
          echo "issue_labels=$LABELS" >> $GITHUB_OUTPUT
          
          # Determine issue priority and type
          if [[ "$LABELS" == *"critical"* ]]; then
            echo "priority=critical" >> $GITHUB_OUTPUT
          elif [[ "$LABELS" == *"high"* ]]; then
            echo "priority=high" >> $GITHUB_OUTPUT
          elif [[ "$LABELS" == *"bug"* ]]; then
            echo "priority=high" >> $GITHUB_OUTPUT
          else
            echo "priority=normal" >> $GITHUB_OUTPUT
          fi
          
      - name: 🎯 Claude Issue Triage & Analysis
        uses: anthropics/claude-code-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          anthropic_api_key: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          trigger_phrase: ""  # Always run for qualified issues
          prompt: |
            /label-issue ISSUE_NUMBER: ${{ github.event.issue.number || 'N/A' }}
            
            🎯 **SafeWork 이슈 자동 트리아지 및 분석**
            
            **이슈 정보:**
            - 제목: "${{ github.event.issue.title || 'N/A' }}"  
            - 작성자: ${{ github.event.issue.user.login || 'N/A' }}
            - 현재 라벨: ${{ join(github.event.issue.labels.*.name, ', ') }}
            
            **이슈 내용:**
            ```
            ${{ github.event.issue.body || github.event.comment.body }}
            ```
            
            **작업 지시:**
            1. 이슈를 분석하고 적절한 라벨 자동 할당
            2. 우선순위 결정 (critical/high/medium/low)
            3. 가능한 경우 즉시 해결 시도
            4. 한국어로 분석 결과 및 해결 방안 제시
            5. 추가 정보 필요 시 질문 생성
          
      - name: 📊 Issue Processing Summary
        if: always()
        run: |
          echo "=== 이슈 처리 요약 ==="
          echo "이슈 번호: ${{ steps.context.outputs.issue_number }}"
          echo "제목: ${{ steps.context.outputs.issue_title }}"
          echo "우선순위: ${{ steps.context.outputs.priority }}"
          echo "처리 상태: ${{ job.status }}"
          echo "처리 시간: $(date)"
          
          # Create processing summary comment if needed
          if [ "${{ job.status }}" != "success" ]; then
            gh issue comment ${{ steps.context.outputs.issue_number }} \
              --body "🚨 **자동 처리 실패**

              이슈 자동 처리 중 문제가 발생했습니다. 
              수동 검토가 필요합니다.
              
              **처리 시간**: $(date)
              **상태**: ${{ job.status }}
              
              @claude 다시 시도하거나 관리자에게 문의해주세요."
          fi