name: 🔍 Claude PR Code Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]
    paths:
      - 'app/**'
      - 'scripts/**'
      - 'migrations/**'
      - 'docker-compose.yml'
      - 'requirements.txt'
      - '.github/workflows/**'

jobs:
  claude-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🤖 Claude Code Review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            🔍 **SafeWork 시스템 전문 코드 리뷰**
            
            SafeWork는 Flask 3.0 기반의 산업안전보건 관리 시스템입니다.
            다음 관점에서 전문적인 코드 리뷰를 수행해주세요:

            **1. SafeWork 도메인 특화 검토**
            - 산업안전보건 관련 규정 준수
            - 설문조사(001/002) 데이터 처리 정확성
            - 근골격계 증상 데이터 무결성
            - 의료정보 보호 및 개인정보 처리방침 준수

            **2. 보안 및 데이터 보호**
            - Flask-Login 인증 로직 검증
            - SQL 인젝션 방지 (SQLAlchemy 사용 패턴)
            - CSRF 보호 구현
            - 민감 데이터 로깅 방지
            - XSS 방지 템플릿 처리

            **3. Flask 3.0 + SQLAlchemy 2.0 모범 사례**
            - Application Factory 패턴 준수
            - Blueprint 구조 최적화
            - SQLAlchemy 2.0 문법 사용
            - 데이터베이스 마이그레이션 무결성
            - KST 타임존 처리 (`kst_now()` 함수 사용)

            **4. 성능 및 확장성**
            - 데이터베이스 쿼리 최적화
            - Redis 캐싱 전략
            - 페이지네이션 구현
            - 메모리 사용량 최적화

            **5. Docker 컨테이너 환경**
            - docker-compose.yml 설정 최적화
            - 컨테이너 간 네트워킹
            - 환경 변수 관리
            - 헬스체크 구현

            **6. 테스트 및 유지보수성**
            - pytest 단위 테스트 커버리지
            - 코드 가독성 및 문서화
            - 에러 처리 및 로깅 전략
            - 한국어 UI/UX 최적화

            **MCP 도구 활용 지시:**
            1. **mcp__serena**: 코드 분석 시 반드시 사용
               - 프로젝트 활성화: `mcp__serena__activate_project('.')`
               - 심볼 분석: `mcp__serena__get_symbols_overview()`
               - 참조 검색: `mcp__serena__find_referencing_symbols()`

            2. **mcp__sequential-thinking**: 복잡한 리뷰 항목 분석
               - 단계적 코드 분석: `mcp__sequential-thinking__sequentialthinking()`

            3. **mcp__shrimp-task-manager**: 리뷰 결과 체계화
               - 개선사항 작업 계획: `mcp__shrimp-task-manager__plan_task()`

            상세한 피드백과 개선사항을 인라인 코멘트로 제공해주세요.
            특히 SafeWork 도메인 지식을 활용한 전문적인 검토를 부탁드립니다.

          claude_args: |
            --allowedTools "mcp__serena__*,mcp__sequential-thinking__*,mcp__shrimp-task-manager__*,mcp__github_inline_comment__create_inline_comment,Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*)"