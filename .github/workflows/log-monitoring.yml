name: üìä Operational Log Monitoring

on:
  schedule:
    # Run every 2 hours during business hours (KST 9 AM - 6 PM)
    - cron: '0 0,2,4,6,8,10 * * 1-5'
  workflow_dispatch:
    inputs:
      monitoring_scope:
        description: 'Monitoring scope'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - 'comprehensive'
          - 'error-analysis'
          - 'performance-tracking'
          - 'security-audit'
          - 'user-activity'
      time_range:
        description: 'Time range for log analysis'
        required: true
        default: '2hours'
        type: choice
        options:
          - '1hour'
          - '2hours'
          - '6hours'
          - '24hours'
          - '7days'

env:
  SAFEWORK_DEV_URL: safework-dev.jclee.me
  SAFEWORK_PROD_URL: safework.jclee.me
  PORTAINER_URL: portainer.jclee.me

jobs:
  operational-log-analysis:
    name: üìä SafeWork Operational Log Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: ü§ñ Comprehensive Log Analysis & Monitoring
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            üìä **SafeWork Operational Log Analysis & Monitoring System**
            
            REPO: ${{ github.repository }}
            MONITORING_SCOPE: ${{ github.event.inputs.monitoring_scope || 'comprehensive' }}
            TIME_RANGE: ${{ github.event.inputs.time_range || '2hours' }}
            SAFEWORK_DEV_URL: https://${{ env.SAFEWORK_DEV_URL }}
            SAFEWORK_PROD_URL: https://${{ env.SAFEWORK_PROD_URL }}
            PORTAINER_URL: https://${{ env.PORTAINER_URL }}
            
            Please perform comprehensive operational log analysis for SafeWork application
            across multiple environments using dynamic API calls without hardcoding.

            **1. Application Health & Status Monitoring**
            ```
            - Service availability verification across environments
            - Response time and performance metrics collection
            - Database connectivity and transaction analysis
            - Redis cache hit ratio and performance tracking
            - Container health and resource utilization
            ```

            **2. Portainer API Integration for Container Monitoring**
            ```
            - Container status and lifecycle events
            - Resource usage patterns (CPU, Memory, Network, Disk)
            - Log aggregation from all SafeWork containers
            - Volume usage and data persistence verification
            - Network connectivity and port mapping status
            ```

            **3. Application-Specific Log Analysis**
            ```
            - Survey submission patterns and success rates
            - User authentication and access patterns
            - Admin panel usage and management activities
            - MSDS management system usage tracking
            - Document access and version control activities
            - Database migration status and performance
            ```

            **4. Error Detection & Alert Generation**
            ```
            - HTTP error code analysis (4xx, 5xx patterns)
            - Database connection failures and deadlocks
            - Application exception patterns
            - Security-related events and potential threats
            - Performance degradation indicators
            ```

            **MCP Tools Usage Instructions:**
            1. **mcp__serena__***: Codebase context for log analysis
               - `mcp__serena__activate_project('.')`
               - `mcp__serena__search_for_pattern()`: Find logging patterns in code
               - `mcp__serena__get_symbols_overview()`: Understand application structure

            2. **mcp__sequential-thinking__sequentialthinking**: Systematic analysis
               - Environment health check ‚Üí Log collection ‚Üí Pattern analysis ‚Üí Alert generation

            3. **mcp__shrimp-task-manager__***: Issue management
               - `mcp__shrimp-task-manager__plan_task()`: Plan remediation for identified issues
               - `mcp__shrimp-task-manager__analyze_task()`: Technical impact assessment
               - `mcp__shrimp-task-manager__split_tasks()`: Break down complex operational issues

            4. **mcp__github__***: Issue tracking integration
               - `mcp__github__create_issue()`: Auto-create issues for critical problems
               - `mcp__github__search_issues()`: Check for existing similar issues
               - `mcp__github__add_issue_comment()`: Update existing operational issues

            **Dynamic API Integration (No Hardcoding):**
            ```bash
            # Environment variables usage
            PORTAINER_TOKEN="${{ secrets.PORTAINER_API_TOKEN }}"
            PORTAINER_BASE_URL="https://${{ env.PORTAINER_URL }}"
            SAFEWORK_DEV="${{ env.SAFEWORK_DEV_URL }}"
            SAFEWORK_PROD="${{ env.SAFEWORK_PROD_URL }}"
            
            # Health checks
            curl -f -s "https://${SAFEWORK_DEV}/health"
            curl -f -s "https://${SAFEWORK_PROD}/health"
            
            # Portainer container logs
            curl -H "Authorization: Bearer ${PORTAINER_TOKEN}" \
                 "${PORTAINER_BASE_URL}/api/endpoints/1/docker/containers/json"
            
            # Container log extraction
            curl -H "Authorization: Bearer ${PORTAINER_TOKEN}" \
                 "${PORTAINER_BASE_URL}/api/endpoints/1/docker/containers/{container_id}/logs?tail=1000"
            ```

            **Monitoring Scope Analysis:**

            üîç **comprehensive**: Complete operational monitoring
            - All system components health verification
            - Performance metrics across all environments  
            - Log pattern analysis and trend identification
            - User activity and system usage analytics
            - Security event monitoring and compliance check

            üö® **error-analysis**: Error-focused monitoring
            - Exception and error log aggregation
            - HTTP error pattern analysis
            - Database error and deadlock detection
            - Application crash and recovery tracking
            - Failed request analysis and remediation

            ‚ö° **performance-tracking**: Performance-focused monitoring
            - Response time trend analysis
            - Database query performance tracking
            - Memory and CPU usage optimization
            - Cache efficiency and hit ratio analysis
            - Bottleneck identification and resolution

            üîí **security-audit**: Security-focused monitoring
            - Authentication failure pattern analysis
            - Suspicious access attempt detection
            - SQL injection and XSS attempt monitoring
            - Data access audit trail verification
            - Compliance and security policy adherence

            üë• **user-activity**: User activity monitoring
            - Survey submission patterns and analytics
            - Admin panel usage statistics
            - Document access and download patterns
            - User session and engagement metrics
            - Feature usage analytics and optimization

            **Time Range Processing:**
            - Adjust API calls and log collection based on specified time range
            - Aggregate metrics appropriate to the time window
            - Generate trending and comparative analysis
            - Identify anomalies within the specified period

            **Automated Response Actions:**
            1. Generate operational health dashboard data
            2. Create GitHub issues for critical problems
            3. Send alerts for performance degradation
            4. Update monitoring metrics and KPIs
            5. Provide recommendations for operational improvements

            **Final Deliverables:**
            1. Comprehensive operational status report
            2. Performance metrics and trending analysis
            3. Critical issue identification and resolution plans
            4. Operational recommendations and improvements
            5. Updated monitoring dashboard with latest metrics

            Perform all monitoring tasks systematically using MCP tools,
            ensuring no hardcoded values and dynamic environment-based configuration.
            Focus on actionable insights and automated problem resolution.

          claude_args: |
            --model claude-opus-4-1-20250805
            --allowedTools "mcp__serena__*,mcp__sequential-thinking__*,mcp__shrimp-task-manager__*,mcp__github__*,mcp__exa__*,Bash(curl:*),Bash(jq:*),Bash(grep:*),Bash(awk:*),Bash(date:*)"

  container-log-collection:
    name: üê≥ Container Log Collection & Analysis
    runs-on: ubuntu-latest
    needs: operational-log-analysis
    
    steps:
      - name: üìä Container Log Deep Analysis
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            üê≥ **SafeWork Container Log Deep Analysis**
            
            TIME_RANGE: ${{ github.event.inputs.time_range || '2hours' }}
            PORTAINER_API_URL: https://${{ env.PORTAINER_URL }}
            
            Please perform detailed container log analysis using Portainer API.
            Focus on SafeWork application containers: app, mysql, redis.

            **Container Analysis Tasks:**
            1. Extract and analyze logs from all SafeWork containers
            2. Identify error patterns and anomalies
            3. Performance bottleneck detection
            4. Resource utilization trend analysis
            5. Inter-container communication verification

            **MCP Tools for Container Analysis:**
            - `mcp__sequential-thinking__sequentialthinking()`: Systematic log analysis
            - `mcp__shrimp-task-manager__plan_task()`: Container optimization planning

            **API Integration:**
            ```bash
            # Dynamic container log retrieval
            PORTAINER_TOKEN="${{ secrets.PORTAINER_API_TOKEN }}"
            API_BASE="https://${{ env.PORTAINER_URL }}/api"
            
            # Get container list and analyze logs
            curl -H "Authorization: Bearer ${PORTAINER_TOKEN}" "${API_BASE}/endpoints/1/docker/containers/json"
            ```

            Generate detailed container performance report with optimization recommendations.

          claude_args: |
            --model claude-opus-4-1-20250805
            --allowedTools "mcp__sequential-thinking__*,mcp__shrimp-task-manager__*,Bash(curl:*),Bash(jq:*)"

  alert-generation:
    name: üö® Smart Alert Generation
    runs-on: ubuntu-latest
    needs: [operational-log-analysis, container-log-collection]
    if: always()
    
    steps:
      - name: üö® Generate Intelligent Alerts
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            üö® **SafeWork Smart Alert Generation System**
            
            LOG_ANALYSIS_STATUS: ${{ needs.operational-log-analysis.result }}
            CONTAINER_ANALYSIS_STATUS: ${{ needs.container-log-collection.result }}
            
            Based on the completed log analysis, generate intelligent alerts and notifications.
            Create appropriate responses for different severity levels.

            **Alert Generation Framework:**
            1. Severity classification (Critical, High, Medium, Low, Info)
            2. Impact assessment (User-facing, Performance, Security, Operational)
            3. Automated response recommendation
            4. Escalation path determination
            5. Resolution timeline estimation

            **MCP Tools for Alert Management:**
            - `mcp__shrimp-task-manager__plan_task()`: Alert response planning
            - `mcp__github__create_issue()`: Critical issue creation
            - `mcp__sequential-thinking__sequentialthinking()`: Alert prioritization

            Generate comprehensive alert summary with appropriate escalation actions.

          claude_args: |
            --model claude-opus-4-1-20250805
            --allowedTools "mcp__shrimp-task-manager__*,mcp__github__*,mcp__sequential-thinking__*"

      - name: üì± Slack Alert Notification
        if: needs.operational-log-analysis.result == 'failure' || needs.container-log-collection.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: '#safework-alerts'
          custom_payload: |
            {
              "attachments": [{
                "color": "danger",
                "title": "üö® SafeWork Operational Alert",
                "fields": [
                  {
                    "title": "Alert Type",
                    "value": "Operational Monitoring Alert",
                    "short": true
                  },
                  {
                    "title": "Monitoring Scope", 
                    "value": "${{ github.event.inputs.monitoring_scope || 'comprehensive' }}",
                    "short": true
                  },
                  {
                    "title": "Analysis Status",
                    "value": "${{ needs.operational-log-analysis.result }}",
                    "short": true
                  },
                  {
                    "title": "Container Status",
                    "value": "${{ needs.container-log-collection.result }}",
                    "short": true
                  }
                ],
                "footer": "SafeWork Monitoring System",
                "ts": "${{ github.event.repository.updated_at }}"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: üìß Critical Alert Email
        if: needs.operational-log-analysis.result == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "üö® CRITICAL: SafeWork Operational Alert"
          to: ${{ secrets.CRITICAL_ALERT_EMAIL }}
          from: SafeWork Monitoring <noreply@jclee.me>
          body: |
            CRITICAL ALERT: SafeWork operational monitoring has detected critical issues.
            
            Monitoring Scope: ${{ github.event.inputs.monitoring_scope || 'comprehensive' }}
            Time Range: ${{ github.event.inputs.time_range || '2hours' }}
            Analysis Status: ${{ needs.operational-log-analysis.result }}
            
            Please check the GitHub Actions logs and take immediate corrective action.
            
            Repository: ${{ github.repository }}
            Workflow: ${{ github.workflow }}
            Run ID: ${{ github.run_id }}