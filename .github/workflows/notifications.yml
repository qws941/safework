name: SafeWork Smart Notifications
on:
  issues:
    types: [opened, closed, labeled, reopened]
  pull_request:
    types: [opened, closed, merged, ready_for_review]
  workflow_run:
    workflows: ["Claude", "Deploy", "Review"]
    types: [completed]
  schedule:
    - cron: '0 9 * * 1'  # Weekly Monday 9AM KST report

env:
  SAFEWORK_URL: "https://safework.jclee.me"

jobs:
  smart-slack-notify:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout for Context
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: SafeWork Smart Slack Notification
        uses: actions/github-script@v7
        with:
          script: |
            // @slack/web-api 모듈이 GitHub Actions에서 사용할 수 없으므로 fetch를 사용
            
            // 이벤트 타입 감지
            const eventType = context.eventName;
            const issue = context.payload.issue;
            const pr = context.payload.pull_request;
            const workflowRun = context.payload.workflow_run;
            
            // Slack 메시지 구성
            let notification = {};
            
            if (eventType === 'issues') {
              notification = await buildIssueNotification(issue, context);
            } else if (eventType === 'pull_request') {
              notification = await buildPRNotification(pr, context);
            } else if (eventType === 'workflow_run') {
              notification = await buildWorkflowNotification(workflowRun, context);
            } else if (eventType === 'schedule') {
              notification = await buildWeeklyReport(context);
            }
            
            if (notification.shouldSend) {
              await sendSlackNotification(notification.payload);
            }
            
            // 이슈 알림 구성
            async function buildIssueNotification(issue, context) {
              const action = context.payload.action;
              const labels = issue.labels.map(label => label.name);
              const isPriority = labels.some(label => label.startsWith('P0-') || label.startsWith('P1-'));
              const isKorean = labels.includes('lang:korean');
              
              // 우선순위 이슈만 알림 (P0, P1)
              if (!isPriority && action === 'opened') return { shouldSend: false };
              
              const priorityLevel = labels.find(label => label.startsWith('P'))?.split('-')[0] || 'P2';
              const component = labels.find(label => label.startsWith('component:'))?.split(':')[1] || 'general';
              
              const emoji = {
                'P0': '🚨',
                'P1': '⚠️', 
                'P2': 'ℹ️'
              }[priorityLevel] || 'ℹ️';
              
              const color = {
                'P0': 'danger',
                'P1': 'warning',
                'P2': 'good'
              }[priorityLevel] || 'good';
              
              const componentEmoji = {
                'survey': '📋',
                'admin': '👨‍💼',
                'medical': '🏥',
                'api': '🔗',
                'deployment': '🚀',
                'database': '🗄️',
                'frontend': '🖥️'
              }[component] || '⚙️';
              
              return {
                shouldSend: true,
                payload: {
                  channel: '#safework-alerts',
                  text: `${emoji} SafeWork ${priorityLevel} 이슈 ${action === 'opened' ? '발생' : action}`,
                  attachments: [{
                    color: color,
                    title: `${componentEmoji} ${issue.title}`,
                    title_link: issue.html_url,
                    fields: [
                      {
                        title: "우선순위",
                        value: priorityLevel,
                        short: true
                      },
                      {
                        title: "컴포넌트", 
                        value: component,
                        short: true
                      },
                      {
                        title: "작성자",
                        value: issue.user.login,
                        short: true
                      },
                      {
                        title: "언어",
                        value: isKorean ? "한국어 🇰🇷" : "English 🇺🇸",
                        short: true
                      },
                      {
                        title: "라벨",
                        value: labels.length > 0 ? labels.join(', ') : 'None',
                        short: false
                      },
                      {
                        title: "SafeWork 시스템",
                        value: `<${process.env.SAFEWORK_URL}|SafeWork 접속> | <${issue.html_url}|GitHub 이슈>`,
                        short: false
                      }
                    ],
                    footer: "SafeWork AI Monitoring",
                    footer_icon: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                    ts: Math.floor(Date.now() / 1000)
                  }],
                  blocks: priorityLevel === 'P0' ? [{
                    type: "section",
                    text: {
                      type: "mrkdwn", 
                      text: `🚨 *긴급 대응 필요* 🚨\n• Claude AI 자동 분석 시작\n• 담당팀 즉시 확인 요청\n• 시스템 상태: <${process.env.SAFEWORK_URL}/health|헬스체크>`
                    }
                  }] : []
                }
              };
            }
            
            // PR 알림 구성
            async function buildPRNotification(pr, context) {
              const action = context.payload.action;
              
              // merged, ready_for_review만 알림
              if (!['merged', 'ready_for_review'].includes(action)) {
                return { shouldSend: false };
              }
              
              const emoji = action === 'merged' ? '✅' : '👀';
              const color = action === 'merged' ? 'good' : '#36a64f';
              
              return {
                shouldSend: true,
                payload: {
                  channel: '#safework-dev',
                  text: `${emoji} SafeWork PR ${action}`,
                  attachments: [{
                    color: color,
                    title: `🔄 ${pr.title}`,
                    title_link: pr.html_url,
                    fields: [
                      {
                        title: "상태",
                        value: action === 'merged' ? '병합 완료' : '리뷰 준비됨',
                        short: true
                      },
                      {
                        title: "작성자",
                        value: pr.user.login,
                        short: true
                      },
                      {
                        title: "변경사항",
                        value: `+${pr.additions} -${pr.deletions} (${pr.changed_files} files)`,
                        short: true
                      },
                      {
                        title: "브랜치",
                        value: `${pr.head.ref} → ${pr.base.ref}`,
                        short: true
                      }
                    ]
                  }]
                }
              };
            }
            
            // 워크플로우 알림 구성
            async function buildWorkflowNotification(workflowRun, context) {
              const conclusion = workflowRun.conclusion;
              const workflowName = workflowRun.name;
              
              // 실패한 워크플로우만 알림
              if (conclusion !== 'failure') return { shouldSend: false };
              
              const emoji = '❌';
              const channel = workflowName === 'Deploy' ? '#safework-alerts' : '#safework-dev';
              
              return {
                shouldSend: true,
                payload: {
                  channel: channel,
                  text: `${emoji} SafeWork ${workflowName} 워크플로우 실패`,
                  attachments: [{
                    color: 'danger',
                    title: `🔥 ${workflowName} 실패`,
                    title_link: workflowRun.html_url,
                    fields: [
                      {
                        title: "브랜치",
                        value: workflowRun.head_branch,
                        short: true
                      },
                      {
                        title: "커밋",
                        value: workflowRun.head_sha.substring(0, 7),
                        short: true
                      },
                      {
                        title: "트리거",
                        value: workflowRun.event,
                        short: true
                      },
                      {
                        title: "실행시간",
                        value: `${Math.ceil((new Date(workflowRun.updated_at) - new Date(workflowRun.created_at)) / 1000)}초`,
                        short: true
                      }
                    ]
                  }],
                  blocks: workflowName === 'Deploy' ? [{
                    type: "section",
                    text: {
                      type: "mrkdwn",
                      text: `🔥 *배포 실패 - 즉시 대응 필요*\n• 서비스 상태 확인: <${process.env.SAFEWORK_URL}/health|헬스체크>\n• 로그 확인: <${workflowRun.html_url}|GitHub Actions>`
                    }
                  }] : []
                }
              };
            }
            
            // 주간 리포트 구성
            async function buildWeeklyReport(context) {
              const oneWeekAgo = new Date();
              oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
              
              // GitHub API로 지난 주 이슈/PR 통계 수집
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                since: oneWeekAgo.toISOString(),
                per_page: 100
              });
              
              const issueStats = {
                total: issues.filter(i => !i.pull_request).length,
                closed: issues.filter(i => !i.pull_request && i.state === 'closed').length,
                p0: issues.filter(i => i.labels.some(l => l.name === 'P0-CRITICAL')).length,
                p1: issues.filter(i => i.labels.some(l => l.name === 'P1-HIGH')).length
              };
              
              const prStats = {
                total: issues.filter(i => i.pull_request).length,
                merged: issues.filter(i => i.pull_request && i.state === 'closed').length
              };
              
              return {
                shouldSend: true,
                payload: {
                  channel: '#safework-weekly',
                  text: `📊 SafeWork 주간 리포트 (${new Date().toLocaleDateString('ko-KR')})`,
                  attachments: [{
                    color: '#36a64f',
                    title: '📈 지난 주 활동 요약',
                    fields: [
                      {
                        title: "🐛 이슈 현황",
                        value: `총 ${issueStats.total}개 (해결: ${issueStats.closed}개)\n• P0-긴급: ${issueStats.p0}개\n• P1-높음: ${issueStats.p1}개`,
                        short: true
                      },
                      {
                        title: "🔄 PR 현황", 
                        value: `총 ${prStats.total}개 (병합: ${prStats.merged}개)\n• 병합률: ${prStats.total > 0 ? Math.round(prStats.merged/prStats.total*100) : 0}%`,
                        short: true
                      },
                      {
                        title: "🎯 시스템 상태",
                        value: `<${process.env.SAFEWORK_URL}|SafeWork 시스템>\n<${process.env.SAFEWORK_URL}/health|헬스체크>\n<https://github.com/${context.repo.owner}/${context.repo.repo}/actions|Actions 상태>`,
                        short: false
                      }
                    ]
                  }]
                }
              };
            }
            
            // GitHub Actions fetch를 사용하여 Slack 메시지 전송
            async function sendSlackNotification(payload) {
              const webhookUrl = process.env.SLACK_WEBHOOK_URL;
              if (!webhookUrl) {
                console.log('SLACK_WEBHOOK_URL not configured');
                return;
              }
              
              try {
                const https = require('https');
                const url = require('url');
                
                const parsedUrl = url.parse(webhookUrl);
                const postData = JSON.stringify(payload);
                
                const options = {
                  hostname: parsedUrl.hostname,
                  port: parsedUrl.port || 443,
                  path: parsedUrl.pathname,
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': Buffer.byteLength(postData)
                  }
                };
                
                const req = https.request(options, (res) => {
                  let data = '';
                  res.on('data', (chunk) => {
                    data += chunk;
                  });
                  res.on('end', () => {
                    if (res.statusCode === 200) {
                      console.log('Slack notification sent successfully');
                    } else {
                      console.error('Failed to send Slack notification:', res.statusCode, data);
                    }
                  });
                });
                
                req.on('error', (error) => {
                  console.error('Error sending Slack notification:', error);
                });
                
                req.write(postData);
                req.end();
                
              } catch (error) {
                console.error('Error sending Slack notification:', error);
              }
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  teams-notify:
    runs-on: ubuntu-latest
    if: github.event.issue && contains(github.event.issue.labels.*.name, 'P0-CRITICAL')
    steps:
      - name: Microsoft Teams Critical Alert
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
          overwrite: '{
            "title": "🚨 SafeWork 긴급 이슈",
            "text": "${{ github.event.issue.title }}",
            "summary": "SafeWork P0-CRITICAL 이슈 발생",
            "sections": [{
              "activityTitle": "긴급 대응 필요",
              "activitySubtitle": "${{ github.event.issue.user.login }}님이 보고",
              "facts": [{
                "name": "우선순위",
                "value": "P0-CRITICAL"
              }, {
                "name": "시스템",
                "value": "SafeWork 안전보건 관리시스템"
              }, {
                "name": "링크",
                "value": "${{ github.event.issue.html_url }}"
              }]
            }],
            "potentialAction": [{
              "@type": "OpenUri",
              "name": "이슈 확인",
              "targets": [{
                "os": "default",
                "uri": "${{ github.event.issue.html_url }}"
              }]
            }, {
              "@type": "OpenUri", 
              "name": "SafeWork 시스템",
              "targets": [{
                "os": "default",
                "uri": "https://safework.jclee.me"
              }]
            }]
          }'