name: 🔍 PR Auto Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    paths:
      - '**/*.py'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.json'
      - '**/*.md'
      - '**/requirements.txt'
      - '**/Dockerfile'

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  automated-review:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 🔗 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 📊 Analyze Changed Files
        id: changes
        run: |
          echo "=== PR 변경사항 분석 ===" > pr_analysis.txt
          echo "PR 번호: ${{ github.event.pull_request.number }}" >> pr_analysis.txt
          echo "제목: ${{ github.event.pull_request.title }}" >> pr_analysis.txt
          echo "작성자: ${{ github.event.pull_request.user.login }}" >> pr_analysis.txt
          echo "브랜치: ${{ github.event.pull_request.head.ref }} → ${{ github.event.pull_request.base.ref }}" >> pr_analysis.txt
          echo "" >> pr_analysis.txt
          
          # Get changed files
          echo "=== 변경된 파일 목록 ===" >> pr_analysis.txt
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} >> pr_analysis.txt
          echo "" >> pr_analysis.txt
          
          # Get detailed changes
          echo "=== 상세 변경 내용 ===" >> pr_analysis.txt
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} >> pr_analysis.txt
          
          # Count changes by file type
          PYTHON_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.py$' | wc -l)
          DOCKER_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '(Dockerfile|\.yml$|\.yaml$)' | wc -l)
          CONFIG_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '(requirements\.txt|\.json$|\.md$)' | wc -l)
          
          echo "python_files=$PYTHON_FILES" >> $GITHUB_OUTPUT
          echo "docker_files=$DOCKER_FILES" >> $GITHUB_OUTPUT
          echo "config_files=$CONFIG_FILES" >> $GITHUB_OUTPUT
          
      - name: 🧠 Expert Code Review
        run: |
          curl -fsSL https://claude.ai/install.sh | bash
          echo "$CLAUDE_CODE_OAUTH_TOKEN" | claude auth
          
          claude code --dir . << 'EOF'
          🔍 **SafeWork Flask 애플리케이션 PR 전문 코드 리뷰 요청**
          
          **프로젝트 컨텍스트:**
          - SafeWork Flask 3.0+ 애플리케이션 (산업 안전 관리 시스템)
          - 독립 컨테이너 아키텍처: safework2-postgres (4546), safework2-redis (4547), safework2-app (4545)
          - 핵심 기능: 건강 설문조사 (001/002), SafeWork 관리, 문서 관리, RESTful API v2
          - 기술 스택: Flask 3.0+, SQLAlchemy 2.0, PostgreSQL, Redis, Bootstrap 4.6
          
          **PR 정보:**
          - PR 번호: ${{ github.event.pull_request.number }}
          - 제목: "${{ github.event.pull_request.title }}"
          - 작성자: ${{ github.event.pull_request.user.login }}
          - 변경 파일: Python ${{ steps.changes.outputs.python_files }}개, Docker/YAML ${{ steps.changes.outputs.docker_files }}개, 설정 ${{ steps.changes.outputs.config_files }}개
          
          **코드 리뷰 지침:**
          
          📋 **1. `pr_analysis.txt` 파일을 읽고 변경사항 분석**
          
          🔒 **2. 보안 검토 (최우선)**:
          - SQL 인젝션, XSS 취약점 검사
          - 하드코딩된 시크릿이나 비밀번호 확인
          - 입력 검증 및 sanitization 점검
          - 인증/권한 부여 로직 검토
          - CSRF 보호 (현재 비활성화 상태) 고려
          
          ⚡ **3. 성능 최적화**:
          - 데이터베이스 쿼리 효율성 (N+1 문제 등)
          - Redis 캐싱 활용도
          - 메모리 사용량 및 리소스 누수
          - 무거운 연산의 비동기 처리 가능성
          
          🏗️ **4. Flask 아키텍처 품질**:
          - 블루프린트 구조 및 모듈화
          - 모델 정의 및 관계 설정 (models.py, models_safework.py)
          - 라우트 구성 및 RESTful 설계
          - 템플릿 상속 및 재사용성
          - 에러 핸들링 및 로깅
          
          🧪 **5. 테스트 및 코드 표준**:
          - 단위 테스트 커버리지
          - 통합 테스트 필요성
          - PEP 8 준수 (Black, Flake8)
          - 타입 힌팅 사용
          - 문서화 품질
          
          🐳 **6. 컨테이너 및 배포**:
          - Dockerfile 최적화
          - 의존성 관리 (requirements.txt)
          - 환경 변수 설정
          - GitHub Actions 워크플로우
          - 독립 컨테이너 호환성
          
          📊 **7. SafeWork 특화 검토**:
          - 설문 조사 로직 (001/002 양식)
          - SafeWork 관리 패널 기능
          - 문서 버전 관리 시스템
          - API v2 엔드포인트 설계
          - 한국어 지원 및 KST 타임존
          
          **리뷰 출력 형식:**
          
          ## 🔍 SafeWork PR 코드 리뷰 보고서
          
          ### 📊 변경사항 요약
          - [변경된 파일 수와 유형]
          - [주요 기능 변경사항]
          - [영향 범위 평가]
          
          ### ✅ 긍정적 요소
          - [잘 작성된 코드나 개선사항]
          - [모범 사례 적용]
          - [성능 향상 요소]
          
          ### ⚠️ 개선 필요 사항
          - [보안 이슈나 취약점]
          - [성능 개선 가능 부분]
          - [코드 품질 문제]
          
          ### 🚨 중요 이슈 (있는 경우)
          - [즉시 수정이 필요한 심각한 문제]
          - [보안 위험이나 서비스 장애 가능성]
          
          ### 💡 권장사항
          - [구체적인 개선 방법]
          - [대안 구현 방식]
          - [추가 테스트 필요성]
          
          ### 🎯 최종 판정
          - **승인 권장** / **조건부 승인** / **수정 필요**
          - [판정 이유와 근거]
          
          **리뷰 원칙:**
          - 건설적이고 구체적인 피드백
          - 코드 예제나 수정 방법 제시
          - SafeWork 프로젝트 컨텍스트 고려
          - 한국어로 친근하면서 전문적인 톤
          - 학습과 개선에 도움이 되는 설명
          
          지금 PR을 상세히 분석하고 전문적인 리뷰를 작성해주세요.
          EOF
          
      - name: 📋 Review Summary
        if: always()
        run: |
          echo "=== PR 자동 리뷰 완료 ==="
          echo "PR 번호: ${{ github.event.pull_request.number }}"
          echo "제목: ${{ github.event.pull_request.title }}"
          echo "변경 파일: Python ${{ steps.changes.outputs.python_files }}개, Docker/YAML ${{ steps.changes.outputs.docker_files }}개, 설정 ${{ steps.changes.outputs.config_files }}개"
          echo "리뷰 상태: ${{ job.status }}"
          echo "완료 시간: $(date)"
          
          # If review found critical issues, create a comment
          if [ "${{ job.status }}" != "success" ]; then
            gh pr comment ${{ github.event.pull_request.number }} \
              --body "🚨 **자동 코드 리뷰 실패**

              PR 자동 리뷰 중 문제가 발생했습니다.
              수동 리뷰가 필요합니다.
              
              **리뷰 시간**: $(date)
              **상태**: ${{ job.status }}
              
              관리자에게 문의하거나 다시 시도해주세요."
          fi