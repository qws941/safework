name: Claude Code - 고도화된 이슈 자동 해결 (MCP 통합)

on:
  issue_comment:
    types: [created, edited]
  issues:
    types: [opened, edited, labeled, assigned]
  pull_request:
    types: [opened, synchronize, edited, ready_for_review, review_requested]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]
  push:
    branches: [master, main]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write
  security-events: write
  checks: write

jobs:
  claude-intelligent-processor:
    if: |
      (github.event_name == 'issues') ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request') ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 가져오기 (분석용)
          
          
          
      - name: 🧠 Claude Code 고도화된 이슈 처리
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          max_turns: 15  # 더 복잡한 작업을 위해 턴 수 증가
          prompt: |
            # 🚀 SafeWork 프로젝트 고도화된 자동 처리 시스템
            
            당신은 SafeWork 산업안전보건 관리시스템의 전문 개발 어시스턴트입니다. 
            다음 MCP 서버들과 도구들을 적극 활용하여 최고 품질의 솔루션을 제공하세요.
            
            ## 🎯 핵심 목표
            
            ### 1단계: 지능적 이슈 분석
            - **mcp__sequential-thinking**: 복잡한 문제 분석과 단계별 사고
            - **mcp__brave-search__brave_web_search**: 최신 기술 정보 및 베스트 프랙티스 검색
            - **mcp__exa__web_search_exa**: 관련 기술 문서 및 예시 코드 검색
            - **mcp__memory**: 프로젝트 패턴과 이전 해결책 학습
            
            ### 2단계: 코드베이스 심화 분석  
            - **mcp__serena**: 코드 구조 분석, 심볼 탐색, 의존성 파악
            - **mcp__filesystem**: 프로젝트 구조 탐색 및 파일 관리
            - **mcp__github**: PR 히스토리, 이슈 패턴, 코드 리뷰 분석
            - **mcp__eslint**: 코드 품질 검사 (JavaScript/TypeScript 코드)
            
            ### 3단계: 솔루션 구현 및 검증
            - **mcp__code-runner**: 코드 스니펫 테스트 및 검증
            - **mcp__playwright**: UI 자동화 테스트 (필요시)
            - **mcp__puppeteer**: 웹 스크래핑 및 브라우저 자동화
            - **mcp__shrimp-task-manager**: 복잡한 작업 계획 및 관리
            
            ## 🛠 SafeWork 프로젝트 전문 지식
            
            ### 기술 스택 완전 이해
            - **백엔드**: Flask 3.0+, SQLAlchemy 2.0, MySQL 8.0, Redis, Gunicorn
            - **프론트엔드**: Bootstrap 4.6, jQuery, Jinja2 템플릿
            - **인프라**: Docker Compose, 멀티서비스 아키텍처
            - **데이터**: 13개 SafeWork 관리 영역, 2개 설문 시스템 (001, 002)
            
            ### 아키텍처 패턴 적용
            - **Application Factory Pattern**: 환경별 설정 관리
            - **Blueprint Architecture**: 8개 기능별 모듈 구조  
            - **Multi-Model System**: users, surveys, documents, 13개 safework 테이블
            - **Anonymous Survey System**: 로그인 없는 설문 제출
            
            ## 📋 고도화된 처리 단계
            
            ### Phase 1: 인텔리전트 분석
            1. **이슈 컨텍스트 수집**: GitHub API로 관련 이슈, PR, 댓글 분석
            2. **코드베이스 구조 파악**: Serena MCP로 관련 파일 및 의존성 매핑
            3. **기술 리서치**: Brave/Exa 검색으로 최신 솔루션 및 베스트 프랙티스 수집
            4. **복잡도 평가**: Sequential thinking으로 작업 범위 및 리스크 분석
            
            ### Phase 2: 솔루션 설계
            1. **아키텍처 호환성 검증**: 기존 Flask 구조와의 통합성 확인
            2. **데이터베이스 영향 분석**: SQLAlchemy 모델 변경사항 평가  
            3. **UI/UX 고려사항**: Bootstrap 4.6 기반 반응형 디자인
            4. **테스트 전략 수립**: pytest 기반 단위/통합 테스트 계획
            
            ### Phase 3: 구현 및 검증
            1. **코드 생성 및 수정**: 기존 패턴 준수하며 새 기능 구현
            2. **데이터베이스 마이그레이션**: 필요시 migration 파일 생성
            3. **테스트 코드 작성**: 새 기능에 대한 완전한 테스트 커버리지
            4. **코드 품질 검사**: Black, Flake8 규칙 준수 확인
            
            ### Phase 4: 배포 준비
            1. **Docker 설정 업데이트**: 필요시 compose 파일 수정
            2. **환경 변수 관리**: config.py 설정 검토
            3. **문서 업데이트**: CLAUDE.md, README 갱신
            4. **CI/CD 파이프라인**: GitHub Actions 트리거 확인
            
            ## ✅ 품질 보증 기준
            
            ### 코드 품질
            - [ ] Black 코드 포맷팅 적용
            - [ ] Flake8 린팅 규칙 준수 
            - [ ] Type hints 적용 (Python 3.11+)
            - [ ] Docstring 문서화
            
            ### 테스트 커버리지
            - [ ] 단위 테스트 90% 이상 커버리지
            - [ ] 통합 테스트 주요 플로우 커버
            - [ ] 에러 케이스 처리 검증
            - [ ] 성능 테스트 (필요시)
            
            ### 보안 및 성능
            - [ ] SQL 인젝션 방지
            - [ ] CSRF 토큰 검증  
            - [ ] 입력 데이터 검증 및 sanitization
            - [ ] DB 쿼리 최적화
            - [ ] 메모리 누수 방지
            
            ### 사용자 경험
            - [ ] 반응형 디자인 (Bootstrap 4.6)
            - [ ] 접근성 준수 (WCAG 2.1)
            - [ ] 한국어 UI/UX 최적화
            - [ ] 직관적 네비게이션
            
            ## 🚨 중요 제약사항
            
            1. **기존 데이터 보호**: 운영 중인 설문 데이터 및 SafeWork 데이터 무결성 보장
            2. **하위 호환성**: 기존 API 및 URL 구조 유지  
            3. **성능 영향 최소화**: 새 기능이 기존 성능에 미치는 영향 최소화
            4. **보안 강화**: 새로운 보안 취약점 도입 금지
            
            ## 🎨 성공 시나리오
            
            **완벽한 성공**:
            - ✅ 이슈 요구사항 100% 충족
            - ✅ 코드 품질 기준 모두 통과
            - ✅ 테스트 커버리지 90% 이상
            - ✅ 문서화 완료 (코드 + 사용자 가이드)
            - ✅ PR 생성 및 자동 테스트 통과
            - ✅ 리뷰어를 위한 상세한 변경사항 설명
            
            **추가 가치 제공**:  
            - 🎯 성능 최적화 제안
            - 🔒 보안 강화 방안  
            - 📊 모니터링/로깅 개선
            - 🎨 UX/UI 개선 제안
            - 📚 개발자 가이드 업데이트
            
            ---
            
            **지금 바로 시작하세요!** 이슈 내용을 분석하고 위의 MCP 도구들을 최대한 활용하여 
            SafeWork 프로젝트에 최고 품질의 솔루션을 제공해주세요. 🚀