name: 🤖 Claude Code Assistant

concurrency:
  group: claude-assistant-${{ github.repository }}
  cancel-in-progress: true

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned, labeled]
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]
  workflow_run:
    workflows: ["🚀 Deploy Pipeline"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write
  actions: write
  security-events: write
  statuses: write
  packages: write
  id-token: write
  deployments: write
  repository-projects: write
  metadata: read

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'claude-actionable')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'pull_request' && (contains(github.event.pull_request.title, '[claude]') || contains(github.event.pull_request.body, '@claude'))) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure')
      
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 🔍 Context Detection
        id: context
        run: |
          echo "event_type=${{ github.event_name }}" >> $GITHUB_OUTPUT
          echo "repository=SafeWork Flask Application" >> $GITHUB_OUTPUT
          echo "architecture=Independent containers (PostgreSQL, Redis, Flask)" >> $GITHUB_OUTPUT
          echo "services=safework2-postgres:4546, safework2-redis:4547, safework2-app:4545" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "mode=failure_analysis" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issues" ]; then
            echo "mode=issue_resolution" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "mode=code_review" >> $GITHUB_OUTPUT
          else
            echo "mode=general_assistance" >> $GITHUB_OUTPUT
          fi
          
      - name: 🤖 Claude Code Action
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_args: |
            --tool Task
            --tool Read
            --tool Write
            --tool Edit
            --tool Bash
            --tool Grep
            --tool Glob
            --tool WebFetch
            --system "You are Claude Code, an AI assistant integrated with GitHub Actions for the SafeWork Flask application. The project uses independent Docker containers with PostgreSQL database migration from MySQL. Container architecture: safework2-postgres (port 4546), safework2-redis (port 4547), safework2-app (port 4545). Database: safework_db with safework user. Provide solutions in Korean when communicating with users."
          prompt: |
            🎯 **SafeWork 프로젝트 Claude 어시스턴트**
            
            **프로젝트 컨텍스트:**
            - SafeWork Flask 애플리케이션 (산업 안전 관리 시스템)
            - 독립적 컨테이너 아키텍처: PostgreSQL, Redis, Flask
            - MySQL에서 PostgreSQL로 마이그레이션 완료
            - 컨테이너 구성: safework2-postgres (4546), safework2-redis (4547), safework2-app (4545)
            - 데이터베이스: safework_db, 사용자: safework
            - GitHub Actions를 통한 Portainer API 배포
            
            **현재 상황:**
            - 이벤트 타입: ${{ github.event_name }}
            - 모드: ${{ steps.context.outputs.mode }}
            - 브랜치: ${{ github.ref_name }}
            - 커밋: ${{ github.sha }}
            
            **작업 지침:**
            
            🔥 **실패 분석 모드** (workflow_run failure):
            1. 최근 워크플로우 실패 로그 분석
            2. Docker 빌드, PostgreSQL 연결, 환경 변수 검증
            3. 즉시 수정 및 재배포 실행
            4. 한국어로 문제점과 해결 과정 보고
            
            🐛 **이슈 해결 모드** (issues with claude-actionable):
            1. 이슈 내용을 정확히 분석
            2. 코드 수정 또는 설정 변경으로 해결
            3. 테스트 및 검증 실행
            4. 이슈에 해결 결과 댓글 작성
            
            📝 **코드 리뷰 모드** (pull_request):
            1. PR 변경사항 상세 검토
            2. SafeWork 프로젝트 표준 준수 확인
            3. 보안, 성능, 호환성 검증
            4. 개선 제안 및 승인/거부 의견 제시
            
            💬 **일반 지원 모드** (comments with @claude):
            1. 요청사항 정확히 파악
            2. SafeWork 프로젝트 맥락에서 최적 솔루션 제공
            3. 필요시 코드 수정 및 테스트 실행
            4. 명확하고 실용적인 답변 제공
            
            **핵심 원칙:**
            - 한국어로 소통 (기술적 내용 포함)
            - 즉시 실행 가능한 솔루션 제공
            - SafeWork 프로젝트 아키텍처 준수
            - PostgreSQL 설정 및 독립 컨테이너 구조 고려
            - 보안과 안정성 최우선
            
            작업을 시작하세요. 사용자의 요구사항을 정확히 파악하고 최적의 솔루션을 제공해주세요.