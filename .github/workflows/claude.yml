name: Claude Code

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  claude:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
      checks: read
      statuses: read
      deployments: read
      packages: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Claude 작업 시작 알림
        if: github.event.issue.number
        uses: actions/github-script@v7
        with:
          script: |
            const currentTime = new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' });
            const runUrl = process.env.GITHUB_SERVER_URL + '/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: '🤖 **Claude 작업 시작!**\\n\\n📋 **진행 상황 추적**\\n- ⏳ 이슈 분석 중...\\n- ⏸️ 코드 수정 대기 중\\n- ⏸️ 테스트 실행 대기 중\\n- ⏸️ PR 생성 대기 중\\n- ⏸️ 배포 대기 중\\n\\n**🔄 실시간 업데이트가 이 댓글에서 진행됩니다.**\\n\\n---\\n⏰ 시작 시간: ' + currentTime + ' | 🚀 GitHub Actions 실행: [#' + context.runId + '](' + runUrl + ')'
            });

      - name: Claude Code Assistant  
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          use_sticky_comment: true
          claude_args: --max-turns 30 --use-mcp
          prompt: |
            당신은 SafeWork 프로젝트의 **시니어 풀스택 개발자**입니다.

            ## 🏗️ 프로젝트 정보
            **SafeWork**: 산업 안전 보건 관리 시스템 (Flask 3.0+)
            - Backend: Python Flask, SQLAlchemy 2.0, Redis 5.0  
            - Database: MySQL 8.0 (UTF8MB4, 트랜잭션 관리)
            - Frontend: Bootstrap 4.6, jQuery, Font Awesome
            - 핵심 기능: 근골격계 설문조사, 건강검진, 문서관리, 관리자 패널

            ## 📋 개발 규칙
            1. **한국어 소통**: 모든 댓글과 커밋 메시지는 한국어
            2. **Flask 패턴**: 블루프린트 구조, 팩토리 패턴 유지
            3. **DB 무결성**: 트랜잭션 사용, MySQL 8.0 호환성
            4. **보안**: CSRF 토큰 필수, 입력 데이터 검증
            5. **성능**: Redis 캐싱, DB 인덱싱, 쿼리 최적화

            ## 🎯 작업 프로세스
            1. **분석**: 이슈 내용 파악, 관련 파일 식별
            2. **구현**: 기존 패턴 유지, 에러 처리 추가
            3. **검증**: 테스트 실행, 커밋
            4. **완료**: 엔드포인트 URL 포함한 완료 댓글

            ## 📁 주요 파일
            ```
            app/
            ├── app.py              # 메인 애플리케이션
            ├── models.py           # 핵심 모델
            ├── models_safework.py  # SafeWork 모델
            ├── routes/             # 블루프린트
            │   ├── survey.py       # 설문조사
            │   ├── admin.py        # 관리자
            │   └── auth.py         # 인증
            └── templates/          # Jinja2 템플릿
            ```

            ## 🔧 코딩 컨벤션
            ```python
            @login_required
            def create_survey():
                try:
                    # 비즈니스 로직
                    db.session.commit()
                    flash('성공적으로 저장되었습니다.', 'success')
                except Exception as e:
                    db.session.rollback()
                    flash(f'오류: {str(e)}', 'error')
                    app.logger.error(f"Error: {e}")
            ```

            ## 📝 완료 댓글 예시
            ```
            🎉 이슈가 해결되었습니다!
            
            **✅ 해결된 기능:**
            - 설문조사 001: http://localhost:4545/survey/001
            - 관리자 대시보드: http://localhost:4545/admin
            - 운영 환경: https://safewokr.jclee.me/survey/001
            
            **🧪 테스트:**
            1. 위 URL 접속하여 기능 확인
            2. 브라우저 콘솔에서 에러 없음 확인
            3. 데이터베이스 정상 저장 확인
            ```

            **실제 파일을 수정하고 커밋하여 이슈를 해결하세요!**

      - name: 🔄 Claude 작업 완료 알림
        if: success() && github.event.issue.number
        uses: actions/github-script@v7
        with:
          script: |
            const currentTime = new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' });
            const runUrl = process.env.GITHUB_SERVER_URL + '/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId;
            
            // 이슈 제목 기반 엔드포인트 URL 추론
            const issueTitle = context.payload.issue?.title || '';
            let endpointUrls = [];
            
            if (issueTitle.includes('설문') || issueTitle.includes('survey')) {
              endpointUrls.push('- 설문조사 001: http://localhost:4545/survey/001');
              endpointUrls.push('- 설문조사 002: http://localhost:4545/survey/002');
            }
            if (issueTitle.includes('관리') || issueTitle.includes('admin')) {
              endpointUrls.push('- 관리자 대시보드: http://localhost:4545/admin');
              endpointUrls.push('- SafeWork 관리: http://localhost:4545/admin/safework');
            }
            if (issueTitle.includes('API') || issueTitle.includes('api')) {
              endpointUrls.push('- SafeWork API: http://localhost:4545/api/safework/v2/workers');
            }
            if (issueTitle.includes('문서') || issueTitle.includes('document')) {
              endpointUrls.push('- 문서 관리: http://localhost:4545/admin/documents');
            }
            if (issueTitle.includes('홈') || issueTitle.includes('home') || issueTitle.includes('메인')) {
              endpointUrls.push('- 홈페이지: http://localhost:4545/');
            }
            
            // 기본 엔드포인트
            if (endpointUrls.length === 0) {
              endpointUrls.push('- 홈페이지: http://localhost:4545/');
              endpointUrls.push('- 관리자 패널: http://localhost:4545/admin');
            }
            
            const endpointSection = endpointUrls.length > 0 ? 
              `\\n\\n**🔗 해결된 기능 URL:**\\n${endpointUrls.join('\\n')}\\n\\n**🧪 테스트 방법:**\\n1. 위 URL에 접속하여 기능 확인\\n2. 브라우저 개발자 도구에서 에러 없음 확인` : '';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: '🎉 **Claude 작업 완료!**\\n\\n📋 **진행 상황**\\n- ✅ 이슈 분석 완료\\n- ✅ 코드 수정 완료\\n- ✅ 테스트 완료\\n- ✅ 변경사항 커밋 완료\\n\\n**🚀 모든 작업이 완료되었습니다!**' + endpointSection + '\\n\\n**📊 작업 정보:**\\n- 완료 시간: ' + currentTime + '\\n- GitHub Actions: [로그 확인](' + runUrl + ')\\n\\n---\\n🤖 *Claude Automation System*'
            });
            
            // 이슈 자동 닫기
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              state: 'closed'
            });