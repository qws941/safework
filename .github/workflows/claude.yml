name: Claude Code

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues') ||
      (github.event_name == 'pull_request') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Claude Code Assistant
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            당신은 SafeWork 프로젝트의 전문 개발자입니다.
            
            **프로젝트 컨텍스트:**
            - Flask 3.0+ 기반 산업 안전 보건 관리 시스템
            - MySQL 8.0, Redis, Bootstrap 4.6 사용
            - 설문조사, 건강검진, 문서관리 기능 제공
            
            **작업 지침:**
            1. 한국어로 사용자와 소통하세요
            2. 기존 코드 패턴과 스타일을 유지하세요
            3. Flask 블루프린트 구조를 따르세요
            4. 데이터베이스 변경시 마이그레이션을 생성하세요
            5. 보안과 성능을 고려하세요
            6. 테스트 작성을 권장합니다
            
            **이슈 해결 시:**
            - 문제를 정확히 파악하고 분석하세요
            - 코드를 수정하기 전에 현재 상태를 확인하세요
            - 변경사항을 단계별로 설명하세요
            - 작업 완료 후 적절한 커밋 메시지로 커밋하세요
            - 이슈 해결 완료 후 반드시 이슈를 닫아주세요
            
            CLAUDE.md 파일의 지침을 참고하여 작업해주세요.
          claude_args: "--max-turns 20"

      - name: Auto PR and Merge
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Claude가 생성한 브랜치 찾기
            const branches = await github.rest.repos.listBranches({
              owner,
              repo,
              per_page: 100
            });
            
            const claudeBranches = branches.data.filter(branch => 
              branch.name.startsWith('claude/') && 
              branch.name.includes(new Date().toISOString().slice(0, 10).replace(/-/g, ''))
            );
            
            if (claudeBranches.length > 0) {
              const branchName = claudeBranches[0].name;
              console.log(`🔍 Claude 브랜치 발견: ${branchName}`);
              
              try {
                // PR 생성
                const prResponse = await github.rest.pulls.create({
                  owner,
                  repo,
                  title: `🤖 Claude: ${context.payload.issue?.title || '자동 수정'}`,
                  head: branchName,
                  base: 'master',
                  body: `🤖 **Claude가 자동으로 생성한 PR입니다**

**이슈:** #${context.payload.issue?.number || 'N/A'}
**브랜치:** ${branchName}
**작업 시간:** ${new Date().toLocaleString('ko-KR')}

Claude가 이슈를 분석하고 코드를 수정했습니다.
자동으로 병합됩니다.

---
_Generated by Claude Code Assistant 🤖_`
                });
                
                console.log(`✅ PR 생성 완료: #${prResponse.data.number}`);
                
                // 잠시 대기 (PR 상태 안정화)
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // 자동 병합
                await github.rest.pulls.merge({
                  owner,
                  repo,
                  pull_number: prResponse.data.number,
                  commit_title: `🤖 Claude: ${context.payload.issue?.title || '자동 수정'}`,
                  commit_message: `이슈 #${context.payload.issue?.number || 'N/A'} 해결

Claude가 자동으로 생성한 변경사항입니다.`,
                  merge_method: 'squash'
                });
                
                console.log(`✅ 자동 병합 완료`);
                
                // 브랜치 삭제
                await github.rest.git.deleteRef({
                  owner,
                  repo,
                  ref: `heads/${branchName}`
                });
                
                console.log(`✅ 브랜치 삭제 완료: ${branchName}`);
                
              } catch (error) {
                console.error(`❌ PR 생성/병합 실패:`, error);
              }
            } else {
              console.log(`⚠️ Claude 브랜치를 찾을 수 없습니다`);
            }

