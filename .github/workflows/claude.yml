name: 🤖 Claude Code Assistant with MCP Integration

concurrency:
  group: claude-assistant-${{ github.repository }}
  cancel-in-progress: true

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      task_type:
        description: 'Task type for MCP integration'
        required: true
        default: 'general'
        type: choice
        options:
        - general
        - code-analysis
        - task-planning
        - thinking
  workflow_run:
    workflows: ["🚀 SafeWork Deploy Pipeline"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write
  actions: write
  security-events: write
  statuses: write
  packages: write
  id-token: write
  deployments: write

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'claude-actionable')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'pull_request' && (contains(github.event.pull_request.title, '[claude]') || contains(github.event.pull_request.body, '@claude'))) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure')
      
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 🔍 Context Detection
        id: context
        run: |
          echo "event_type=${{ github.event_name }}" >> $GITHUB_OUTPUT
          echo "repository=SafeWork Flask Application" >> $GITHUB_OUTPUT
          echo "architecture=Independent containers (PostgreSQL, Redis, Flask)" >> $GITHUB_OUTPUT
          echo "services=safework-postgres:4546, safework-redis:4547, safework-app:4545" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "mode=failure_analysis" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issues" ]; then
            echo "mode=issue_resolution" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "mode=code_review" >> $GITHUB_OUTPUT
          else
            echo "mode=general_assistance" >> $GITHUB_OUTPUT
          fi
          
      - name: 🤖 Claude Code Action
        uses: anthropics/claude-code-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          anthropic_api_key: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          trigger_phrase: "@claude"
          prompt: |
            You are Claude Code, an AI assistant for the SafeWork Flask application - an industrial health and safety management system.
            
            **Project Context:**
            - Flask 3.0+ with SQLAlchemy 2.0, PostgreSQL, Redis
            - Independent container architecture: safework-postgres (4546), safework-redis (4547), safework-app (4545)
            - Korean industrial safety management system for construction/industrial environments
            - Core features: Health surveys (001/002), SafeWork admin panels, document management, RESTful API v2
            
            **Technical Standards:**
            - Database: safework_db with safework user (migrated from MySQL)
            - Korean timezone (KST) support with kst_now() function
            - Anonymous access with user_id=1 fallback
            - Bootstrap 4.6 + jQuery frontend
            - Docker independent containers with Watchtower auto-deployment
            
            **Communication:**
            - Respond in Korean for user-facing communication
            - Provide technical solutions with industrial safety context
            - Consider workplace health survey workflows and compliance requirements