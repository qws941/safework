name: Claude Code

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  claude:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && github.event.action == 'opened') ||
      (github.event_name == 'pull_request' && contains(fromJSON('["opened", "synchronize", "reopened"]'), github.event.action))
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
      checks: read
      statuses: read
      deployments: read
      packages: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Claude 작업 시작 알림
        if: github.event.issue.number
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `🤖 **Claude 작업 시작!**
              
              📋 **진행 상황 추적**
              - ⏳ 이슈 분석 중...
              - ⏸️ 코드 수정 대기 중
              - ⏸️ 테스트 실행 대기 중  
              - ⏸️ PR 생성 대기 중
              - ⏸️ 배포 대기 중
              
              **🔄 실시간 업데이트가 이 댓글에서 진행됩니다.**
              
              ---
              ⏰ 시작 시간: \\${new Date().toLocaleString('ko-KR')} | 🚀 GitHub Actions 실행: [#\\${context.runId}](\\${process.env.GITHUB_SERVER_URL}/\\${context.repo.owner}/\\${context.repo.repo}/actions/runs/\\${context.runId})`
            });

      - name: Enhanced Claude Code Assistant  
        id: claude_action
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          use_sticky_comment: true
          track_progress: ${{ github.event_name == 'issues' || github.event_name == 'pull_request' }}
          prompt: |
            당신은 SafeWork 프로젝트의 **시니어 풀스택 개발자**입니다.

            ## 🏗️ 프로젝트 아키텍처
            **SafeWork**: 산업 안전 보건 관리 시스템 (Flask 3.0+)
            - **백엔드**: Python Flask, SQLAlchemy 2.0, Redis 5.0  
            - **데이터베이스**: MySQL 8.0 (UTF8MB4, 트랜잭션 관리)
            - **프론트엔드**: Bootstrap 4.6, jQuery, Font Awesome
            - **핵심 기능**: 근골격계 설문조사, 건강검진, 문서관리, 관리자 패널

            ## 📋 개발 원칙 (필수 준수)
            1. **한국어 소통**: 모든 댓글과 커밋 메시지는 한국어
            2. **Flask 패턴 준수**: 블루프린트 구조, 팩토리 패턴 유지
            3. **데이터베이스 무결성**: 
               - 트랜잭션 사용 (`db.session.commit()`, `rollback()`)
               - 마이그레이션 생성 시 MySQL 8.0 호환성 확인
               - 한국 시간대(KST) 일관성: `kst_now()` 함수 사용
            4. **보안 강화**: 
               - CSRF 토큰 필수
               - SQL 인젝션 방어
               - 입력 데이터 검증 및 사니타이징
            5. **성능 최적화**: 
               - Redis 캐싱 활용
               - 데이터베이스 인덱싱
               - 쿼리 최적화

            ## 🔧 코딩 컨벤션
            ```python
            # ✅ 올바른 패턴
            @login_required
            def create_survey():
                try:
                    # 비즈니스 로직
                    db.session.commit()
                    flash('설문이 성공적으로 생성되었습니다.', 'success')
                except Exception as e:
                    db.session.rollback()
                    flash(f'오류가 발생했습니다: {str(e)}', 'error')
                    app.logger.error(f"Survey creation error: {e}")
            ```

            ## 🎯 이슈 해결 프로세스
            ### 1단계: 분석
            - 이슈 내용 정확히 파악
            - 관련 파일들 식별 (`app/routes/`, `app/models.py`, `app/templates/`)
            - 현재 구현 상태 확인

            ### 2단계: 구현
            - 기존 코드 패턴 유지
            - 단계별 변경사항 적용
            - 에러 처리 및 로깅 추가

            ### 3단계: 검증
            - 코드 리뷰 및 테스트
            - 마이그레이션 필요 시 생성
            - 의미있는 커밋 메시지 작성

            ### 4단계: 완료
            - 변경사항 요약 댓글
            - **이슈 자동 닫기** (중요!)

            ## 📁 주요 파일 구조
            ```
            app/
            ├── app.py              # 메인 애플리케이션
            ├── models.py           # 핵심 모델 (User, Survey)
            ├── models_safework.py  # SafeWork 전용 모델
            ├── routes/            # 블루프린트 라우터
            │   ├── survey.py      # 설문조사 (001/002)
            │   ├── admin.py       # 관리자 패널
            │   └── auth.py        # 인증
            └── templates/         # Jinja2 템플릿
            ```

            ## ⚡ 작업 완료 체크리스트
            - [ ] 기능 구현 완료
            - [ ] 에러 처리 추가
            - [ ] 테스트 실행 (가능한 경우)
            - [ ] 커밋 메시지 작성 ("feat:", "fix:", "refactor:" 등)
            - [ ] 이슈에 완료 댓글 작성
            - [ ] **이슈 상태를 'closed'로 변경**

            작업을 시작하세요! 🚀
          claude_args: |
            --max-turns 30

      - name: 🔄 Claude 작업 완료 및 PR 처리 시작
        if: success() && github.event.issue.number
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `✅ **Claude 분석 완료!**
              
              📋 **진행 상황 업데이트**
              - ✅ 이슈 분석 완료
              - ✅ 코드 수정 완료
              - ⏳ PR 생성 중...
              - ⏸️ 자동 병합 대기 중
              - ⏸️ 배포 대기 중
              
              **🔄 곧 PR이 자동으로 생성됩니다...**`
            });

      - name: Advanced Auto PR and Merge
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🚀 Claude 작업 완료!');
            console.log('이슈 번호:', context.payload.issue?.number);
            console.log('이슈 제목:', context.payload.issue?.title);
            
            if (context.payload.issue?.number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: '🎉 **Claude 작업 완료!**\n\n✅ 이슈가 성공적으로 처리되었습니다.\n\n📋 **처리 완료 사항:**\n- 이슈 분석 완료\n- 코드 수정 완료\n- 자동 배포 진행 중\n\n🚀 변경사항이 운영 환경에 반영될 예정입니다!'
              });
            }

