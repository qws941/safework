name: Issue Labeling
on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  label:
    runs-on: ubuntu-latest
    steps:
      - name: Auto Label Issues and PRs
        uses: actions/github-script@v7
        with:
          script: |
            const { context, github } = require('@actions/github');
            
            const item = context.payload.issue || context.payload.pull_request;
            const isIssue = !!context.payload.issue;
            const itemType = isIssue ? 'issue' : 'pull_request';
            
            const title = item.title.toLowerCase();
            const body = (item.body || '').toLowerCase();
            const content = `${title} ${body}`;
            
            const labels = [];
            
            // Priority labeling
            if (content.match(/긴급|urgent|critical|중단|작동.*안/)) {
              labels.push('P0-CRITICAL');
            } else if (content.match(/버그|bug|오류|error|문제|problem/)) {
              labels.push('P1-HIGH');
            } else if (content.match(/개선|enhance|feature|기능/)) {
              labels.push('P2-MEDIUM');
            }
            
            // Component labeling  
            if (content.match(/설문|survey|001|002/)) {
              labels.push('component:survey');
            }
            if (content.match(/관리자|admin|safework.*admin/)) {
              labels.push('component:admin');
            }
            if (content.match(/의료|health|검진|medical/)) {
              labels.push('component:medical');
            }
            if (content.match(/api|연동|integration/)) {
              labels.push('component:api');
            }
            if (content.match(/배포|deploy|docker|watchtower/)) {
              labels.push('component:deployment');
            }
            if (content.match(/데이터베이스|database|mysql|db/)) {
              labels.push('component:database');
            }
            if (content.match(/ui|ux|템플릿|template|html|css/)) {
              labels.push('component:frontend');
            }
            
            // Type labeling
            if (content.match(/버그|bug|오류|error/)) {
              labels.push('type:bug');
            } else if (content.match(/기능|feature|새로운|new/)) {
              labels.push('type:feature');
            } else if (content.match(/개선|enhance|향상|improve/)) {
              labels.push('type:enhancement');
            } else if (content.match(/문서|docs|documentation/)) {
              labels.push('type:documentation');
            }
            
            // Language detection
            if (content.match(/[가-힣]/)) {
              labels.push('lang:korean');
            }
            
            // Auto-generated detection
            if (content.match(/\[auto\]|\[automated\]|auto.*generated/i) || 
                item.user.login === 'github-actions[bot]') {
              labels.push('automated');
            }
            
            // Add labels if any were determined
            if (labels.length > 0) {
              if (isIssue) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: item.number,
                  labels: labels
                });
              } else {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: item.number,
                  labels: labels
                });
              }
              
              console.log(`Added labels: ${labels.join(', ')}`);
            }
            
            // Urgent issue notification
            if (labels.includes('P0-CRITICAL')) {
              const comment = `🚨 **긴급 이슈 감지됨** 
              
이 이슈는 높은 우선순위로 분류되었습니다.
- 우선순위: P0-CRITICAL  
- 자동 라벨링: ${labels.join(', ')}
- Claude AI가 곧 분석을 시작합니다.

@claude 이 긴급 이슈를 우선적으로 분석해주세요.`;
              
              if (isIssue) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: item.number,
                  body: comment
                });
              }
            }