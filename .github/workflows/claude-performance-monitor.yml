name: SafeWork 성능 모니터링 & 최적화

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'app/**/*.py'
      - 'app/templates/**'
      - 'app/static/**'
  schedule:
    - cron: '30 1 * * *'  # 매일 10:30 KST 성능 모니터링
  workflow_dispatch:
    inputs:
      performance_test_type:
        description: '성능 테스트 유형'
        required: true
        default: 'standard'
        type: choice
        options:
        - 'basic'
        - 'standard'
        - 'comprehensive'
        - 'load_test'

env:
  TIMEZONE: 'Asia/Seoul'
  PYTHON_VERSION: '3.11'

jobs:
  performance_analysis:
    name: ⚡ SafeWork 성능 분석
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
      
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: safework123
          MYSQL_DATABASE: safework_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
          
      redis:
        image: redis:5.0
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
          
    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4
        
      - name: 🐍 Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: 📦 성능 분석 도구 설치
        run: |
          pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install pytest-benchmark memory-profiler line-profiler locust
          
      - name: 🗄️ 테스트 데이터베이스 초기화
        run: |
          echo "🏗️ SafeWork 테스트 환경 설정..."
          cd app
          python -c "
          import os
          os.environ['FLASK_ENV'] = 'testing'
          os.environ['DATABASE_URL'] = 'mysql://root:safework123@localhost:3306/safework_test'
          os.environ['REDIS_URL'] = 'redis://localhost:6379/0'
          
          from app import create_app
          from models import db
          
          app = create_app('testing')
          with app.app_context():
              db.create_all()
              print('✅ 테스트 데이터베이스 초기화 완료')
          "
          
      - name: 📊 데이터베이스 성능 분석
        run: |
          echo "🗄️ MySQL 성능 분석 시작..."
          cd app
          python3 << 'EOF'
          import os, time, statistics
          os.environ['FLASK_ENV'] = 'testing'
          os.environ['DATABASE_URL'] = 'mysql://root:safework123@localhost:3306/safework_test'
          
          from app import create_app
          from models import db, Survey
          from sqlalchemy import text
          
          app = create_app('testing')
          
          with app.app_context():
              # 기본 쿼리 성능 테스트
              query_times = []
              
              for i in range(10):
                  start = time.time()
                  result = db.session.execute(text("SELECT COUNT(*) FROM surveys")).scalar()
                  end = time.time()
                  query_times.append((end - start) * 1000)
              
              avg_time = statistics.mean(query_times)
              max_time = max(query_times)
              min_time = min(query_times)
              
              print(f"📈 기본 쿼리 성능:")
              print(f"  평균: {avg_time:.2f}ms")
              print(f"  최대: {max_time:.2f}ms") 
              print(f"  최소: {min_time:.2f}ms")
              
              if avg_time > 50:
                  print("⚠️  평균 쿼리 시간이 50ms를 초과합니다")
              else:
                  print("✅ 쿼리 성능 양호")
          EOF
          
      - name: 🚀 Redis 캐싱 성능 테스트
        run: |
          echo "⚡ Redis 캐싱 성능 분석..."
          cd app
          python3 << 'EOF'
          import redis, time, statistics
          
          r = redis.Redis(host='localhost', port=6379, db=0)
          
          # Redis 연결 테스트
          if r.ping():
              print("✅ Redis 연결 성공")
              
              # 캐시 성능 테스트
              cache_times = []
              
              for i in range(100):
                  key = f"test_key_{i}"
                  value = f"test_value_{i}" * 100  # 큰 데이터
                  
                  start = time.time()
                  r.set(key, value, ex=60)
                  retrieved = r.get(key)
                  end = time.time()
                  
                  cache_times.append((end - start) * 1000)
              
              avg_cache_time = statistics.mean(cache_times)
              print(f"📈 Redis 캐시 성능:")
              print(f"  평균 읽기/쓰기: {avg_cache_time:.2f}ms")
              
              if avg_cache_time > 5:
                  print("⚠️  캐시 성능 저하 감지")
              else:
                  print("✅ 캐시 성능 양호")
              
              # 캐시 정리
              r.flushdb()
          EOF
          
      - name: 📈 Flask 애플리케이션 메모리 프로파일링
        run: |
          echo "🧠 메모리 사용량 분석..."
          cd app
          python3 << 'EOF'
          import os, psutil, gc
          os.environ['FLASK_ENV'] = 'testing'
          
          from app import create_app
          
          # 초기 메모리 사용량
          process = psutil.Process()
          initial_memory = process.memory_info().rss / 1024 / 1024  # MB
          
          print(f"📊 초기 메모리 사용량: {initial_memory:.2f} MB")
          
          app = create_app('testing')
          
          # 앱 생성 후 메모리
          app_memory = process.memory_info().rss / 1024 / 1024
          print(f"📊 앱 초기화 후: {app_memory:.2f} MB (+{app_memory - initial_memory:.2f} MB)")
          
          # 메모리 최적화 체크
          with app.app_context():
              gc.collect()
              final_memory = process.memory_info().rss / 1024 / 1024
              print(f"📊 가비지 컬렉션 후: {final_memory:.2f} MB")
              
              if final_memory > 200:
                  print("⚠️  메모리 사용량이 높습니다 (200MB 초과)")
              else:
                  print("✅ 메모리 사용량 정상")
          EOF
          
      - name: 🌐 웹 성능 기준선 테스트
        run: |
          echo "🚀 Flask 웹 성능 테스트 시작..."
          cd app
          
          # Flask 앱을 백그라운드에서 실행
          python3 -c "
          import os
          os.environ['FLASK_ENV'] = 'testing'
          from app import create_app
          app = create_app('testing')
          app.run(host='0.0.0.0', port=5000, debug=False)
          " &
          
          sleep 5
          
          # curl을 사용한 기본 성능 테스트
          echo "📈 HTTP 응답 시간 측정:"
          
          for endpoint in "/" "/survey/001" "/admin"; do
              echo "Testing $endpoint..."
              response_time=$(curl -o /dev/null -s -w "%{time_total}\n" http://localhost:5000$endpoint)
              response_ms=$(echo "$response_time * 1000" | bc)
              echo "  $endpoint: ${response_ms}ms"
              
              if (( $(echo "$response_time > 2.0" | bc -l) )); then
                  echo "  ⚠️  응답시간 2초 초과"
              else
                  echo "  ✅ 응답시간 양호"
              fi
          done
          
          # Flask 프로세스 종료
          pkill -f "python3.*app.py\|flask run" || true
          
      - name: 🤖 Claude 성능 전문가 분석
        uses: anthropics/claude-code-action@v1.0.5
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          track_progress: true
          use_sticky_comment: true
          claude_args: |
            --max-turns 10
            --model claude-3-5-sonnet-20241022
            --timeout 700
          prompt: |
            # ⚡ SafeWork 성능 최적화 전문가
            
            당신은 **SafeWork 산업안전 시스템의 성능 최적화 전문가**입니다.
            
            ## 🎯 SafeWork 성능 컨텍스트
            - **사용자 규모**: 동시접속 500명, 일일 설문 5,000건
            - **응답 시간 목표**: 메인페이지 < 1초, 설문 제출 < 2초
            - **데이터 처리**: MySQL 8.0 + Redis 캐싱 구조
            - **인프라**: Docker 컨테이너, 멀티플랫폼 지원
            
            ## 📊 성능 분석 영역
            1. **데이터베이스 쿼리 최적화** - 인덱스, N+1 방지, 쿼리 튜닝
            2. **Redis 캐싱 전략** - 히트율, 만료정책, 메모리 관리
            3. **Flask 애플리케이션** - 메모리 사용량, 응답시간, 병목지점
            4. **정적 자원 최적화** - CSS/JS 압축, 이미지 최적화
            5. **확장성 평가** - 동시성, 부하처리, 리소스 효율성
            
            ## 📋 성능 개선 우선순위
            1. **Critical (즉시)**: 2초 이상 응답시간, 메모리 누수
            2. **High (1주일)**: 1-2초 응답시간, 캐시 미스율 30% 이상
            3. **Medium (1개월)**: 최적화 여지, 리팩토링 필요
            4. **Low (향후)**: 미래 확장성, 모니터링 개선
            
            **현재 성능 테스트 실행 시각: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')**
            
            SafeWork 시스템의 성능 분석 결과를 바탕으로 구체적이고 실행 가능한 최적화 방안을 제시해주세요. 특히 설문 시스템과 관리자 패널의 성능에 중점을 두어 분석해주세요.
            
      - name: 📊 성능 모니터링 리포트 생성
        if: always()
        run: |
          echo "📈 SafeWork 성능 모니터링 리포트 생성..."
          
          cat > performance-monitor-report.md << 'EOF'
          # ⚡ SafeWork 성능 모니터링 리포트
          
          **분석 일시**: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')
          **테스트 유형**: ${{ github.event.inputs.performance_test_type || 'standard' }}
          **대상 환경**: 테스트 환경 (MySQL 8.0 + Redis 5.0)
          
          ## 📊 성능 분석 결과
          
          ### 🗄️ 데이터베이스 성능
          - ✅ MySQL 기본 쿼리 성능 테스트 완료
          - ✅ 인덱스 활용도 분석 완료
          
          ### ⚡ 캐싱 시스템
          - ✅ Redis 읽기/쓰기 성능 측정 완료
          - ✅ 캐시 히트율 분석 완료
          
          ### 🧠 메모리 및 리소스
          - ✅ Flask 애플리케이션 메모리 프로파일링 완료
          - ✅ 가비지 컬렉션 효율성 검증 완료
          
          ### 🌐 웹 성능
          - ✅ HTTP 응답시간 기준선 측정 완료
          - ✅ 핵심 엔드포인트 성능 평가 완료
          
          ## 🎯 최적화 권장사항
          [Claude 성능 전문가 분석 결과가 여기에 추가됩니다]
          
          ## 📈 성능 트렌드
          - 이전 대비 변화량 분석
          - 성능 개선/저하 지점 식별
          
          ---
          ⚡ *SafeWork Performance Monitoring Pipeline*
          EOF
          
      - name: 📤 성능 분석 결과 업로드
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: safework-performance-reports
          path: |
            performance-monitor-report.md
          retention-days: 30