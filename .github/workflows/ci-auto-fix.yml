name: 🔧 CI Auto-Fix

# Prevent duplicate workflow execution
concurrency:
  group: ci-auto-fix-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches: [ main, master, develop ]
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      fix_type:
        description: 'Type of fixes to apply'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'linting'
          - 'formatting'
          - 'security'
          - 'dependencies'

permissions:
  contents: write
  issues: write
  pull-requests: write
  security-events: write

jobs:
  auto-fix:
    name: 🔧 Automated Fixes
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧪 Run tests
        if: ${{ inputs.fix_type == 'all' || inputs.fix_type == 'linting' }}
        run: |
          cd app
          export FLASK_CONFIG=testing
          export POSTGRES_HOST=127.0.0.1
          export POSTGRES_PORT=5432
          export POSTGRES_DATABASE=safework_test
          export POSTGRES_USER=safework_test
          export POSTGRES_PASSWORD=safework_test
          export REDIS_HOST=127.0.0.1
          export REDIS_PORT=6379
          
          # Basic application test
          python -c "
          from app import create_app
          app = create_app('testing')
          print('✅ Flask application created successfully')
          "

      - name: 🧹 Auto-fix code formatting
        if: ${{ inputs.fix_type == 'all' || inputs.fix_type == 'formatting' }}
        run: |
          echo "🧹 Running Black formatter..."
          cd app
          black . --line-length 88 --target-version py311 || true
          
          echo "📝 Changes made by Black:"
          git diff --name-only || echo "No formatting changes needed"

      - name: 🔧 Auto-fix linting issues
        if: ${{ inputs.fix_type == 'all' || inputs.fix_type == 'linting' }}
        run: |
          echo "🔧 Running Flake8 linter..."
          cd app
          flake8 . --max-line-length=88 --extend-ignore=E203,W503 --format='%(path)s:%(row)d:%(col)d: %(code)s %(text)s' || true

      - name: 🔍 Run security audit
        if: ${{ inputs.fix_type == 'all' || inputs.fix_type == 'security' }}
        run: |
          echo "🔍 Running security audit..."
          cd app
          
          # Check for security vulnerabilities
          bandit -r . -f json -o ../bandit-report.json || true
          safety check --json --output ../safety-report.json || true
          
          # Log results
          if [ -f ../bandit-report.json ]; then
            echo "Bandit security scan completed"
            cat ../bandit-report.json
          fi
          
          if [ -f ../safety-report.json ]; then
            echo "Safety dependency check completed"
            cat ../safety-report.json
          fi

      - name: 📊 Check dependencies
        if: ${{ inputs.fix_type == 'all' || inputs.fix_type == 'dependencies' }}
        run: |
          echo "📊 Checking for dependency updates..."
          cd app
          pip list --outdated || true
          
          echo "🔍 Checking requirements.txt format..."
          sort requirements.txt > requirements_sorted.txt || true
          if ! cmp -s requirements.txt requirements_sorted.txt; then
            echo "Sorting requirements.txt..."
            mv requirements_sorted.txt requirements.txt
          else
            rm -f requirements_sorted.txt
          fi

      - name: 🤖 Claude Code Analysis and Auto-Fix
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            Analyze SafeWork CI auto-fix operations and perform additional fixes if needed.

            **Fix Type:** ${{ inputs.fix_type || 'all' }}
            **Trigger Event:** ${{ github.event_name }}

            **Target Actions:**
            1. Security vulnerabilities found → Auto-fix and create PR
            2. Code quality issues → Apply Black formatting and suggest improvements
            3. Dependency problems → Suggest requirements.txt updates
            4. Test failures → Resolve environment setup issues
            5. Syntax/grammar errors → Direct fixes

            **Auto-fixable Items:**
            - Python code formatting (Black)
            - Basic syntax errors
            - requirements.txt sorting
            - Environment variable configuration issues
            - Docker configuration improvements

            **GitHub Issues Creation Targets:**
            - Complex security vulnerabilities
            - Architecture improvement needs
            - Performance optimization opportunities
            - Dependency upgrade plans

            **Project Context:**
            SafeWork is a Flask 3.0+ based industrial health and safety management system using independent Docker containers (PostgreSQL, Redis, App) with Dockerfile-based configuration and GitHub Secrets for production.

            **Response Language:** Please respond in Korean for user communication.
          claude_args: |
            --temperature 0.1
            --allowedTools "mcp__serena__*,mcp__github__*,mcp__sequential-thinking__*,mcp__memory__*"
            --systemPrompt "SafeWork Flask application CI/CD automation expert. Automatically improves code quality and security, and tracks complex issues through GitHub Issues."

      - name: 💾 Commit auto-fixes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "CI Auto-Fix Bot"
          
          if [ -n "$(git status --porcelain)" ]; then
            echo "📝 Committing auto-fixes..."
            git add .
            git commit -m "🔧 CI Auto-Fix: Code formatting and quality improvements

            - Applied Black code formatting
            - Fixed linting issues where possible  
            - Sorted requirements.txt
            - Updated dependency information
            
            🤖 Generated with SafeWork CI Auto-Fix System" || echo "No changes to commit"
            
            # Only push if we're on a push event (not PR)
            if [ "${{ github.event_name }}" = "push" ]; then
              git push origin ${{ github.ref_name }} || echo "Failed to push changes"
            fi
          else
            echo "✅ No fixes needed - code is already clean!"
          fi

      - name: 📊 Generate fix summary
        run: |
          echo "# 🔧 CI Auto-Fix Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Fix Type: ${{ inputs.fix_type || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Actions Performed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security audit (Bandit + Safety)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code formatting (Black)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Linting analysis (Flake8)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependency checks" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Application health validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Claude Code analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏥 Project: SafeWork Industrial Health & Safety Management" >> $GITHUB_STEP_SUMMARY
          echo "- **Framework:** Flask 3.0+" >> $GITHUB_STEP_SUMMARY
          echo "- **Database:** PostgreSQL 15, Redis" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure:** Docker, Private Registry" >> $GITHUB_STEP_SUMMARY