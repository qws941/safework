name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

env:
  REGISTRY: registry.jclee.me

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release-notes: ${{ steps.release-notes.outputs.notes }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
        
    - name: Generate release notes
      id: release-notes
      run: |
        echo "## 🚀 SafeWork Release ${{ steps.version.outputs.version }}" > release-notes.md
        echo "" >> release-notes.md
        echo "### 📦 Changes" >> release-notes.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release-notes.md
        echo "" >> release-notes.md
        echo "### 🐳 Docker Images" >> release-notes.md
        echo "- \`${{ env.REGISTRY }}/safework/app:${{ steps.version.outputs.version }}\`" >> release-notes.md
        echo "- \`${{ env.REGISTRY }}/safework/mysql:${{ steps.version.outputs.version }}\`" >> release-notes.md
        echo "- \`${{ env.REGISTRY }}/safework/redis:${{ steps.version.outputs.version }}\`" >> release-notes.md
        
        cat release-notes.md
        
        # Output for next job
        echo 'notes<<EOF' >> $GITHUB_OUTPUT
        cat release-notes.md >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

  build-release:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [app, mysql, redis]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: admin
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/safework/${{ matrix.service }}:${{ needs.create-release.outputs.version }}
          ${{ env.REGISTRY }}/safework/${{ matrix.service }}:stable
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  publish-release:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.create-release.outputs.version }}
        release_name: SafeWork ${{ needs.create-release.outputs.version }}
        body: ${{ needs.create-release.outputs.release-notes }}
        draft: false
        prerelease: ${{ contains(needs.create-release.outputs.version, 'alpha') || contains(needs.create-release.outputs.version, 'beta') || contains(needs.create-release.outputs.version, 'rc') }}
        
    - name: Update VERSION files
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        echo "${VERSION#v}" > app/VERSION
        echo "${VERSION#v}" > mysql/VERSION
        echo "${VERSION#v}" > redis/VERSION
        
    - name: Release notification
      run: |
        echo "🎉 SafeWork ${{ needs.create-release.outputs.version }} 릴리스 완료!"
        echo "📦 GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}"
        echo "🐳 Docker Images:"
        echo "  - ${{ env.REGISTRY }}/safework/app:${{ needs.create-release.outputs.version }}"
        echo "  - ${{ env.REGISTRY }}/safework/mysql:${{ needs.create-release.outputs.version }}"
        echo "  - ${{ env.REGISTRY }}/safework/redis:${{ needs.create-release.outputs.version }}"