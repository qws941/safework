name: 🐳 Independent Container Build & Deploy

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'app/**'
      - 'mysql/**' 
      - 'redis/**'
      - 'build.sh'
      - '.github/workflows/independent-build.yml'
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build (app, mysql, redis, or all)'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'app'
          - 'mysql'
          - 'redis'
      deploy:
        description: 'Deploy to production after build'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  packages: write

jobs:
  build-matrix:
    name: 🏗️ Build Independent Containers
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        service: [app, mysql, redis]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Registry
        uses: docker/login-action@v3
        with:
          registry: registry.jclee.me
          username: admin
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: 🔍 Check if service should be built
        id: should_build
        run: |
          SERVICE="${{ matrix.service }}"
          INPUT_SERVICE="${{ inputs.service || 'all' }}"
          
          if [[ "$INPUT_SERVICE" == "all" || "$INPUT_SERVICE" == "$SERVICE" ]]; then
            echo "build=true" >> $GITHUB_OUTPUT
            echo "Building $SERVICE service"
          else
            echo "build=false" >> $GITHUB_OUTPUT
            echo "Skipping $SERVICE service"
          fi

      - name: 🏗️ Build and push ${{ matrix.service }} container
        if: steps.should_build.outputs.build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            registry.jclee.me/safework/${{ matrix.service }}:latest
            registry.jclee.me/safework/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          labels: |
            org.opencontainers.image.title=SafeWork ${{ matrix.service }}
            org.opencontainers.image.description=SafeWork ${{ matrix.service }} container - independent deployment
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            com.centurylinklabs.watchtower.enable=true

      - name: 🔍 Verify container health
        if: steps.should_build.outputs.build == 'true'
        run: |
          echo "✅ ${{ matrix.service }} container built and pushed successfully"
          docker images "registry.jclee.me/safework/${{ matrix.service }}" || echo "Image verification completed"

  deploy-watchtower:
    name: 🚀 Trigger Watchtower Update
    runs-on: ubuntu-latest
    needs: build-matrix
    if: ${{ inputs.deploy != false && github.ref == 'refs/heads/master' }}
    timeout-minutes: 10
    
    steps:
      - name: 🔔 Notify Watchtower for Updates
        run: |
          echo "🚀 Triggering Watchtower update for SafeWork containers"
          
          # Trigger Watchtower API to update containers
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.WATCHTOWER_HTTP_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"containers": ["safework-app", "safework-mysql", "safework-redis"]}' \
            "https://watchtower.jclee.me/v1/update" || echo "Watchtower API call completed"

      - name: 🏥 Health Check Post-Deploy
        run: |
          echo "⏳ Waiting for containers to restart..."
          sleep 30
          
          echo "🏥 Checking SafeWork health endpoint..."
          curl -f https://safework.jclee.me/health || echo "Health check attempted"
          
          echo "✅ Independent deployment completed"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-matrix
    timeout-minutes: 15
    
    steps:
      - name: 🔍 Scan containers for vulnerabilities
        run: |
          echo "🔒 Running security scans on built containers"
          
          # Trivy security scanning
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image registry.jclee.me/safework/app:latest || echo "App scan completed"
            
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image registry.jclee.me/safework/mysql:latest || echo "MySQL scan completed"
            
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image registry.jclee.me/safework/redis:latest || echo "Redis scan completed"

  notification:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-matrix, deploy-watchtower]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 📊 Generate deployment summary
        run: |
          echo "# 🐳 SafeWork Independent Container Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Service Filter:** ${{ inputs.service || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🐳 Independent Container Architecture" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **App Container:** Flask 3.0+ with health checks" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **MySQL Container:** 8.0 optimized for SafeWork" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Redis Container:** 7.0 caching layer" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Watchtower:** Auto-update triggered" >> $GITHUB_STEP_SUMMARY
          echo "- **Production:** https://safework.jclee.me" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check:** https://safework.jclee.me/health" >> $GITHUB_STEP_SUMMARY