name: Claude Issue Automation

on:
  issues:
    types: [opened, labeled, assigned]
  issue_comment:
    types: [created]

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

jobs:
  claude-issue-handler:
    if: |
      (github.event_name == 'issues' && 
       (contains(github.event.issue.labels.*.name, 'enhancement') || 
        contains(github.event.issue.labels.*.name, 'bug') ||
        contains(github.event.issue.labels.*.name, 'P0'))) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude'))
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Claude Code Action
      uses: anthropics/claude-code-action@v1
      with:
        anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
        max_turns: 10
        prompt: |
          SafeWork 프로젝트의 GitHub 이슈 자동 처리를 수행합니다.
          
          **프로젝트 컨텍스트:**
          - Flask 3.0+ 기반 안전보건 관리 시스템
          - MySQL + Redis + Docker 환경
          - 001/002 설문 시스템 및 SafeWork v2 관리 대시보드
          
          **처리 단계:**
          1. 이슈 #${{ github.event.issue.number || github.event.issue.number }} 내용 분석
          2. 관련 코드베이스 검토 (templates/, routes/, models/)
          3. SafeWork 프로젝트 패턴에 맞는 구현
          4. 테스트 실행으로 검증
          5. PR 생성 (가능한 경우)
          
          **우선순위:**
          - P0 라벨: 즉시 처리
          - enhancement: 기능 개선
          - bug: 버그 수정
          
          **준수사항:**
          - CLAUDE.md 가이드라인 준수
          - Flask 모범사례 적용
          - 기존 코드 스타일 유지
          - Docker 환경에서 테스트

    - name: Auto-assign issue
      if: github.event_name == 'issues' && github.event.action == 'opened'
      run: |
        gh issue edit ${{ github.event.issue.number }} --add-assignee qws941
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Label high priority issues  
      if: contains(github.event.issue.title, '[URGENT]') || contains(github.event.issue.title, '[P0]')
      run: |
        gh issue edit ${{ github.event.issue.number }} --add-label "priority:high,needs-review"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Docker environment for testing
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 30  # Wait for services to be ready
        
    - name: Run tests after changes
      run: |
        docker exec safework-app python3 -m pytest tests/ -v --tb=short
      continue-on-error: true

    - name: Check application health
      run: |
        curl -f http://localhost:4545/health || echo "Health check failed"

    - name: Comment on issue with results
      if: always()
      run: |
        gh issue comment ${{ github.event.issue.number }} --body "🤖 Claude 자동 처리 완료
        
        **처리 결과:**
        - 워크플로우 상태: ${{ job.status }}
        - 실행 시간: $(date)
        - 실행 로그: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        
        **다음 단계:**
        - 생성된 PR 검토 (해당시)
        - 추가 테스트 필요시 @claude 멘션으로 요청
        
        문제가 있다면 수동 검토가 필요할 수 있습니다."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}