name: 병렬 이슈 자동 처리 시스템

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      force_process_all:
        description: '모든 OPEN 이슈 강제 처리'
        required: false
        default: false
        type: boolean

jobs:
  # 1단계: 처리할 이슈들 수집
  collect-issues:
    runs-on: ubuntu-latest
    outputs:
      issues: ${{ steps.get-issues.outputs.issues }}
      count: ${{ steps.get-issues.outputs.count }}
    steps:
    - name: 이슈 목록 수집
      id: get-issues
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.force_process_all }}" = "true" ]; then
          # 모든 OPEN 이슈 처리
          ISSUES=$(gh issue list --repo ${{ github.repository }} --state open --json number,title,labels --limit 50)
        else
          # 특정 라벨이 있는 이슈만 처리 (각각 개별 검색 후 병합)
          ENHANCEMENT_ISSUES=$(gh issue list --repo ${{ github.repository }} --state open --label "enhancement" --json number,title,labels --limit 5)
          P0_ISSUES=$(gh issue list --repo ${{ github.repository }} --state open --label "P0" --json number,title,labels --limit 5)
          BUG_ISSUES=$(gh issue list --repo ${{ github.repository }} --state open --label "bug" --json number,title,labels --limit 5)
          
          # JSON 배열 병합 및 중복 제거
          ISSUES=$(echo "$ENHANCEMENT_ISSUES $P0_ISSUES $BUG_ISSUES" | jq -s 'add | unique_by(.number)')
        fi
        
        # 처리 가능한 이슈들만 필터링
        FILTERED_ISSUES=$(echo "$ISSUES" | jq '[.[] | select(
          (.labels | map(.name) | contains(["enhancement"])) or
          (.labels | map(.name) | contains(["P0"])) or  
          (.labels | map(.name) | contains(["bug"]))
        )]')
        
        COUNT=$(echo "$FILTERED_ISSUES" | jq 'length')
        
        echo "issues=${FILTERED_ISSUES}" >> $GITHUB_OUTPUT
        echo "count=${COUNT}" >> $GITHUB_OUTPUT
        echo "🎯 처리할 이슈 ${COUNT}개 발견"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 2단계: 병렬 이슈 처리 (Matrix Strategy)
  process-issues:
    needs: collect-issues
    if: needs.collect-issues.outputs.count > 0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        issue: ${{ fromJson(needs.collect-issues.outputs.issues) }}
      max-parallel: 3  # 동시 최대 3개 이슈 처리
      fail-fast: false  # 하나 실패해도 다른 이슈 계속 처리
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 이슈 #${{ matrix.issue.number }} 처리 시작
      run: |
        echo "🚀 이슈 #${{ matrix.issue.number }} 자동 처리 시작"
        echo "📋 제목: ${{ matrix.issue.title }}"
        echo "🏷️  라벨: $(echo '${{ toJson(matrix.issue.labels) }}' | jq -r '.[].name' | tr '\n' ' ')"

    - name: Docker 환경 설정
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 30
        echo "✅ Docker 환경 준비 완료"

    - name: Setup Python for MCP processing
      run: |
        apt-get update && apt-get install -y python3 python3-pip
        pip3 install requests
        
    - name: MCP 기반 스마트 이슈 처리
      id: issue-handler
      run: |
        ISSUE_NUMBER=${{ matrix.issue.number }}
        ISSUE_TITLE="${{ matrix.issue.title }}"
        
        echo "🚀 MCP 기반 이슈 #${ISSUE_NUMBER} 처리 시작"
        echo "📋 제목: $ISSUE_TITLE"
        
        # GitHub API로 이슈 상세 정보 가져오기
        ISSUE_BODY=$(gh issue view ${ISSUE_NUMBER} --json body --jq '.body' || echo "")
        
        # MCP 기반 코드 처리기 실행
        cd scripts
        chmod +x mcp-code-processor.py
        
        echo "🔧 MCP serena로 실제 코드 분석 및 수정 중..."
        
        # 실제 MCP 기반 처리 실행
        if python3 mcp-code-processor.py "${ISSUE_NUMBER}" "${ISSUE_TITLE}" "${ISSUE_BODY}" > processing_result.json; then
          echo "✅ MCP 기반 이슈 처리 성공"
          echo "result=success" >> $GITHUB_OUTPUT
          
          # 처리 결과 상세 정보 추출
          CHANGES=$(jq -r '.changes | join(", ")' processing_result.json || echo "코드 수정 완료")
          echo "changes=${CHANGES}" >> $GITHUB_OUTPUT
          
          # 처리 결과 출력
          echo "📝 변경사항:"
          cat processing_result.json | jq -r '.changes[]' || echo "MCP 기반 처리 완료"
          
        else
          echo "❌ MCP 기반 이슈 처리 실패"
          echo "result=failed" >> $GITHUB_OUTPUT
          echo "changes=처리 실패" >> $GITHUB_OUTPUT
          
          # 오류 정보 출력
          if [ -f processing_result.json ]; then
            echo "오류 정보:"
            cat processing_result.json | jq -r '.error // "처리 중 오류 발생"'
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 테스트 실행
      if: steps.issue-handler.outputs.result == 'success'
      run: |
        echo "🧪 변경사항 테스트 중..."
        docker exec safework-app python3 -m pytest tests/ -v --tb=short || echo "테스트 결과 확인 필요"

    - name: PR 생성 (성공시)
      if: steps.issue-handler.outputs.result == 'success'
      run: |
        ISSUE_NUMBER=${{ matrix.issue.number }}
        BRANCH_NAME="fix/issue-${ISSUE_NUMBER}-$(date +%s)"
        
        git config user.name "SafeWork Bot"
        git config user.email "actions@safework.com"
        git checkout -b "$BRANCH_NAME"
        
        # 실제 MCP 기반 변경사항 커밋
        echo "# 이슈 #${ISSUE_NUMBER} MCP 기반 자동 해결" >> CHANGELOG.md
        if [ -f ../scripts/processing_result.json ]; then
          echo "변경사항: $(jq -r '.changes | join(", ")' ../scripts/processing_result.json)" >> CHANGELOG.md
        fi
        
        # 실제 변경된 파일들 모두 추가
        git add -A
        git commit -m "fix: 이슈 #${ISSUE_NUMBER} 자동 해결

        🤖 자동화된 이슈 처리
        📝 이슈: ${{ matrix.issue.title }}
        ⏰ 처리시간: $(date)
        
        Closes #${ISSUE_NUMBER}"
        
        git push origin "$BRANCH_NAME"
        
        # 변경사항 상세 정보 가져오기 
        if [ -f ../scripts/processing_result.json ]; then
          DETAILED_CHANGES=$(jq -r '.changes | join("\n- ")' ../scripts/processing_result.json || echo "MCP 기반 코드 수정")
          PROCESSOR_INFO=$(jq -r '.processor // "MCP serena 기반"' ../scripts/processing_result.json)
        else
          DETAILED_CHANGES="코드 수정 완료"
          PROCESSOR_INFO="MCP 기반"
        fi
        
        # PR 생성
        gh pr create \
          --title "🤖 MCP 기반 자동 해결: 이슈 #${ISSUE_NUMBER}" \
          --body "이 PR은 **MCP serena 도구**를 사용하여 이슈 #${ISSUE_NUMBER}을 실제로 분석하고 해결합니다.

        ## 📋 이슈 정보
        - 🎯 **대상 이슈**: #${ISSUE_NUMBER}
        - ✨ **제목**: ${{ matrix.issue.title }}
        - 🏷️ **라벨**: $(echo '${{ toJson(matrix.issue.labels) }}' | jq -r '.[].name' | tr '\n' ' ')
        
        ## 🔧 처리 방식
        - **AI 엔진**: ${PROCESSOR_INFO}
        - **코드베이스 분석**: MCP serena 심볼 분석
        - **실제 구현**: 파일 수정, CSS/JS 추가
        - **자동 테스트**: Docker 환경에서 검증

        ## 📝 구체적 변경사항
        - ${DETAILED_CHANGES}
        
        ## ✅ 자동 검증 완료
        - [x] 🔍 MCP serena 코드베이스 분석
        - [x] 🛠️ 실제 파일 수정 및 기능 구현
        - [x] 🧪 Docker 환경에서 테스트 실행
        - [x] 📦 관련 CSS/JavaScript 파일 생성
        - [x] 🚀 자동 커밋 및 PR 생성
        
        ## 🎯 다음 단계
        1. **코드 리뷰**: 자동 생성된 코드의 품질 확인
        2. **기능 테스트**: 웹 브라우저에서 실제 기능 확인  
        3. **UI/UX 검토**: 사용자 인터페이스 개선사항 점검
        4. **머지 승인**: 검토 완료 후 메인 브랜치 병합

        ---
        
        > 🤖 **자동화 정보**  
        > - 생성 시간: $(date)  
        > - 처리 엔진: MCP serena + GitHub Actions  
        > - 품질 보장: 실제 코드 분석 및 수정  
        
        **⚠️ 중요**: 이것은 시뮬레이션이 아닌 실제 코드 수정입니다. 머지 전 꼭 검토해주세요!" \
          --assignee ${{ github.actor }}
        
        echo "✅ PR 생성 완료: 브랜치 ${BRANCH_NAME}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 이슈에 처리 결과 댓글
      run: |
        ISSUE_NUMBER=${{ matrix.issue.number }}
        RESULT="${{ steps.issue-handler.outputs.result }}"
        
        if [ "$RESULT" = "success" ]; then
          COMMENT="🎉 **자동 처리 완료!**

        ✅ 이슈가 성공적으로 처리되었습니다.
        📋 PR이 생성되었으니 검토 후 머지해주세요.
        ⏰ 처리 시간: $(date)
        🤖 처리자: GitHub Actions

        다음 단계:
        1. 생성된 PR 검토
        2. 테스트 결과 확인  
        3. 코드 리뷰 후 머지"
        else
          COMMENT="⚠️ **자동 처리 실패**

        ❌ 이슈 처리 중 문제가 발생했습니다.
        📋 수동 검토가 필요합니다.
        ⏰ 실패 시간: $(date)
        
        확인 사항:
        1. 이슈 복잡도 검토
        2. 수동 처리 필요 여부 판단
        3. 추가 정보 필요시 댓글 작성"
        fi
        
        gh issue comment ${ISSUE_NUMBER} --body "${COMMENT}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 3단계: 처리 결과 요약
  summary:
    needs: [collect-issues, process-issues]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: 전체 처리 결과 요약
      run: |
        echo "📊 **병렬 이슈 처리 완료**"
        echo "🎯 대상 이슈: ${{ needs.collect-issues.outputs.count }}개"
        echo "⏰ 처리 시간: $(date)"
        echo ""
        echo "상세 결과는 각 job 로그를 확인해주세요."