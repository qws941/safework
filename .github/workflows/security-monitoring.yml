name: SafeWork Security Monitoring

on:
  push:
    branches: [master, main]
    paths:
      - 'app/**/*.py'
      - 'app/models*.py'
      - 'app/requirements.txt'
      - 'docker-compose.yml'
  pull_request:
    branches: [master, main]
    paths:
      - 'app/**/*.py'
      - 'app/models*.py'
      - 'app/requirements.txt'
      - 'docker-compose.yml'
  schedule:
    - cron: '0 1 * * *'  # 매일 오전 1시 KST (자정 UTC) 보안 스캔
  workflow_dispatch:
    inputs:
      scan_type:
        description: '스캔 유형'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependency_check
          - secrets_scan
          - phi_audit

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 🔍 PHI(개인건강정보) 보호 검사
  phi-protection-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 분석

      - name: 🏥 PHI 보호 패턴 검사
        id: phi_check
        run: |
          echo "🏥 개인건강정보(PHI) 보호 패턴 검사 시작..."
          
          # PHI 관련 위험 패턴 검색
          PHI_VIOLATIONS=()
          
          # 1. 로그에 민감한 정보 출력 검사
          echo "🔍 로그 보안 검사..."
          PHI_LOG_ISSUES=$(grep -r -n --include="*.py" -E "(print|log|logger)\s*\(.*\b(ssn|birthday|birth_date|medical|health|personal|private)" app/ || true)
          if [ -n "$PHI_LOG_ISSUES" ]; then
            echo "⚠️ PHI 로깅 위험 감지:"
            echo "$PHI_LOG_ISSUES"
            PHI_VIOLATIONS+=("PHI_LOGGING")
          fi
          
          # 2. 하드코딩된 의료 정보 검사
          echo "🔍 하드코딩된 의료정보 검사..."
          HARDCODED_MEDICAL=$(grep -r -n --include="*.py" -E "birth_date.*=.*[0-9]{4}-[0-9]{2}-[0-9]{2}|ssn.*=.*[0-9]{6}-[0-9]{7}" app/ || true)
          if [ -n "$HARDCODED_MEDICAL" ]; then
            echo "⚠️ 하드코딩된 의료정보 감지:"
            echo "$HARDCODED_MEDICAL"
            PHI_VIOLATIONS+=("HARDCODED_MEDICAL")
          fi
          
          # 3. 암호화되지 않은 민감한 필드 검사  
          echo "🔍 암호화 누락 검사..."
          UNENCRYPTED_SENSITIVE=$(grep -r -n --include="*.py" -A 3 -B 3 "medical_conditions.*Text\|allergies.*Text\|diagnosis.*Text" app/ | grep -v -E "(encrypt|hash)" || true)
          if [ -n "$UNENCRYPTED_SENSITIVE" ]; then
            echo "⚠️ 암호화되지 않은 민감한 필드:"
            echo "$UNENCRYPTED_SENSITIVE"
            PHI_VIOLATIONS+=("UNENCRYPTED_SENSITIVE")
          fi
          
          # 4. SQL 인젝션 위험 패턴
          echo "🔍 SQL 인젝션 위험 검사..."
          SQL_INJECTION_RISK=$(grep -r -n --include="*.py" -E "db\.session\.execute\s*\(.*f[\"']|query\s*\(.*f[\"']|raw\s*\(" app/ || true)
          if [ -n "$SQL_INJECTION_RISK" ]; then
            echo "⚠️ SQL 인젝션 위험 패턴:"
            echo "$SQL_INJECTION_RISK"
            PHI_VIOLATIONS+=("SQL_INJECTION_RISK")
          fi
          
          # 5. CSRF 보호 누락 검사
          echo "🔍 CSRF 보호 검사..."
          CSRF_MISSING=$(grep -r -n --include="*.py" -E "@app\.route.*methods.*POST" app/routes/ | while read -r line; do
            file=$(echo "$line" | cut -d: -f1)
            lineno=$(echo "$line" | cut -d: -f2)
            if ! grep -A 10 -B 5 "$lineno" "$file" | grep -q "csrf"; then
              echo "$line"
            fi
          done || true)
          if [ -n "$CSRF_MISSING" ]; then
            echo "⚠️ CSRF 보호 누락 가능성:"
            echo "$CSRF_MISSING"
            PHI_VIOLATIONS+=("CSRF_MISSING")
          fi
          
          # 결과 요약
          VIOLATION_COUNT=${#PHI_VIOLATIONS[@]}
          echo "phi_violation_count=$VIOLATION_COUNT" >> $GITHUB_OUTPUT
          echo "phi_violations=${PHI_VIOLATIONS[*]}" >> $GITHUB_OUTPUT
          
          if [ $VIOLATION_COUNT -eq 0 ]; then
            echo "✅ PHI 보호 검사 통과!"
          else
            echo "❌ PHI 보호 위반 사항 $VIOLATION_COUNT 개 발견"
          fi

  # 🔒 의존성 보안 검사
  dependency-security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4

      - name: 🐍 Python 환경 설정
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 의존성 설치
        run: |
          cd app/
          pip install --upgrade pip
          pip install safety bandit semgrep
          pip install -r requirements.txt

      - name: 🔍 Python 보안 취약점 검사 (Safety)
        run: |
          echo "🔍 Python 패키지 보안 취약점 검사..."
          cd app/
          safety check --json --output safety-report.json || true
          if [ -f safety-report.json ]; then
            echo "📋 Safety 검사 결과:"
            cat safety-report.json | python -m json.tool
          fi

      - name: 🔍 코드 보안 분석 (Bandit)
        run: |
          echo "🔍 Python 코드 보안 분석..."
          cd app/
          bandit -r . -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            echo "📋 Bandit 검사 결과:"
            cat bandit-report.json | python -m json.tool
          fi

      - name: 🔍 고급 보안 분석 (Semgrep)
        run: |
          echo "🔍 고급 보안 패턴 분석..."
          cd app/
          semgrep --config=auto --json --output=semgrep-report.json . || true
          if [ -f semgrep-report.json ]; then
            echo "📋 Semgrep 검사 결과 요약:"
            cat semgrep-report.json | python -c "
            import json, sys
            data = json.load(sys.stdin)
            results = data.get('results', [])
            print(f'총 {len(results)}개 이슈 발견')
            for result in results[:5]:  # 상위 5개만 출력
                print(f'- {result.get(\"check_id\")}: {result.get(\"message\")}')
            "
          fi

      - name: 📊 보안 검사 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-reports
          path: |
            app/safety-report.json
            app/bandit-report.json  
            app/semgrep-report.json
          retention-days: 30

  # 🔐 시크릿 스캔
  secrets-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔐 Git 히스토리 시크릿 스캔
        run: |
          echo "🔐 Git 히스토리에서 시크릿 패턴 검색..."
          
          # 일반적인 시크릿 패턴들
          SECRET_PATTERNS=(
            "password\s*=\s*['\"][^'\"]{8,}['\"]"
            "secret\s*=\s*['\"][^'\"]{8,}['\"]"
            "api[_-]?key\s*=\s*['\"][^'\"]{8,}['\"]"
            "token\s*=\s*['\"][^'\"]{8,}['\"]"
            "mysql.*://.*:.*@"
            "redis.*://.*:.*@"
            "['\"][0-9a-fA-F]{32,}['\"]"
            "sk-[a-zA-Z0-9]{48,}"
          )
          
          SECRETS_FOUND=false
          
          for pattern in "${SECRET_PATTERNS[@]}"; do
            echo "🔍 패턴 검사: $pattern"
            MATCHES=$(git log --all -p -S "$pattern" --regexp-ignore-case | head -20 || true)
            if [ -n "$MATCHES" ]; then
              echo "⚠️ 의심스러운 시크릿 패턴 발견!"
              echo "$MATCHES"
              SECRETS_FOUND=true
            fi
          done
          
          # 현재 파일에서 시크릿 검사
          echo "🔍 현재 파일들에서 시크릿 검사..."
          grep -r -E -n "(password|secret|key|token)\s*=\s*['\"][^'\"]{8,}['\"]" . --include="*.py" --include="*.yml" --include="*.yaml" --exclude-dir=.git || true
          
          if [ "$SECRETS_FOUND" = "false" ]; then
            echo "✅ 시크릿 스캔 통과!"
          else
            echo "⚠️ 잠재적 시크릿 노출 위험 발견"
          fi

  # 📋 종합 보안 리포트 생성
  security-report:
    needs: [phi-protection-audit, dependency-security-scan, secrets-scan]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📊 SafeWork 보안 종합 리포트 생성
        run: |
          echo "📊 SafeWork 보안 종합 리포트 생성..."
          echo "⏰ 스캔 완료 시간: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')"
          
          # PHI 보호 검사 결과
          echo "🏥 PHI 보호 검사:"
          if [ "${{ needs.phi-protection-audit.result }}" = "success" ]; then
            PHI_VIOLATIONS="${{ needs.phi-protection-audit.outputs.phi_violation_count }}"
            if [ "$PHI_VIOLATIONS" = "0" ]; then
              echo "  ✅ PHI 보호 패턴 모든 검사 통과"
            else
              echo "  ⚠️ PHI 보호 위반 $PHI_VIOLATIONS 건 발견"
              echo "  📋 위반 유형: ${{ needs.phi-protection-audit.outputs.phi_violations }}"
            fi
          else
            echo "  ❌ PHI 보호 검사 실패"
          fi
          
          # 의존성 보안 검사 결과
          echo "📦 의존성 보안 검사:"
          if [ "${{ needs.dependency-security-scan.result }}" = "success" ]; then
            echo "  ✅ 의존성 보안 검사 완료"
          else
            echo "  ⚠️ 의존성 보안 검사에서 문제 발견"
          fi
          
          # 시크릿 스캔 결과
          echo "🔐 시크릿 스캔:"
          if [ "${{ needs.secrets-scan.result }}" = "success" ]; then
            echo "  ✅ 시크릿 스캔 통과"
          else
            echo "  ⚠️ 잠재적 시크릿 노출 위험"
          fi
          
          # 전체 보안 등급 계산
          SECURITY_SCORE=100
          
          if [ "${{ needs.phi-protection-audit.result }}" != "success" ]; then
            SECURITY_SCORE=$((SECURITY_SCORE - 30))
          elif [ "${{ needs.phi-protection-audit.outputs.phi_violation_count }}" != "0" ]; then
            SECURITY_SCORE=$((SECURITY_SCORE - 15))
          fi
          
          if [ "${{ needs.dependency-security-scan.result }}" != "success" ]; then
            SECURITY_SCORE=$((SECURITY_SCORE - 25))
          fi
          
          if [ "${{ needs.secrets-scan.result }}" != "success" ]; then
            SECURITY_SCORE=$((SECURITY_SCORE - 20))
          fi
          
          echo "🎯 전체 보안 점수: $SECURITY_SCORE/100"
          
          if [ $SECURITY_SCORE -ge 90 ]; then
            echo "🟢 보안 등급: 우수 (A)"
          elif [ $SECURITY_SCORE -ge 80 ]; then
            echo "🟡 보안 등급: 양호 (B)"
          elif [ $SECURITY_SCORE -ge 70 ]; then
            echo "🟠 보안 등급: 보통 (C)"
          else
            echo "🔴 보안 등급: 위험 (D) - 즉시 조치 필요!"
          fi
          
          # 긴급 알림이 필요한 경우 이슈 생성 트리거
          if [ $SECURITY_SCORE -lt 70 ]; then
            echo "🚨 심각한 보안 위험 감지 - 자동 이슈 생성 필요"
            echo "CRITICAL_SECURITY_ALERT=true" >> $GITHUB_ENV
          fi

      - name: 🚨 긴급 보안 알림 이슈 생성
        if: env.CRITICAL_SECURITY_ALERT == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const securityIssue = {
              title: '🚨 [CRITICAL] SafeWork 보안 위험 감지 - 즉시 조치 필요',
              body: `
            # 🚨 중요한 보안 위험이 감지되었습니다
            
            **⏰ 감지 시간:** ${new Date().toLocaleString('ko-KR', {timeZone: 'Asia/Seoul'})}
            **🔍 검사 유형:** 자동 보안 모니터링
            **📊 보안 점수:** 70점 미만 (위험)
            
            ## 📋 감지된 문제
            
            ### 🏥 PHI 보호 검사
            - PHI 위반 건수: ${{ needs.phi-protection-audit.outputs.phi_violation_count }}건
            - 위반 유형: ${{ needs.phi-protection-audit.outputs.phi_violations }}
            
            ### 📦 의존성 보안
            - 상태: ${{ needs.dependency-security-scan.result }}
            
            ### 🔐 시크릿 보안  
            - 상태: ${{ needs.secrets-scan.result }}
            
            ## 🎯 즉시 필요한 조치
            
            1. **PHI 보호 강화**
               - [ ] 로그에서 개인건강정보 제거
               - [ ] 민감한 데이터 암호화 확인
               - [ ] SQL 인젝션 방지 패턴 적용
            
            2. **의존성 업데이트** 
               - [ ] 취약한 패키지 업데이트
               - [ ] 보안 패치 적용
            
            3. **시크릿 관리**
               - [ ] 하드코딩된 시크릿 제거
               - [ ] 환경변수로 이전
               - [ ] Git 히스토리 정리
            
            ## 📞 긴급 연락처
            
            - **즉시 처리**: @claude 멘션으로 AI 지원 요청
            - **기술 지원**: SafeWork 개발팀
            - **보안 담당**: 정보보안팀
            
            ---
            🤖 *SafeWork 자동 보안 모니터링 시스템*`,
              labels: ['🚨 긴급', '🛡️ 보안/개인정보', 'P0-CRITICAL']
            };
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ...securityIssue
            });
            
            console.log("🚨 긴급 보안 알림 이슈가 생성되었습니다.");
            
            // Claude AI 자동 호출
            const issueNumber = (await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              per_page: 1
            })).data[0].number;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: '@claude 이 중요한 보안 위험을 즉시 분석하고 구체적인 해결 방안을 제시해주세요. 우선순위: P0-CRITICAL'
            });

  # Slack 보안 알림 Job 추가
  security-notification:
    runs-on: ubuntu-latest
    needs: [dependency-check, code-security-scan, phi-compliance-check, generate-security-report]
    if: always()
    steps:
      - name: 🔔 SafeWork 보안 모니터링 Slack 알림
        run: |
          # 보안 상태 결정
          if [ "${{ needs.phi-compliance-check.result }}" = "success" ] && [ "${{ needs.code-security-scan.result }}" = "success" ]; then
            STATUS="PASSED"
            COLOR="good"
            EMOJI="🛡️"
          else
            STATUS="SECURITY ISSUES DETECTED"
            COLOR="danger" 
            EMOJI="🚨"
          fi
          
          # Slack 보안 알림 전송
          curl -X POST \
            -H "Authorization: Bearer xoxb-9456976950066-9491938773873-UE79hj1fLat2dyqeIptwGLbj" \
            -H "Content-type: application/json" \
            --data "{
              \"channel\": \"#safework-alerts\",
              \"text\": \"$EMOJI SafeWork 보안 모니터링 $STATUS\",
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"SafeWork Security Monitoring\",
                \"fields\": [
                  {\"title\": \"Status\", \"value\": \"$STATUS\", \"short\": true},
                  {\"title\": \"PHI Compliance\", \"value\": \"${{ needs.phi-compliance-check.result }}\", \"short\": true},
                  {\"title\": \"Code Security\", \"value\": \"${{ needs.code-security-scan.result }}\", \"short\": true},
                  {\"title\": \"Dependencies\", \"value\": \"${{ needs.dependency-check.result }}\", \"short\": true}
                ],
                \"footer\": \"SafeWork Security\",
                \"ts\": $(date +%s)
              }]
            }" \
            https://slack.com/api/chat.postMessage