name: SafeWork Unified Deployment Pipeline

on:
  push:
    branches: [master]
    paths:
      - 'app/**'
      - 'postgres/**'
      - 'redis/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  REGISTRY: registry.jclee.me
  REGISTRY_USER: admin
  STACK_NAME: safework
  WEBHOOK_URL: https://portainer.jclee.me/api/stacks/webhooks/e2abf888-e16d-419b-bdf0-65c206cca913
  SERVICE_URL: https://safework.jclee.me

jobs:
  # 병렬 이미지 빌드 Jobs
  build-app:
    name: 🔨 Build App Image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔑 Login to Docker Registry
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u ${{ env.REGISTRY_USER }} --password-stdin

      - name: 🔨 Build and Push App Image
        run: |
          echo "🔨 Building SafeWork App image..."
          docker build -t ${{ env.REGISTRY }}/safework-app:latest \
                       -t ${{ env.REGISTRY }}/safework-app:${{ github.sha }} \
                       ./app

          echo "📦 Pushing App images to registry..."
          docker push ${{ env.REGISTRY }}/safework-app:latest
          docker push ${{ env.REGISTRY }}/safework-app:${{ github.sha }}
          echo "✅ App image push completed"

  build-postgres:
    name: 🔨 Build PostgreSQL Image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔑 Login to Docker Registry
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u ${{ env.REGISTRY_USER }} --password-stdin

      - name: 🔨 Build and Push PostgreSQL Image
        run: |
          echo "🔨 Building PostgreSQL image..."
          docker build -t ${{ env.REGISTRY }}/safework-postgres:latest \
                       -t ${{ env.REGISTRY }}/safework-postgres:${{ github.sha }} \
                       ./postgres

          echo "📦 Pushing PostgreSQL images to registry..."
          docker push ${{ env.REGISTRY }}/safework-postgres:latest
          docker push ${{ env.REGISTRY }}/safework-postgres:${{ github.sha }}
          echo "✅ PostgreSQL image push completed"

  build-redis:
    name: 🔨 Build Redis Image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔑 Login to Docker Registry
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u ${{ env.REGISTRY_USER }} --password-stdin

      - name: 🔨 Build and Push Redis Image
        run: |
          echo "🔨 Building Redis image..."
          docker build -t ${{ env.REGISTRY }}/safework-redis:latest \
                       -t ${{ env.REGISTRY }}/safework-redis:${{ github.sha }} \
                       ./redis

          echo "📦 Pushing Redis images to registry..."
          docker push ${{ env.REGISTRY }}/safework-redis:latest
          docker push ${{ env.REGISTRY }}/safework-redis:${{ github.sha }}
          echo "✅ Redis image push completed"

  # 배포 Job (빌드 완료 후 실행)
  deploy:
    name: 🚀 Deploy via Webhook
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build-app, build-postgres, build-redis]

    steps:

      - name: 🚀 Deploy via Portainer Webhook
        run: |
          echo "🚀 Triggering Portainer webhook deployment..."

          response=$(curl -X POST -s -w "\n%{http_code}" "${{ env.WEBHOOK_URL }}")
          http_code=$(echo "$response" | tail -n 1)

          if [ "$http_code" = "204" ] || [ "$http_code" = "200" ]; then
            echo "✅ Webhook deployment triggered successfully (HTTP $http_code)"
          else
            echo "❌ Webhook deployment failed (HTTP $http_code)"
            echo "Response: $response"
            exit 1
          fi

      - name: ⏳ Wait for Deployment
        run: |
          echo "⏳ Waiting for containers to restart..."
          sleep 45

      - name: 🔍 Verify Deployment Health
        run: |
          echo "🔍 Verifying deployment health..."

          max_attempts=10
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "🔍 Health check attempt $attempt/$max_attempts..."

            response=$(curl -s -m 10 "${{ env.SERVICE_URL }}/health" || echo "")

            if echo "$response" | grep -q "healthy"; then
              echo "✅ Service is healthy!"
              echo "📊 Health response: $response"

              # Additional endpoint checks
              echo "🔍 Testing critical endpoints..."
              for endpoint in "/" "/admin/safework"; do
                status=$(curl -s -o /dev/null -w "%{http_code}" -m 10 "${{ env.SERVICE_URL }}$endpoint" || echo "000")
                if [ "$status" = "200" ] || [ "$status" = "302" ]; then
                  echo "✅ Endpoint $endpoint: HTTP $status"
                else
                  echo "⚠️ Endpoint $endpoint: HTTP $status"
                fi
              done

              exit 0
            fi

            echo "⚠️ Attempt $attempt failed, retrying in 10s..."
            sleep 10
            attempt=$((attempt + 1))
          done

          echo "❌ Health check failed after $max_attempts attempts"
          exit 1

      - name: 📊 Deployment Summary
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 SafeWork Deployment Summary"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Status: DEPLOYMENT SUCCESSFUL"
            echo "🌐 Service URL: ${{ env.SERVICE_URL }}"
            echo "📦 Image Version: ${{ github.sha }}"
            echo "📅 Deploy Time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
            echo "🚀 Method: Unified Pipeline (Build → Registry → Webhook)"
            echo "🏗️ Build Number: ${{ github.run_number }}"
            echo ""
            echo "🔍 Service Endpoints:"
            echo "  • Health: ${{ env.SERVICE_URL }}/health"
            echo "  • Admin: ${{ env.SERVICE_URL }}/admin/safework"
            echo "  • Main: ${{ env.SERVICE_URL }}/"

          else
            echo "❌ Status: DEPLOYMENT FAILED"
            echo "📅 Failure Time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
            echo "🔍 Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            echo "🔧 Manual recovery:"
            echo "  • Portainer: https://portainer.jclee.me"
            echo "  • Registry: ${{ env.REGISTRY }}"
            echo "  • Webhook: ${{ env.WEBHOOK_URL }}"
          fi

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: 🚨 Failure Notification
        if: failure()
        run: |
          echo "🚨 Deployment failed! Attempting emergency webhook trigger..."

          # Emergency webhook trigger
          curl -X POST -s "${{ env.WEBHOOK_URL }}" || echo "Emergency webhook also failed"

          echo "📞 Manual intervention required:"
          echo "  1. Check Portainer: https://portainer.jclee.me"
          echo "  2. Check registry: ${{ env.REGISTRY }}"
          echo "  3. Check service: ${{ env.SERVICE_URL }}/health"