name: SafeWork Issue Labeling System

on:
  issues:
    types: [opened, edited, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: '라벨링할 이슈 번호'
        required: true
        type: string

jobs:
  smart-labeling:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    permissions:
      issues: write
      contents: read
      
    steps:
      - name: SafeWork Smart Labeling System
        uses: actions/github-script@v7
        with:
          script: |
            console.log("🏷️ SafeWork Smart Labeling System starting...");
            
            const issueNumber = context.issue?.number || '${{ github.event.inputs.issue_number }}';
            
            if (!issueNumber) {
              console.log("❌ 이슈 번호를 찾을 수 없습니다.");
              return;
            }
            
            // 이슈 정보 가져오기
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            const title = (issue.title || '').toLowerCase();
            const body = (issue.body || '').toLowerCase();
            const author = issue.user.login;
            const content = `${title} ${body}`;
            
            console.log(`📋 이슈 분석: #${issueNumber} - ${issue.title}`);
            console.log(`👤 작성자: ${author}`);
            
            // SafeWork domain-specific label classification logic
            const labels = [];
            
            // 1. Priority auto-classification (easy for non-developers to understand)
            if (content.includes('중단') || content.includes('작동 안') || content.includes('접속 불가') || 
                content.includes('오류') || content.includes('에러') || content.includes('urgent') || 
                content.includes('critical') || content.includes('문제')) {
              labels.push('urgent');
            } else if (content.includes('느림') || content.includes('개선') || content.includes('불편') ||
                       content.includes('enhancement') || content.includes('feature')) {
              labels.push('enhancement');
            } else if (content.includes('문의') || content.includes('질문') || content.includes('사용법') ||
                       content.includes('question') || content.includes('how to')) {
              labels.push('question');
            } else {
              labels.push('general');
            }
            
            // 2. SafeWork functional area classification
            if (content.includes('설문') || content.includes('survey') || content.includes('001') || content.includes('002') ||
                content.includes('근골격') || content.includes('신규입사')) {
              labels.push('area/survey');
            }
            
            if (content.includes('관리자') || content.includes('admin') || content.includes('관리패널') || 
                content.includes('대시보드') || content.includes('dashboard')) {
              labels.push('area/admin');
            }
            
            if (content.includes('건강') || content.includes('의료') || content.includes('검진') || content.includes('health') ||
                content.includes('medical') || content.includes('의약품') || content.includes('medication')) {
              labels.push('area/medical');
            }
            
            if (content.includes('문서') || content.includes('파일') || content.includes('document') || 
                content.includes('upload') || content.includes('다운로드') || content.includes('download')) {
              labels.push('area/document');
            }
            
            if (content.includes('로그인') || content.includes('회원가입') || content.includes('인증') || 
                content.includes('login') || content.includes('auth') || content.includes('password')) {
              labels.push('area/auth');
            }
            
            if (content.includes('api') || content.includes('연동') || content.includes('integration') ||
                content.includes('외부') || content.includes('export') || content.includes('import')) {
              labels.push('area/api');
            }
            
            // 3. Technical classification (developer-friendly but understandable terms)
            if (content.includes('모바일') || content.includes('mobile') || content.includes('스마트폰') || 
                content.includes('tablet') || content.includes('반응형')) {
              labels.push('tech/mobile');
            }
            
            if (content.includes('속도') || content.includes('느림') || content.includes('performance') || 
                content.includes('빠르게') || content.includes('최적화')) {
              labels.push('tech/performance');
            }
            
            if (content.includes('디자인') || content.includes('ui') || content.includes('화면') || 
                content.includes('버튼') || content.includes('색상') || content.includes('레이아웃')) {
              labels.push('tech/ui');
            }
            
            // 4. User type classification
            if (content.includes('간호사') || content.includes('의료진') || content.includes('보건관리자')) {
              labels.push('user/medical-staff');
            }
            
            if (content.includes('안전관리자') || content.includes('관리자') || content.includes('담당자')) {
              labels.push('user/admin');
            }
            
            if (content.includes('근로자') || content.includes('직원') || content.includes('사용자') || content.includes('일반')) {
              labels.push('user/worker');
            }
            
            // 5. Korean language related issues
            if (content.includes('한글') || content.includes('한국어') || content.includes('번역') || 
                content.includes('언어') || /[가-힣]/.test(title + body)) {
              labels.push('lang/korean');
            }
            
            // 6. Data/security related (PHI important)
            if (content.includes('개인정보') || content.includes('보안') || content.includes('암호화') || 
                content.includes('privacy') || content.includes('security') || content.includes('phi')) {
              labels.push('security/phi');
            }
            
            if (content.includes('백업') || content.includes('데이터') || content.includes('손실') || 
                content.includes('복구') || content.includes('backup') || content.includes('data')) {
              labels.push('data/backup');
            }
            
            // 7. Browser compatibility
            if (content.includes('ie') || content.includes('explorer') || content.includes('chrome') || 
                content.includes('safari') || content.includes('firefox') || content.includes('브라우저')) {
              labels.push('tech/browser');
            }
            
            // 8. Check existing labels and remove duplicates
            const existingLabels = issue.labels.map(label => 
              typeof label === 'string' ? label : label.name
            );
            
            const newLabels = labels.filter(label => !existingLabels.includes(label));
            
            console.log(`🏷️ Existing labels: ${existingLabels.join(', ')}`);
            console.log(`🆕 New labels: ${newLabels.join(', ')}`);
            
            // Apply labels
            if (newLabels.length > 0) {
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: newLabels
                });
                
                console.log(`✅ ${newLabels.length} labels added successfully!`);
                
                // Add non-developer friendly comment (Korean)
                const labelExplanation = `
            🏷️ **Auto Labeling Complete!**
            
            This issue has been classified as follows:
            
            ${newLabels.map(label => {
              const explanations = {
                'urgent': 'Critical issue requiring immediate attention.',
                'enhancement': 'Feature improvement or new feature request.',
                'question': 'Usage question or feature inquiry.',
                'general': 'General issue or feedback.',
                'area/survey': 'Survey system related issue.',
                'area/admin': 'Admin panel related issue.',
                'area/medical': 'Medical/health check related issue.',
                'area/document': 'Document management related issue.',
                'area/auth': 'Authentication or login related issue.',
                'area/api': 'API or external integration related issue.',
                'tech/mobile': 'Mobile device usability related issue.',
                'tech/performance': 'System performance related issue.',
                'tech/ui': 'User interface design related issue.',
                'user/medical-staff': 'Medical staff function related issue.',
                'user/admin': 'Safety manager or system admin related issue.',
                'user/worker': 'General worker function related issue.',
                'lang/korean': 'Korean language or localization related issue.',
                'security/phi': 'Security or personal health information related issue.',
                'data/backup': 'Data storage or backup related issue.',
                'tech/browser': 'Browser compatibility related issue.'
              };
              return `- **${label}**: ${explanations[label] || 'Related issue.'}`;
            }).join('\n')}
            
            📞 **Need Help?**
            - Urgent issues: Mention @claude for immediate assistance
            - General inquiries: Add additional details in the issue
            
            ---
            🤖 *SafeWork Auto Labeling System*`;
                
                if (newLabels.some(label => ['urgent', 'enhancement', 'question'].includes(label))) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    body: labelExplanation
                  });
                  
                  console.log("💬 User-friendly explanation comment added");
                }
                
                // Automatically call Claude AI for urgent issues
                if (newLabels.includes('urgent')) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    body: `🚨 **Urgent Issue Auto Processing**\n\n@claude Please analyze this urgent issue immediately and provide solution.\n\nPriority: P0-CRITICAL`
                  });
                  
                  console.log("🚨 Claude AI automatically called for urgent issue");
                }
                
              } catch (error) {
                console.log(`❌ Label addition failed: ${error.message}`);
              }
            } else {
              console.log("ℹ️ No new labels to add.");
            }

  # Issue Statistics and Dashboard Update
  update-dashboard:
    needs: smart-labeling
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
      - name: SafeWork Issue Dashboard Update
        uses: actions/github-script@v7
        with:
          script: |
            console.log("📊 SafeWork Issue Dashboard Update...");
            
            try {
              // Get all open issues
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });
              
              // Aggregate statistics by label
              const labelStats = {};
              const priorityStats = {'urgent': 0, 'enhancement': 0, 'question': 0, 'general': 0};
              const areaStats = {};
              
              issues.forEach(issue => {
                issue.labels.forEach(label => {
                  const labelName = typeof label === 'string' ? label : label.name;
                  labelStats[labelName] = (labelStats[labelName] || 0) + 1;
                  
                  // Priority statistics
                  if (priorityStats.hasOwnProperty(labelName)) {
                    priorityStats[labelName]++;
                  }
                  
                  // Area statistics
                  if (labelName.includes('area/') || labelName.includes('tech/') || labelName.includes('user/')) {
                    areaStats[labelName] = (areaStats[labelName] || 0) + 1;
                  }
                });
              });
              
              console.log("📈 Issue Status:");
              console.log(`  - Total open issues: ${issues.length}`);
              console.log("📊 By Priority:");
              Object.entries(priorityStats).forEach(([label, count]) => {
                if (count > 0) console.log(`  - ${label}: ${count}`);
              });
              
              console.log("🎯 By Area:");
              Object.entries(areaStats).forEach(([label, count]) => {
                console.log(`  - ${label}: ${count}`);
              });
              
              // Update dashboard section in README if exists
              // (Future expansion possible)
              
            } catch (error) {
              console.log(`❌ Dashboard update failed: ${error.message}`);
            }