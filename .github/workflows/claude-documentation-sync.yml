name: SafeWork 문서 자동 동기화

on:
  push:
    branches: [main, master]
    paths:
      - 'app/**/*.py'
      - 'app/templates/**'
      - 'README.md'
      - 'CLAUDE.md'
      - '.claude/**'
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '0 3 * * 0'  # 매주 일요일 12:00 KST 문서 동기화
  workflow_dispatch:
    inputs:
      documentation_scope:
        description: '문서화 범위'
        required: true
        default: 'incremental'
        type: choice
        options:
        - 'incremental'  # 변경사항만
        - 'comprehensive'  # 전체 재생성
        - 'api_only'  # API 문서만
        - 'user_guide'  # 사용자 가이드만

env:
  TIMEZONE: 'Asia/Seoul'
  PYTHON_VERSION: '3.11'

jobs:
  documentation_sync:
    name: 📚 SafeWork 문서 동기화
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
      
    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 필요 (문서 변경추적용)
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🐍 Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: 📦 문서화 도구 설치
        run: |
          pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
          pip install pydoc-markdown mkdocs-material
          
      - name: 🔍 코드 변경사항 분석
        id: changes
        run: |
          echo "📊 문서 업데이트가 필요한 변경사항 분석..."
          
          # Python 파일 변경 감지
          PYTHON_CHANGES=$(git diff --name-only HEAD~1 HEAD | grep '\.py$' | wc -l)
          TEMPLATE_CHANGES=$(git diff --name-only HEAD~1 HEAD | grep 'templates/' | wc -l)
          DOC_CHANGES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(md|rst)$' | wc -l)
          
          echo "python_changes=$PYTHON_CHANGES" >> $GITHUB_OUTPUT
          echo "template_changes=$TEMPLATE_CHANGES" >> $GITHUB_OUTPUT
          echo "doc_changes=$DOC_CHANGES" >> $GITHUB_OUTPUT
          
          echo "📈 변경사항 요약:"
          echo "  Python 파일: $PYTHON_CHANGES개"
          echo "  템플릿 파일: $TEMPLATE_CHANGES개"
          echo "  문서 파일: $DOC_CHANGES개"
          
      - name: 🔄 API 문서 자동 생성
        if: steps.changes.outputs.python_changes > 0 || github.event.inputs.documentation_scope == 'comprehensive' || github.event.inputs.documentation_scope == 'api_only'
        run: |
          echo "📖 SafeWork API 문서 자동 생성..."
          cd app
          
          python3 << 'EOF'
          import os, inspect, importlib.util
          from datetime import datetime
          
          def generate_api_doc():
              api_doc = []
              api_doc.append("# SafeWork API 문서")
              api_doc.append("")
              api_doc.append(f"**생성일시**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S KST')}")
              api_doc.append("**자동생성**: GitHub Actions를 통한 자동 문서화")
              api_doc.append("")
              
              # routes 디렉토리의 모든 Python 파일 스캔
              routes_dir = "routes"
              if os.path.exists(routes_dir):
                  api_doc.append("## 🌐 API 엔드포인트")
                  api_doc.append("")
                  
                  for file in os.listdir(routes_dir):
                      if file.endswith('.py') and not file.startswith('__'):
                          module_name = file[:-3]
                          api_doc.append(f"### {module_name.title()} 모듈")
                          api_doc.append("")
                          
                          try:
                              # 파일 내용 읽기로 라우트 정보 추출
                              with open(f"{routes_dir}/{file}", 'r', encoding='utf-8') as f:
                                  content = f.read()
                                  
                              # @route 데코레이터 찾기
                              import re
                              routes = re.findall(r"@\w+\.route\(['\"](.*?)['\"](?:,.*?)?\)", content)
                              
                              for route in routes:
                                  api_doc.append(f"- `{route}`")
                              
                              api_doc.append("")
                          except Exception as e:
                              api_doc.append(f"  *문서화 중 오류: {e}*")
                              api_doc.append("")
              
              # models.py 스캔
              if os.path.exists("models.py"):
                  api_doc.append("## 🗄️ 데이터 모델")
                  api_doc.append("")
                  
                  with open("models.py", 'r', encoding='utf-8') as f:
                      content = f.read()
                  
                  # 클래스 정의 찾기
                  import re
                  classes = re.findall(r"class (\w+)\(.*?\):", content)
                  
                  for class_name in classes:
                      api_doc.append(f"### {class_name}")
                      api_doc.append("")
                      
                      # 클래스 내 필드 찾기 (간단한 패턴 매칭)
                      class_pattern = rf"class {class_name}.*?(?=class|\Z)"
                      class_match = re.search(class_pattern, content, re.DOTALL)
                      if class_match:
                          class_content = class_match.group(0)
                          fields = re.findall(r"(\w+)\s*=\s*db\.Column", class_content)
                          
                          if fields:
                              api_doc.append("**필드**:")
                              for field in fields:
                                  api_doc.append(f"- `{field}`")
                          api_doc.append("")
              
              return "\n".join(api_doc)
          
          # API 문서 생성
          doc_content = generate_api_doc()
          
          # 문서 저장
          with open("../docs/API.md", "w", encoding='utf-8') as f:
              f.write(doc_content)
          
          print("✅ API 문서 자동 생성 완료")
          EOF
          
      - name: 📋 사용자 가이드 업데이트
        if: steps.changes.outputs.template_changes > 0 || github.event.inputs.documentation_scope == 'comprehensive' || github.event.inputs.documentation_scope == 'user_guide'
        run: |
          echo "📖 SafeWork 사용자 가이드 생성..."
          
          mkdir -p docs
          
          cat > docs/USER_GUIDE.md << 'EOF'
          # SafeWork 사용자 가이드
          
          **최종 업데이트**: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')
          
          ## 🏥 SafeWork 시스템 개요
          
          SafeWork는 산업안전보건 관리를 위한 웹 기반 시스템입니다.
          
          ### 주요 기능
          - 🔍 **설문조사 001**: 근골격계 증상 조사
          - 🩺 **설문조사 002**: 신규입사자 건강검진
          - 📊 **관리자 패널**: SafeWork 관리 시스템 (13개 모듈)
          - 📄 **문서 관리**: 버전 관리가 포함된 문서 시스템
          
          ## 🚀 시작하기
          
          ### 접속 방법
          - **운영 환경**: https://safewokr.jclee.me
          - **개발 환경**: http://localhost:4545
          
          ### 계정 생성
          1. 회원가입 페이지 접속
          2. 필수 정보 입력
          3. 이메일 인증 완료
          4. 로그인 후 이용 시작
          
          ## 📋 설문조사 이용방법
          
          ### 설문조사 001 (근골격계)
          1. 메인페이지에서 "설문조사 001" 클릭
          2. 개인정보 입력 (익명 가능)
          3. 근골격계 증상 문항 응답
          4. 제출 완료 후 결과 확인
          
          ### 설문조사 002 (건강검진)
          1. "설문조사 002" 메뉴 선택
          2. 건강검진 관련 정보 입력
          3. 기존 질환 및 약물복용 현황 작성
          4. 최종 검토 후 제출
          
          ## 👨‍💼 관리자 기능
          
          ### SafeWork 관리패널 접속
          - URL: `/admin/safework`
          - 관리자 권한 필요
          - 13개 전문 관리 모듈 제공
          
          ### 주요 관리 기능
          - 👥 **근로자 관리**: 직원 정보 등록/수정
          - 🏥 **건강검진**: 검진 결과 관리
          - 💊 **의약품 관리**: 재고 및 유통기한 관리
          - 📊 **통계 분석**: 설문 결과 분석 리포트
          
          ## 🔒 보안 및 개인정보
          
          ### 개인건강정보 보호
          - 모든 건강정보는 암호화 저장
          - 접근 권한 엄격 관리
          - 법적 요구사항 완전 준수
          
          ### 데이터 보관 정책
          - 설문 데이터: 5년 보관
          - 건강검진 데이터: 법정 보관기간 준수
          - 개인식별정보: 최소한 수집 원칙
          
          ## 🆘 도움말 및 지원
          
          ### 기술 지원
          - GitHub Issues: https://github.com/qws941/safework/issues
          - 관리자 문의: safework@company.com
          
          ### 자주 묻는 질문
          1. **Q: 설문 중 브라우저가 닫혔어요**
             A: 임시저장 기능으로 이어서 작성 가능합니다.
          
          2. **Q: 제출한 설문을 수정할 수 있나요?**
             A: 제출 후에는 수정 불가하니 신중히 작성해주세요.
          
          3. **Q: 개인정보는 안전한가요?**
             A: 모든 데이터는 암호화되어 안전하게 보관됩니다.
          
          ---
          📚 *SafeWork Documentation - 자동 생성됨*
          EOF
          
      - name: 🤖 Claude 문서 전문가 동기화
        uses: anthropics/claude-code-action@v1.0.5
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          track_progress: true
          use_sticky_comment: true
          claude_args: |
            --max-turns 8
            --model claude-3-5-sonnet-20241022
            --timeout 600
          prompt: |
            # 📚 SafeWork 문서화 전문가
            
            당신은 **SafeWork 산업안전 시스템의 문서화 전문가**입니다.
            
            ## 📖 SafeWork 문서화 컨텍스트
            - **대상 독자**: 개발자, 시스템 관리자, 최종 사용자
            - **문서 유형**: API 문서, 사용자 가이드, 기술 명세서
            - **업데이트 주기**: 코드 변경 시 자동, 주간 정기 검토
            
            ## 🎯 문서화 목표
            1. **코드 변경사항 반영** - 자동 감지된 변경사항을 문서에 반영
            2. **사용자 경험 개선** - 명확하고 이해하기 쉬운 문서 작성
            3. **문서 일관성 유지** - 전체 문서의 스타일과 구조 통일
            4. **최신성 보장** - 코드와 문서 간 불일치 제거
            
            ## 📋 문서화 작업 범위
            
            ### 변경사항 기반 업데이트
            - Python 파일 변경: ${{ steps.changes.outputs.python_changes }}개
            - 템플릿 파일 변경: ${{ steps.changes.outputs.template_changes }}개  
            - 문서 파일 변경: ${{ steps.changes.outputs.doc_changes }}개
            
            ### 문서화 우선순위
            1. **High**: API 엔드포인트 변경, 새로운 기능 추가
            2. **Medium**: UI 변경사항, 설정 파라미터 수정
            3. **Low**: 내부 리팩토링, 성능 개선
            
            ## 📝 문서 업데이트 가이드라인
            
            ### API 문서 (docs/API.md)
            - 새로운 엔드포인트 추가/변경사항 반영
            - 요청/응답 예시 업데이트
            - 에러 코드 및 처리 방법 명시
            
            ### 사용자 가이드 (docs/USER_GUIDE.md)
            - 새로운 기능 사용법 추가
            - UI 변경사항 스크린샷 업데이트
            - FAQ 섹션 확장
            
            ### 기술 문서
            - 아키텍처 변경사항 반영
            - 설치/배포 가이드 최신화
            - 개발환경 설정 업데이트
            
            **문서 동기화 실행 시각: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')**
            **범위**: ${{ github.event.inputs.documentation_scope || 'incremental' }}
            
            SafeWork 시스템의 코드 변경사항을 분석하여 관련 문서를 업데이트하고, 사용자가 이해하기 쉬운 문서로 개선해주세요. 특히 산업안전 도메인 용어와 한국어 사용자를 고려한 문서화를 진행해주세요.
            
      - name: 📊 문서 품질 검사
        run: |
          echo "🔍 문서 품질 및 일관성 검사..."
          
          # 마크다운 파일 검사
          find . -name "*.md" -type f | while read file; do
              echo "검사 중: $file"
              
              # 기본 마크다운 문법 검사
              if grep -q "^#" "$file"; then
                  echo "  ✅ 헤더 구조 확인"
              else
                  echo "  ⚠️  헤더가 없습니다"
              fi
              
              # 한글 인코딩 검사
              if file "$file" | grep -q "UTF-8"; then
                  echo "  ✅ UTF-8 인코딩 확인"
              else
                  echo "  ⚠️  인코딩 문제 가능성"
              fi
          done
          
          echo "📈 문서 통계:"
          echo "  총 마크다운 파일: $(find . -name "*.md" | wc -l)개"
          echo "  문서 총 라인 수: $(find . -name "*.md" -exec wc -l {} + | tail -1 | awk '{print $1}')"
          
      - name: 💾 문서 변경사항 커밋
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 문서 변경사항이 있는지 확인
          if git diff --quiet; then
              echo "📄 문서 변경사항 없음"
          else
              echo "📝 문서 변경사항 커밋..."
              git add docs/
              git add -A "*.md"
              
              git commit -m "📚 문서 자동 동기화 $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M KST')

          🤖 Generated with SafeWork Documentation Pipeline
          
          - 범위: ${{ github.event.inputs.documentation_scope || 'incremental' }}
          - Python 파일 변경: ${{ steps.changes.outputs.python_changes }}개
          - 템플릿 파일 변경: ${{ steps.changes.outputs.template_changes }}개
          - 자동 생성: API 문서, 사용자 가이드"
              
              git push
              echo "✅ 문서 변경사항 푸시 완료"
          fi
          
      - name: 📄 문서화 리포트 생성
        if: always()
        run: |
          cat > documentation-sync-report.md << 'EOF'
          # 📚 SafeWork 문서 동기화 리포트
          
          **동기화 일시**: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')
          **동기화 범위**: ${{ github.event.inputs.documentation_scope || 'incremental' }}
          **트리거 이벤트**: ${{ github.event_name }}
          
          ## 📊 변경사항 요약
          - Python 파일 변경: ${{ steps.changes.outputs.python_changes }}개
          - 템플릿 파일 변경: ${{ steps.changes.outputs.template_changes }}개
          - 문서 파일 변경: ${{ steps.changes.outputs.doc_changes }}개
          
          ## ✅ 완료된 작업
          - 📖 API 문서 자동 생성
          - 📋 사용자 가이드 업데이트
          - 🔍 문서 품질 검사
          - 🤖 Claude 문서 전문가 검토
          
          ## 📈 문서 현황
          - 총 마크다운 파일: $(find . -name "*.md" | wc -l)개
          - 문서화 커버리지: [Claude 분석 결과]
          
          ---
          📚 *SafeWork Documentation Sync Pipeline*
          EOF
          
      - name: 📤 문서화 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safework-documentation-reports
          path: |
            documentation-sync-report.md
            docs/
          retention-days: 30