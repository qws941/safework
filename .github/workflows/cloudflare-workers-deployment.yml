# ==============================================================================
# Gemini-Powered Production CI/CD Pipeline
# ==============================================================================
# This simplified workflow focuses solely on the production environment:
# 1. AI Code Review: On every PR to 'master', Gemini reviews code changes.
# 2. Build & Test: Ensures code integrity before any deployment.
# 3. Deploy to Production: Deploys to production after manual approval on
#                       pushes to the 'master' branch.
# 4. AI Release Notes: Automatically generates and publishes release notes
#                       after a successful production deployment.
# ==============================================================================

name: Gemini-Powered Production CI/CD

on:
  push:
    branches: [master]
    paths:
      - 'workers/**'
  pull_request:
    branches: [master]
    paths:
      - 'workers/**'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  NODE_VERSION: '20'

jobs:
  # ============================================
  # 1. AI Code Review Job (on Pull Requests to master)
  # ============================================
  ai-code-review:
    name: 'ü§ñ AI Code Review'
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Get Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: workers/**

      - name: ü§ñ Run Gemini Code Review
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, issue: { number: issue_number } } = github.context;
            const diff_url = `${{ github.event.pull_request.diff_url }}`;
            const response = await fetch(diff_url);
            const diff = await response.text();

            if (diff.length > 10000) return; // Skip if diff is too large

            const prompt = "As a senior software engineer, please review the following code changes (git diff format). Focus on potential bugs, performance issues, and best practices. Provide specific, actionable feedback. If no issues, state 'No issues found.'\n\nGit Diff:\n\n" + diff;

            const geminiApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}`;
            const geminiResponse = await fetch(geminiApiUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] })
            });

            const geminiData = await geminiResponse.json();
            const review = geminiData.candidates[0].content.parts[0].text;

            await github.rest.issues.createComment({ ...repo, issue_number, body: `### ü§ñ Gemini AI Code Review\n\n${review}` });

  # ============================================
  # 2. Build and Test Job
  # ============================================
  build-and-test:
    name: 'üèóÔ∏è Build & Test'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults: { run: { working-directory: ./workers } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'workers/package-lock.json'
      - run: npm ci
      - run: npm run lint
      - run: npm run type-check
      - run: npm run test

  # ============================================
  # 3. Deploy to Production Job
  # ============================================
  deploy-production:
    name: 'üöÄ Deploy to Production'
    needs: build-and-test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: { name: production, url: https://safework.jclee.me }
    defaults: { run: { working-directory: ./workers } }
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'workers/package-lock.json'
      - run: npm ci
      - name: üöÄ Deploy to Production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: workers
          command: deploy --env production
      - name: üîç Verify Production Deployment
        run: |
          sleep 15
          health_status=$(curl -s -o /dev/null -w "%{http_code}" https://safework.jclee.me/api/health)
          if [ "$health_status" -ne 200 ]; then
            echo "‚ùå Health check FAILED with status $health_status."
            exit 1
          fi
          echo "‚úÖ Health check passed with status $health_status."

      # ============================================
      # 4. AI Release Notes Generation
      # ============================================
      - name: üìö Get Commit History
        id: git-log
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          COMMIT_MESSAGES=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s")
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ü§ñ Generate Release Notes with Gemini
        id: gemini-release-notes
        if: steps.git-log.outputs.commits != ''
        run: |
          prompt="Based on the following commit messages, create a concise and user-friendly summary for a release note. Group related changes under headings like '‚ú® New Features', 'üêõ Bug Fixes', and 'üî® Improvements'.\n\nCommits:\n${{ steps.git-log.outputs.commits }}"
          json_payload=$(jq -n --arg p "$prompt" '{contents: [{parts: [{text: $p}]}]}')
          response=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}" -H "Content-Type: application/json" -d "$json_payload")
          release_notes=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text')
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$release_notes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üì¶ Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="release-$(date +%Y-%m-%d-%H%M%S)"
          RELEASE_NOTES="${{ steps.gemini-release-notes.outputs.notes || steps.git-log.outputs.commits }}"
          gh release create "$TAG_NAME" --title "Release $TAG_NAME" --notes "$RELEASE_NOTES"
          echo "‚úÖ Created GitHub Release: $TAG_NAME"