# ==============================================================================
# Gemini-Powered Production CI/CD Pipeline
# ==============================================================================
# This workflow implements a complete CI/CD pipeline for production:
# 1. AI Code Review: On every PR to 'master', Gemini reviews code changes.
# 2. Build & Test: Runs unit tests, linting, and type checking.
# 3. Deploy to Production: Deploys to production on pushes to 'master' branch.
# 4. AI Release Notes: Automatically generates and publishes release notes.
# 5. Post-Deployment Tests: Runs integration tests against live production.
# ==============================================================================

name: Gemini-Powered Production CI/CD

on:
  push:
    branches: [master]
    paths:
      - 'workers/**'
      - '.github/workflows/cloudflare-workers-deployment.yml'
  pull_request:
    branches: [master]
    paths:
      - 'workers/**'
      - '.github/workflows/cloudflare-workers-deployment.yml'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  NODE_VERSION: '20'

jobs:
  # ============================================
  # 1. AI Code Review Job (on Pull Requests to master)
  # ============================================
  ai-code-review:
    name: '🤖 AI Code Review'
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Get Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: workers/**

      - name: 🤖 Run Gemini Code Review
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, issue: { number: issue_number } } = github.context;
            const diff_url = `${{ github.event.pull_request.diff_url }}`;
            const response = await fetch(diff_url);
            const diff = await response.text();

            if (diff.length > 10000) return; // Skip if diff is too large

            const prompt = "As a senior software engineer, please review the following code changes (git diff format). Focus on potential bugs, performance issues, and best practices. Provide specific, actionable feedback. If no issues, state 'No issues found.'\n\nGit Diff:\n\n" + diff;

            const geminiApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}`;
            const geminiResponse = await fetch(geminiApiUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] })
            });

            const geminiData = await geminiResponse.json();
            const review = geminiData.candidates[0].content.parts[0].text;

            await github.rest.issues.createComment({ ...repo, issue_number, body: `### 🤖 Gemini AI Code Review\n\n${review}` });

  # ============================================
  # 2. Build and Test Job (Unit Tests Only)
  # ============================================
  build-and-test:
    name: '🏗️ Build & Test'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults: { run: { working-directory: ./workers } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'workers/package-lock.json'
      - run: npm ci
      - run: npm run lint
      - run: npm run type-check
      - name: 🧪 Run Unit Tests
        id: test
        run: npm run test:unit

      - name: 📢 Slack - Test Results
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "${{ steps.test.outcome == 'success' && '✅' || '❌' }} SafeWork 테스트 결과",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.test.outcome == 'success' && '✅ 테스트 통과' || '❌ 테스트 실패' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*브랜치:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*커밋:*\n`${{ github.sha }}`.substring(0, 7)
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*트리거:*\n${{ github.event_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*작성자:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|워크플로우 로그 보기>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  # ============================================
  # 3. Deploy to Production Job
  # ============================================
  deploy-production:
    name: '🚀 Deploy to Production'
    needs: build-and-test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: { name: production, url: https://safework.jclee.me }
    defaults: { run: { working-directory: ./workers } }
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'workers/package-lock.json'
      - run: npm ci
      - name: 📢 Slack - Deployment Started
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "🚀 SafeWork 배포 시작",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🚀 SafeWork 배포 시작"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*환경:*\nProduction"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*배포자:*\n${{ github.actor }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*브랜치:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*커밋:*\n<${{ github.event.head_commit.url }}|${{ github.sha }}>".substring(0, 50)
                    }
                  ]
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "📝 메시지: ${{ github.event.head_commit.message }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: 🚀 Deploy to Production
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: workers
          command: deploy

      - name: 🔍 Verify Production Deployment
        id: health-check
        run: |
          sleep 15
          health_status=$(curl -s -o /dev/null -w "%{http_code}" https://safework.jclee.me/api/health)
          if [ "$health_status" -ne 200 ]; then
            echo "❌ Health check FAILED with status $health_status."
            exit 1
          fi
          echo "✅ Health check passed with status $health_status."

      - name: 📢 Slack - Deployment Success
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "✅ SafeWork 배포 성공",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "✅ 배포 성공"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*환경:*\nProduction"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*배포자:*\n${{ github.actor }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*브랜치:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*커밋:*\n`${{ github.sha }}`.substring(0, 7)
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*URL:* <https://safework.jclee.me|https://safework.jclee.me>"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "🎉 Health check 통과 | ⏱️ 배포 완료"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: 📢 Slack - Deployment Failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "❌ SafeWork 배포 실패",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "❌ 배포 실패"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*환경:*\nProduction"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*배포자:*\n@${{ github.actor }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*브랜치:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*워크플로우:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|실패 로그 확인>"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "⚠️ 즉시 확인이 필요합니다!"
                  }
                }
              ],
              "attachments": [
                {
                  "color": "danger",
                  "footer": "SafeWork CI/CD",
                  "ts": ${{ github.event.repository.pushed_at }}
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # ============================================
      # 4. AI Release Notes Generation
      # ============================================
      - name: 📚 Get Commit History
        id: git-log
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          COMMIT_MESSAGES=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s")
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🤖 Generate Release Notes with Gemini
        id: gemini-release-notes
        if: steps.git-log.outputs.commits != ''
        run: |
          prompt="Based on the following commit messages, create a concise and user-friendly summary for a release note. Group related changes under headings like '✨ New Features', '🐛 Bug Fixes', and '🔨 Improvements'.\n\nCommits:\n${{ steps.git-log.outputs.commits }}"
          json_payload=$(jq -n --arg p "$prompt" '{contents: [{parts: [{text: $p}]}]}')
          response=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}" -H "Content-Type: application/json" -d "$json_payload")
          release_notes=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text')
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$release_notes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📦 Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="release-$(date +%Y-%m-%d-%H%M%S)"
          RELEASE_NOTES="${{ steps.gemini-release-notes.outputs.notes || steps.git-log.outputs.commits }}"
          gh release create "$TAG_NAME" --title "Release $TAG_NAME" --notes "$RELEASE_NOTES"
          echo "✅ Created GitHub Release: $TAG_NAME"

  # ============================================
  # 5. Post-Deployment Verification Tests
  # ============================================
  post-deployment-verification:
    name: '🔍 Post-Deployment Tests'
    needs: deploy-production
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults: { run: { working-directory: ./workers } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'workers/package-lock.json'
      - run: npm ci
      - name: 🧪 Run Post-Deployment Integration Tests
        run: npm run test:post-deploy
      - name: ✅ Verification Complete
        run: echo "✅ All post-deployment tests passed successfully!"
