name: 🧪 Advanced Testing & System Optimization

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'app/**'
      - 'tests/**'
      - 'requirements.txt'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Testing scope'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - 'comprehensive'
          - 'unit-tests'
          - 'integration-tests'
          - 'performance-tests'
          - 'security-tests'
          - 'msds-functionality'
          - 'survey-debugging'
      optimization_level:
        description: 'Optimization level'
        required: true
        default: 'standard'
        type: choice
        options:
          - 'standard'
          - 'aggressive'
          - 'experimental'

env:
  SAFEWORK_DEV_URL: safework-dev.jclee.me
  SAFEWORK_PROD_URL: safework.jclee.me

jobs:
  # === Phase 1: Comprehensive System Analysis ===
  system-analysis:
    name: 🔍 System Health Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🤖 Deep System Analysis & Optimization
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            🔍 **SafeWork Advanced System Analysis & Optimization**
            
            REPO: ${{ github.repository }}
            TEST_SCOPE: ${{ github.event.inputs.test_scope || 'comprehensive' }}
            OPTIMIZATION_LEVEL: ${{ github.event.inputs.optimization_level || 'standard' }}
            DEV_URL: https://${{ env.SAFEWORK_DEV_URL }}
            PROD_URL: https://${{ env.SAFEWORK_PROD_URL }}
            
            Please perform comprehensive system analysis and optimization for the SafeWork application.
            Focus on identifying and resolving critical issues, particularly the persistent Survey 500 errors
            and enhancing overall system performance and reliability.

            **1. Critical Issue Investigation**
            ```
            - Survey submission 500 error root cause analysis
            - Database schema mismatch identification and resolution
            - MSDS management system functionality verification
            - Authentication and authorization flow testing
            - Container resource utilization optimization
            ```

            **2. Performance Analysis & Optimization**
            ```
            - Database query performance profiling
            - Flask application bottleneck identification
            - Redis cache efficiency analysis
            - Docker container resource optimization
            - Static file serving optimization
            - Memory leak detection and prevention
            ```

            **3. Security Audit & Hardening**
            ```
            - SQL injection vulnerability assessment
            - XSS protection verification
            - Authentication mechanism security review
            - CSRF protection implementation (currently disabled)
            - Input validation and sanitization audit
            - File upload security verification
            ```

            **4. Code Quality & Architecture Review**
            ```
            - Code structure and organization analysis
            - Database model consistency verification
            - Route handler error handling improvement
            - Configuration management optimization
            - Logging and monitoring enhancement
            ```

            **MCP Tools Usage Instructions:**
            1. **mcp__serena__***: Comprehensive codebase analysis
               - `mcp__serena__activate_project('.')`
               - `mcp__serena__get_symbols_overview()`: Understand application structure
               - `mcp__serena__search_for_pattern()`: Find error patterns and inconsistencies
               - `mcp__serena__find_referencing_symbols()`: Analyze code dependencies

            2. **mcp__sequential-thinking__sequentialthinking**: Systematic analysis
               - Issue identification → Root cause analysis → Solution design → Implementation planning

            3. **mcp__shrimp-task-manager__***: Optimization task management
               - `mcp__shrimp-task-manager__plan_task()`: Create comprehensive optimization plan
               - `mcp__shrimp-task-manager__analyze_task()`: Technical feasibility analysis
               - `mcp__shrimp-task-manager__split_tasks()`: Break down complex optimizations

            4. **mcp__github__***: Issue management and reporting
               - `mcp__github__create_issue()`: Create detailed bug reports for identified issues
               - `mcp__github__search_issues()`: Check for existing similar issues
               - `mcp__github__add_issue_comment()`: Update progress on optimization tasks

            **Testing Scope Analysis:**

            🔍 **comprehensive**: Complete system analysis
            - All components testing and optimization
            - End-to-end functionality verification
            - Performance profiling and enhancement
            - Security audit and hardening
            - Code quality improvement recommendations

            🧪 **unit-tests**: Unit testing focus
            - Individual component testing
            - Function-level test coverage analysis
            - Mock and stub implementation verification
            - Test suite optimization and enhancement

            🔗 **integration-tests**: Integration testing focus
            - Database integration testing
            - API endpoint functionality verification
            - Service interaction testing
            - External dependency integration validation

            ⚡ **performance-tests**: Performance optimization
            - Load testing and bottleneck identification
            - Database query optimization
            - Cache efficiency improvement
            - Resource utilization optimization

            🔒 **security-tests**: Security testing and hardening
            - Vulnerability scanning and assessment
            - Authentication and authorization testing
            - Input validation and sanitization verification
            - Security configuration review

            🧪 **msds-functionality**: MSDS system testing
            - MSDS dashboard functionality verification
            - Chemical substance management testing
            - Data validation and integrity checking
            - User interface responsiveness testing

            🐛 **survey-debugging**: Survey system debugging
            - Survey 001/002 error investigation
            - Database schema alignment verification
            - Form submission flow analysis
            - Anonymous user handling optimization

            **Optimization Levels:**

            📊 **standard**: Safe, proven optimizations
            - Performance improvements with minimal risk
            - Code refactoring for better maintainability
            - Database indexing optimization
            - Basic caching implementation

            🚀 **aggressive**: Advanced optimizations
            - Significant architectural improvements
            - Advanced caching strategies
            - Database schema optimizations
            - Container orchestration enhancements

            🧪 **experimental**: Cutting-edge optimizations
            - Latest framework features implementation
            - Advanced monitoring and observability
            - AI-powered optimization suggestions
            - Experimental performance enhancements

            **Expected Deliverables:**
            1. Comprehensive system health report
            2. Critical issue identification and resolution plans
            3. Performance optimization recommendations
            4. Security enhancement strategies
            5. Code quality improvement suggestions
            6. Automated fix implementation (where safe)
            7. Detailed testing and validation results

            Perform all analysis using MCP tools systematically,
            prioritize critical issues (especially Survey 500 errors),
            and provide actionable optimization recommendations.

          claude_args: |
            --model claude-sonnet-4-20250514
            --maxTokens 16384
            --temperature 0.1
            --allowedTools "mcp__serena__*,mcp__sequential-thinking__*,mcp__shrimp-task-manager__*,mcp__github__*,mcp__exa__*,mcp__memory__*,mcp__eslint__*,mcp__code-runner__*,Bash(curl:*),Bash(grep:*),Bash(find:*),Bash(python:*),Bash(npm:*),Bash(docker:*)"
            --systemPrompt "Advanced SafeWork system analyst and optimizer. Prioritize critical error resolution, performance optimization, and system reliability. Use Korean for user-facing messages."

  # === Phase 2: Automated Testing Suite ===
  automated-testing:
    name: 🧪 Automated Test Execution
    runs-on: ubuntu-latest
    needs: system-analysis
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: safework_test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7.0
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-flask requests

      - name: ⚙️ Configure test environment
        run: |
          echo "FLASK_CONFIG=testing" >> $GITHUB_ENV
          echo "MYSQL_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "MYSQL_DATABASE=safework_test_db" >> $GITHUB_ENV
          echo "MYSQL_USER=test_user" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=test_password" >> $GITHUB_ENV
          echo "REDIS_HOST=127.0.0.1" >> $GITHUB_ENV

      - name: 🗄️ Wait for services
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 -utest_user -ptest_password --silent; then
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: 🧪 Run comprehensive test suite
        run: |
          cd app
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            app/coverage.xml
            app/htmlcov/

  # === Phase 3: Real Environment Testing ===
  live-environment-testing:
    name: 🌐 Live Environment Testing
    runs-on: ubuntu-latest
    needs: [system-analysis, automated-testing]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🌐 Live Environment Comprehensive Testing
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            🌐 **SafeWork Live Environment Testing & Validation**
            
            DEV_URL: https://${{ env.SAFEWORK_DEV_URL }}
            PROD_URL: https://${{ env.SAFEWORK_PROD_URL }}
            TEST_SCOPE: ${{ github.event.inputs.test_scope || 'comprehensive' }}
            
            Please perform comprehensive testing of SafeWork application in live environments.
            Focus on end-to-end functionality verification and real-world usage scenarios.

            **Live Testing Framework:**
            1. **Health and Availability Testing**
            2. **Survey System End-to-End Testing**
            3. **MSDS Management System Validation**
            4. **Performance and Load Testing**
            5. **Security and Authentication Testing**

            **MCP Tools for Live Testing:**
            - `mcp__sequential-thinking__sequentialthinking()`: Systematic testing approach
            - `mcp__shrimp-task-manager__plan_task()`: Test case planning and execution
            - `mcp__github__create_issue()`: Report critical issues found during testing

            **API Testing Commands:**
            ```bash
            # Health checks
            curl -f -s "${{ env.SAFEWORK_DEV_URL }}/health"
            curl -f -s "${{ env.SAFEWORK_PROD_URL }}/health"
            
            # Survey accessibility testing
            curl -f -s "${{ env.SAFEWORK_PROD_URL }}/survey/001_musculoskeletal_symptom_survey"
            curl -f -s "${{ env.SAFEWORK_PROD_URL }}/survey/002_new_employee_health_checkup_form"
            
            # Admin endpoints (authentication required)
            curl -f -s "${{ env.SAFEWORK_PROD_URL }}/admin/dashboard"
            ```

            Generate comprehensive test report with specific recommendations for issues found.

          claude_args: |
            --model claude-sonnet-4-20250514
            --maxTokens 12288
            --temperature 0.2
            --allowedTools "mcp__sequential-thinking__*,mcp__shrimp-task-manager__*,mcp__github__*,mcp__playwright__*,mcp__memory__*,Bash(curl:*),Bash(wget:*),Bash(ab:*),Bash(siege:*)"
            --systemPrompt "Live environment testing specialist. Focus on real-world usage scenarios, performance benchmarking, and user experience validation. Report critical issues immediately."

  # === Phase 4: Performance Optimization ===
  performance-optimization:
    name: ⚡ Performance Optimization
    runs-on: ubuntu-latest
    needs: [system-analysis, automated-testing, live-environment-testing]
    if: github.event.inputs.optimization_level != 'standard'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ⚡ Advanced Performance Optimization
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            ⚡ **SafeWork Advanced Performance Optimization**
            
            OPTIMIZATION_LEVEL: ${{ github.event.inputs.optimization_level }}
            ANALYSIS_RESULTS: Based on previous analysis steps
            
            Please implement advanced performance optimizations for SafeWork application
            based on the analysis results from previous steps.

            **Performance Optimization Areas:**
            1. **Database Query Optimization**
            2. **Application Code Performance Enhancement**
            3. **Caching Strategy Implementation**
            4. **Container Resource Optimization**
            5. **Frontend Performance Improvements**

            **MCP Tools for Optimization:**
            - `mcp__serena__*`: Code analysis and optimization implementation
            - `mcp__shrimp-task-manager__*`: Optimization task planning and execution
            - `mcp__sequential-thinking__*`: Systematic optimization approach

            Implement safe, proven optimizations and provide detailed performance improvement reports.

          claude_args: |
            --model claude-sonnet-4-20250514
            --maxTokens 20480
            --temperature 0.1
            --allowedTools "mcp__serena__*,mcp__shrimp-task-manager__*,mcp__sequential-thinking__*,mcp__memory__*,mcp__eslint__*,mcp__code-runner__*,mcp__exa__*,Bash(python:*),Bash(npm:*),Bash(docker:*),Bash(mysql:*)"
            --systemPrompt "Performance optimization expert for Flask/Python applications. Focus on database query optimization, caching strategies, container efficiency, and code performance. Implement safe, proven optimizations with measurable results."

  # === Phase 5: Final Report & Recommendations ===
  final-optimization-report:
    name: 📊 Final Optimization Report
    runs-on: ubuntu-latest
    needs: [system-analysis, automated-testing, live-environment-testing, performance-optimization]
    if: always()
    
    steps:
      - name: 📊 Generate Final Optimization Report
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            📊 **SafeWork Final Optimization Report Generation**
            
            SYSTEM_ANALYSIS_STATUS: ${{ needs.system-analysis.result }}
            AUTOMATED_TESTING_STATUS: ${{ needs.automated-testing.result }}
            LIVE_TESTING_STATUS: ${{ needs.live-environment-testing.result }}
            PERFORMANCE_OPTIMIZATION_STATUS: ${{ needs.performance-optimization.result }}
            
            Please generate a comprehensive final report summarizing all testing results,
            optimizations implemented, and recommendations for future improvements.

            **Report Sections:**
            1. Executive Summary
            2. Critical Issues Identified and Resolved
            3. Performance Improvements Achieved
            4. Security Enhancements Implemented
            5. Testing Results Summary
            6. Future Optimization Recommendations
            7. Maintenance and Monitoring Guidelines

            **MCP Tools for Reporting:**
            - `mcp__sequential-thinking__*`: Systematic report generation
            - `mcp__github__create_issue()`: Create follow-up issues for remaining tasks
            - `mcp__shrimp-task-manager__*`: Future task planning

            Generate actionable insights and create GitHub issues for any remaining critical problems.

          claude_args: |
            --model claude-sonnet-4-20250514
            --maxTokens 24576
            --temperature 0.3
            --allowedTools "mcp__sequential-thinking__*,mcp__github__*,mcp__shrimp-task-manager__*,mcp__memory__*,mcp__exa__*,mcp__brave-search__*"
            --systemPrompt "Technical report specialist and project coordinator. Generate comprehensive, actionable reports with clear priorities, metrics, and next steps. Create GitHub issues for follow-up tasks. Use data-driven insights and industry best practices."

      - name: 📱 Testing Completion Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: '#safework-testing'
          custom_payload: |
            {
              "attachments": [{
                "color": "${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}",
                "title": "🧪 SafeWork Advanced Testing & Optimization Complete",
                "fields": [
                  {
                    "title": "Test Scope",
                    "value": "${{ github.event.inputs.test_scope || 'comprehensive' }}",
                    "short": true
                  },
                  {
                    "title": "Optimization Level",
                    "value": "${{ github.event.inputs.optimization_level || 'standard' }}",
                    "short": true
                  },
                  {
                    "title": "System Analysis",
                    "value": "${{ needs.system-analysis.result }}",
                    "short": true
                  },
                  {
                    "title": "Automated Testing",
                    "value": "${{ needs.automated-testing.result }}",
                    "short": true
                  },
                  {
                    "title": "Live Testing",
                    "value": "${{ needs.live-environment-testing.result }}",
                    "short": true
                  },
                  {
                    "title": "Performance Optimization",
                    "value": "${{ needs.performance-optimization.result || 'Skipped' }}",
                    "short": true
                  }
                ],
                "footer": "SafeWork Advanced Testing System"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}