name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: registry.jclee.me
  IMAGE_PREFIX: safework

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      sha_short: ${{ steps.version.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Generate version info
        id: version
        run: |
          VERSION=$(cat VERSION)
          SHA_SHORT=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            VERSION="${VERSION}-${SHA_SHORT}"
          else
            VERSION="${VERSION}-dev-${SHA_SHORT}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "sha_short=${SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          
          echo "Generated version: ${VERSION}"

  test:
    runs-on: ubuntu-latest
    needs: version
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: safework_test
          MYSQL_USER: safework
          MYSQL_PASSWORD: safework2024
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd app
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-flask flake8 black
      
      - name: Run linters
        run: |
          cd app
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
        continue-on-error: true
      
      - name: Run tests
        env:
          MYSQL_HOST: localhost
          MYSQL_PORT: 3306
          MYSQL_USER: safework
          MYSQL_PASSWORD: safework2024
          MYSQL_DATABASE: safework_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          FLASK_ENV: testing
        run: |
          cd app
          pytest --cov=. --cov-report=xml --cov-report=html
        continue-on-error: true
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./app/coverage.xml
          flags: unittests
          name: codecov-safework
        continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [version, test]
    strategy:
      matrix:
        service: [app, mysql, redis]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: admin
          password: bingogo1
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.version.outputs.version }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:buildcache,mode=max
          build-args: |
            VERSION=${{ needs.version.outputs.version }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ needs.version.outputs.sha_short }}

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        service: [app, mysql, redis]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
        continue-on-error: true
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
        continue-on-error: true

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.deploy_environment == 'staging'
    environment:
      name: staging
      url: https://staging.safework.jclee.me
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to staging server
        run: |
          echo "Deploying version ${{ needs.version.outputs.version }} to staging"
          # SSH deployment or webhook trigger
          # ssh staging-server "docker pull && docker-compose up -d"
      
      - name: Health check
        run: |
          sleep 30
          curl -f https://staging.safework.jclee.me/health || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security-scan, version]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://safework.jclee.me
    steps:
      - uses: actions/checkout@v3
      
      - name: Create deployment manifest
        run: |
          cat > deploy-manifest.yml <<EOF
          version: ${{ needs.version.outputs.version }}
          services:
            - name: safework-app
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/app:${{ needs.version.outputs.version }}
              port: 4545
              replicas: 2
              health_check:
                path: /health
                interval: 30s
            - name: safework-mysql
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/mysql:${{ needs.version.outputs.version }}
              port: 3306
              replicas: 1
            - name: safework-redis
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/redis:${{ needs.version.outputs.version }}
              port: 6379
              replicas: 1
          EOF
      
      - name: Deploy via Watchtower webhook
        run: |
          curl -X POST https://watchtower.jclee.me/v1/update \
            -H "Authorization: Bearer ${{ secrets.WATCHTOWER_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "images": [
                "${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/app:${{ needs.version.outputs.version }}",
                "${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/mysql:${{ needs.version.outputs.version }}",
                "${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/redis:${{ needs.version.outputs.version }}"
              ]
            }'
        continue-on-error: true
      
      - name: Verify deployment
        run: |
          sleep 60
          for i in {1..5}; do
            if curl -f https://safework.jclee.me/health; then
              echo "Deployment successful"
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 10
          done
          echo "Deployment verification failed"
          exit 1
      
      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.version.outputs.version }}
          body: |
            ## SafeWork ${{ needs.version.outputs.version }}
            
            ### Docker Images
            - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/app:${{ needs.version.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/mysql:${{ needs.version.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/redis:${{ needs.version.outputs.version }}`
            
            ### Changes
            See [full changelog](https://github.com/${{ github.repository }}/compare/...v${{ needs.version.outputs.version }})
          files: |
            VERSION
            deploy-manifest.yml

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back to previous version"
          # Implement rollback logic
          # e.g., trigger previous stable version deployment
      
      - name: Send notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "⚠️ Deployment failed and rolled back",
              attachments: [{
                color: 'danger',
                text: 'Version ${{ needs.version.outputs.version }} deployment failed. Rolled back to previous stable version.'
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true