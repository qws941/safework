name: SafeWork Deployment with Portainer Marketplace Action

on:
  push:
    branches: [master]
    paths:
      - 'app/**'
      - 'postgres/**'
      - 'redis/**'
      - 'docker-compose.yml'
      - '.github/workflows/deploy-marketplace.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - 'production'
          - 'staging'

env:
  REGISTRY_HOST: registry.jclee.me
  REGISTRY_USER: admin
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push App image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY_HOST }}/safework/app:latest
            ${{ env.REGISTRY_HOST }}/safework/app:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.REGISTRY_HOST }}/safework/app:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY_HOST }}/safework/app:buildcache,mode=max

      - name: Build and push Postgres image
        uses: docker/build-push-action@v5
        with:
          context: ./postgres
          file: ./postgres/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY_HOST }}/safework/postgres:latest
            ${{ env.REGISTRY_HOST }}/safework/postgres:${{ env.IMAGE_TAG }}

      - name: Build and push Redis image
        uses: docker/build-push-action@v5
        with:
          context: ./redis
          file: ./redis/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY_HOST }}/safework/redis:latest
            ${{ env.REGISTRY_HOST }}/safework/redis:${{ env.IMAGE_TAG }}

  deploy-to-portainer:
    name: Deploy Stack to Portainer
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update docker-compose with image tags
        run: |
          # Update image tags in docker-compose.yml
          sed -i "s|${{ env.REGISTRY_HOST }}/safework/app:.*|${{ env.REGISTRY_HOST }}/safework/app:${{ env.IMAGE_TAG }}|g" docker-compose.yml
          sed -i "s|${{ env.REGISTRY_HOST }}/safework/postgres:.*|${{ env.REGISTRY_HOST }}/safework/postgres:${{ env.IMAGE_TAG }}|g" docker-compose.yml
          sed -i "s|${{ env.REGISTRY_HOST }}/safework/redis:.*|${{ env.REGISTRY_HOST }}/safework/redis:${{ env.IMAGE_TAG }}|g" docker-compose.yml

          echo "Updated docker-compose.yml:"
          cat docker-compose.yml

      - name: Deploy stack to Portainer
        uses: carlrygart/portainer-stack-deploy@v1
        with:
          portainer-host: ${{ secrets.PORTAINER_URL }}
          username: ${{ secrets.PORTAINER_USERNAME }}
          password: ${{ secrets.PORTAINER_PASSWORD }}
          stack-name: safework
          stack-definition: docker-compose.yml
          template-variables: |
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            FLASK_CONFIG=production
          image: ${{ env.REGISTRY_HOST }}/safework/app:${{ env.IMAGE_TAG }}
          prune: true
          pull: true

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy-to-portainer

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          echo "üîç Checking SafeWork health..."

          for i in {1..5}; do
            response=$(curl -s https://safework.jclee.me/health || echo "{}")

            if echo "$response" | grep -q "healthy"; then
              echo "‚úÖ Service is healthy!"
              echo "$response" | jq . || echo "$response"
              exit 0
            fi

            echo "Attempt $i/5 failed, waiting..."
            sleep 10
          done

          echo "‚ùå Health check failed after 5 attempts"
          exit 1

      - name: Verify endpoints
        run: |
          echo "üìä Verifying endpoints..."

          endpoints=("/" "/health" "/admin")

          for endpoint in "${endpoints[@]}"; do
            status=$(curl -s -o /dev/null -w "%{http_code}" "https://safework.jclee.me$endpoint")
            echo "  $endpoint ‚Üí HTTP $status"

            if [ "$endpoint" == "/health" ] && [ "$status" != "200" ]; then
              echo "‚ùå Critical endpoint failed!"
              exit 1
            fi
          done

          echo "‚úÖ All endpoints verified"

      - name: Send deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ SafeWork deployed successfully!"
            echo "üìç URL: https://safework.jclee.me"
            echo "üè∑Ô∏è Version: ${{ env.IMAGE_TAG }}"
          else
            echo "‚ùå Deployment failed!"
            echo "Check logs at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi