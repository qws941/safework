name: SafeWork Docker Build & Deploy

on:
  push:
    branches: [master]
    paths:
      - 'src/app/**'
      - 'infrastructure/docker/**'
      - 'docker-compose.yml'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:  # ÏàòÎèô Ïã§Ìñâ Í∞ÄÎä•
    inputs:
      deploy_to_production:
        description: 'Deploy to production after build'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  # Registry ÏÑ§Ï†ï
  REGISTRY_HOST: registry.jclee.me
  REGISTRY_USER: admin
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

  # Application ÏÑ§Ï†ï
  APP_NAME: safework
  APP_PORT: 4545

  # Database ÏÑ§Ï†ï
  DB_NAME: safework_db
  DB_USER: safework
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  # Portainer ÏÑ§Ï†ï
  PORTAINER_URL: https://portainer.jclee.me
  PORTAINER_TOKEN: ${{ secrets.PORTAINER_TOKEN }}
  PORTAINER_ENDPOINT: 3

  # Admin ÏÑ§Ï†ï
  ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
  ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

  # Security ÏÑ§Ï†ï
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

jobs:
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - name: app
            context: ./src/app
            dockerfile: ./src/app/Dockerfile
          - name: postgres
            context: ./infrastructure/docker/postgres
            dockerfile: ./infrastructure/docker/postgres/Dockerfile
          - name: redis
            context: ./infrastructure/docker/redis
            dockerfile: ./infrastructure/docker/redis/Dockerfile

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build & Push ${{ matrix.service.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}/${{ matrix.service.name }}:latest
            ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}/${{ matrix.service.name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DB_NAME=${{ env.DB_NAME }}
            DB_USER=${{ env.DB_USER }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}

  deploy:
    name: Deploy to Production via Portainer
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_production == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Stack Status
        id: check_stack
        run: |
          STACK_ID=$(curl -s -H "X-API-Key: ${{ env.PORTAINER_TOKEN }}" \
            "${{ env.PORTAINER_URL }}/api/stacks" | \
            jq -r '.[] | select(.Name == "${{ env.APP_NAME }}") | .Id')

          if [ -n "$STACK_ID" ]; then
            echo "stack_exists=true" >> $GITHUB_OUTPUT
            echo "stack_id=$STACK_ID" >> $GITHUB_OUTPUT
            echo "Stack found with ID: $STACK_ID"
          else
            echo "stack_exists=false" >> $GITHUB_OUTPUT
            echo "No existing stack found"
          fi

      - name: Prepare Docker Compose
        run: |
          # docker-compose.ymlÏùÑ ÌôòÍ≤ΩÎ≥ÄÏàòÎ°ú ÏπòÌôò
          cat docker-compose.yml | \
            sed "s/\${DB_PASSWORD:-safework2024}/${{ env.DB_PASSWORD }}/g" | \
            sed "s/\${SECRET_KEY:-safework-production-secret-key-2024}/${{ env.SECRET_KEY }}/g" | \
            sed "s/\${ADMIN_USERNAME:-admin}/${{ env.ADMIN_USERNAME }}/g" | \
            sed "s/\${ADMIN_PASSWORD:-safework2024}/${{ env.ADMIN_PASSWORD }}/g" | \
            sed "s/\${FLASK_CONFIG:-production}/production/g" \
            > /tmp/docker-compose-prod.yml

      - name: Update Existing Stack
        if: steps.check_stack.outputs.stack_exists == 'true'
        run: |
          COMPOSE_CONTENT=$(cat /tmp/docker-compose-prod.yml | jq -Rs .)

          curl -X PUT \
            -H "X-API-Key: ${{ env.PORTAINER_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ env.PORTAINER_URL }}/api/stacks/${{ steps.check_stack.outputs.stack_id }}?endpointId=${{ env.PORTAINER_ENDPOINT }}" \
            -d "{
              \"StackFileContent\": $COMPOSE_CONTENT,
              \"Prune\": false,
              \"PullImage\": true
            }"

          echo "Stack updated successfully"

      - name: Create New Stack
        if: steps.check_stack.outputs.stack_exists == 'false'
        run: |
          COMPOSE_CONTENT=$(cat /tmp/docker-compose-prod.yml | jq -Rs .)

          curl -X POST \
            -H "X-API-Key: ${{ env.PORTAINER_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ env.PORTAINER_URL }}/api/stacks/create/standalone/string?endpointId=${{ env.PORTAINER_ENDPOINT }}" \
            -d "{
              \"name\": \"${{ env.APP_NAME }}\",
              \"stackFileContent\": $COMPOSE_CONTENT
            }"

          echo "Stack created successfully"

      - name: Verify Deployment
        run: |
          echo "Waiting for services to start..."
          sleep 30

          # Health check
          for i in {1..10}; do
            if curl -s https://safework.jclee.me/health | grep -q "healthy"; then
              echo "‚úÖ Deployment successful!"
              curl -s https://safework.jclee.me/health | jq '.'
              exit 0
            fi
            echo "Waiting for health check... (attempt $i/10)"
            sleep 5
          done

          echo "‚ö†Ô∏è Health check failed after 10 attempts"
          exit 1

      - name: Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ SafeWork deployment successful!"
            echo "üåê URL: https://safework.jclee.me"
            echo "üì¶ Version: ${{ github.sha }}"
          else
            echo "‚ùå SafeWork deployment failed!"
            echo "Please check the logs for details"
          fi