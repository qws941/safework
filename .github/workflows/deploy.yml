name: SafeWork Enhanced Deployment Pipeline

on:
  push:
    branches: [master]
    paths:
      - 'src/app/**'
      - 'infrastructure/docker/**' 
      - 'scripts/**'
      - 'docker-compose.yml'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      deploy_to_production:
        description: 'Deploy to production after build'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      force_rebuild:
        description: 'Force rebuild all containers'
        required: false
        default: 'false'
        type: boolean

env:
  # Registry 설정
  REGISTRY_HOST: registry.jclee.me
  REGISTRY_USER: admin
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

  # Application 설정
  APP_NAME: safework
  APP_PORT: 4545

  # Database 설정
  DB_NAME: safework_db
  DB_USER: safework
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  # Portainer 설정 (Enhanced)
  PORTAINER_URL: https://portainer.jclee.me
  PORTAINER_API_KEY: ${{ secrets.PORTAINER_API_KEY }}
  PORTAINER_WEBHOOK_URL: ${{ secrets.PORTAINER_WEBHOOK_URL }}
  PORTAINER_ENDPOINT: 3

  # Admin 설정
  ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
  ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

  # Security 설정
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

  # Deployment 설정
  DEPLOYMENT_TIMEOUT: 600
  HEALTH_CHECK_RETRIES: 15
  PERFORMANCE_MONITORING_DURATION: 300

jobs:
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 타임아웃 추가로 무한 대기 방지

    strategy:
      matrix:
        service:
          - name: app
            context: ./src/app
            dockerfile: ./src/app/Dockerfile
          - name: postgres
            context: ./infrastructure/docker/postgres
            dockerfile: ./infrastructure/docker/postgres/Dockerfile
          - name: redis
            context: ./infrastructure/docker/redis
            dockerfile: ./infrastructure/docker/redis/Dockerfile
      fail-fast: false  # 하나의 빌드가 실패해도 다른 빌드 계속 진행

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build & Push ${{ matrix.service.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}/${{ matrix.service.name }}:latest
            ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}/${{ matrix.service.name }}:${{ github.sha }}
            ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}/${{ matrix.service.name }}:${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64  # 플랫폼 명시적 지정
          build-args: |
            DB_NAME=${{ env.DB_NAME }}
            DB_USER=${{ env.DB_USER }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}

  deploy:
    name: Enhanced Deployment via Portainer Webhook
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_production == 'true')
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Enhanced Deployment Environment
        run: |
          echo "🔧 Enhanced Deployment System v2.0 준비 중..."
          
          # Make deployment script executable
          chmod +x ./scripts/enhanced_deployment_system.sh
          
          # Verify required environment variables
          required_vars=("PORTAINER_WEBHOOK_URL" "PORTAINER_API_KEY")
          missing_vars=()
          
          for var in "${required_vars[@]}"; do
            if [ -z "${!var:-}" ]; then
              missing_vars+=("$var")
            fi
          done
          
          if [ ${#missing_vars[@]} -gt 0 ]; then
            echo "❌ Missing required environment variables: ${missing_vars[*]}"
            exit 1
          fi
          
          echo "✅ 환경 변수 검증 완료"

      - name: Deploy via Enhanced Webhook System
        env:
          PORTAINER_WEBHOOK_URL: ${{ env.PORTAINER_WEBHOOK_URL }}
          PORTAINER_API_KEY: ${{ env.PORTAINER_API_KEY }}
          PORTAINER_URL: ${{ env.PORTAINER_URL }}
          SERVICE_URL: https://safework.jclee.me
        run: |
          echo "🚀 Enhanced Webhook 배포 시작..."
          
          # Execute enhanced deployment
          if ./scripts/enhanced_deployment_system.sh webhook-only; then
            echo "✅ Webhook 배포 성공!"
          else
            echo "❌ Webhook 배포 실패"
            exit 1
          fi

      - name: Comprehensive Health Verification
        env:
          PORTAINER_API_KEY: ${{ env.PORTAINER_API_KEY }}
          PORTAINER_URL: ${{ env.PORTAINER_URL }}
        run: |
          echo "🔍 포괄적인 헬스체크 시작..."
          
          # Wait for deployment propagation
          echo "배포 전파 대기 중 (20초)..."
          sleep 20
          
          # Execute health check
          if ./scripts/enhanced_deployment_system.sh health-check; then
            echo "✅ 헬스체크 성공!"
          else
            echo "❌ 헬스체크 실패"
            
            # Collect debug information
            echo "🔍 디버그 정보 수집 중..."
            
            # Stack status
            if [ -n "$PORTAINER_API_KEY" ]; then
              echo "Portainer 스택 상태:"
              curl -s -H "X-API-Key: $PORTAINER_API_KEY" \
                "$PORTAINER_URL/api/stacks" | \
                jq '.[] | select(.Name | contains("safework")) | {Name, Status, CreationDate}' 2>/dev/null || echo "스택 정보 조회 실패"
              
              echo "컨테이너 상태:"
              curl -s -H "X-API-Key: $PORTAINER_API_KEY" \
                "$PORTAINER_URL/api/endpoints/3/docker/containers/json" | \
                jq '.[] | select(.Names[] | contains("safework")) | {Names: .Names[0], State, Status}' 2>/dev/null || echo "컨테이너 정보 조회 실패"
            fi
            
            exit 1
          fi

      - name: Performance Monitoring
        if: success()
        env:
          PORTAINER_API_KEY: ${{ env.PORTAINER_API_KEY }}
        run: |
          echo "📊 성능 모니터링 시작..."
          
          # Short performance check for CI/CD (2 minutes instead of 5)
          timeout 120 ./scripts/enhanced_deployment_system.sh monitor || {
            echo "⚠️ 성능 모니터링 타임아웃 (정상적인 CI/CD 동작)"
            
            # Quick health check instead
            response=$(curl -s -m 10 https://safework.jclee.me/health || echo "")
            if [ -n "$response" ]; then
              echo "최종 헬스체크 결과:"
              echo "$response" | jq . 2>/dev/null || echo "$response"
            fi
          }

      - name: Advanced Fallback Deployment
        if: failure()
        env:
          PORTAINER_API_KEY: ${{ env.PORTAINER_API_KEY }}
          PORTAINER_URL: ${{ env.PORTAINER_URL }}
          PORTAINER_ENDPOINT: ${{ env.PORTAINER_ENDPOINT }}
        run: |
          echo "🔄 고급 Fallback 배포 시작..."
          
          # Check if fallback script exists
          if [ -f "./scripts/backup/portainer_api_deploy_v2.0.0.sh" ]; then
            chmod +x ./scripts/backup/portainer_api_deploy_v2.0.0.sh
            
            echo "Portainer API 직접 배포 시도..."
            if ./scripts/backup/portainer_api_deploy_v2.0.0.sh deploy; then
              echo "✅ Fallback 배포 성공!"
              
              # Fallback health check
              sleep 15
              ./scripts/enhanced_deployment_system.sh health-check
            else
              echo "❌ Fallback 배포도 실패"
              exit 1
            fi
          else
            echo "⚠️ Fallback 스크립트 없음 - 수동 복구 필요"
            echo "Portainer 대시보드: $PORTAINER_URL"
            exit 1
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "📊 배포 요약 리포트"
          echo "=================="
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ SafeWork 배포 성공!"
            echo "📅 배포 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
            echo "🌐 서비스 URL: https://safework.jclee.me"
            echo "📦 이미지 버전: ${{ github.sha }}"
            echo "🚀 배포 방식: Portainer Webhook"
            echo "🏗️ 빌드 번호: ${{ github.run_number }}"
            
            # 최종 상태 확인
            echo ""
            echo "🔍 최종 서비스 상태 확인:"
            response=$(curl -s -m 10 https://safework.jclee.me/health || echo "")
            if [ -n "$response" ]; then
              echo "$response" | jq . 2>/dev/null || echo "$response"
            else
              echo "⚠️ 상태 확인 실패"
            fi
            
          elif [ -n "$(echo '${{ steps.*.outcome }}' | grep -o 'success')" ]; then
            echo "✅ SafeWork Fallback 배포 성공!"
            echo "📅 배포 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
            echo "🌐 서비스 URL: https://safework.jclee.me"  
            echo "📦 이미지 버전: ${{ github.sha }}"
            echo "🔄 배포 방식: Portainer API (Fallback)"
            echo "🏗️ 빌드 번호: ${{ github.run_number }}"
            echo "⚠️ 참고: Webhook 실패로 Fallback API 사용됨"
            
          else
            echo "❌ SafeWork 배포 실패!"
            echo "📅 실패 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
            echo "🔍 로그를 확인하여 문제를 해결하세요"
            echo "📖 문제 해결 가이드: docs/TROUBLESHOOTING.md"
            echo "🔧 Portainer 스택 상태: https://portainer.jclee.me"
          fi

      - name: Post-Deployment Monitoring
        if: success()
        run: |
          echo "📊 배포 후 성능 모니터링 시작..."
          
          # 모니터링 스크립트 실행 권한 설정
          chmod +x ./scripts/deployment_monitor.sh
          
          # 5분간 성능 모니터링 (30초 간격, 10회)
          echo "🔍 5분간 집중 모니터링 수행 중..."
          
          if ./scripts/deployment_monitor.sh monitor -i 30 -c 10 --verbose; then
            echo "✅ 배포 후 모니터링 완료 - 시스템 안정"
          else
            echo "⚠️ 모니터링에서 일부 이슈 감지됨"
            
            # 성능 리포트 생성
            echo "📋 성능 리포트 생성 중..."
            report_file=$(./scripts/deployment_monitor.sh report)
            echo "리포트 위치: $report_file"
            
            # 리포트 요약 출력
            if [ -f "$report_file" ]; then
              echo "📊 성능 리포트 요약:"
              head -20 "$report_file" | grep -E "(평균|상태|알림)" || echo "요약 정보 없음"
            fi
          fi
          
          # 최종 상태 확인
          echo ""
          echo "🎯 최종 배포 성능 확인:"
          ./scripts/deployment_monitor.sh check --verbose