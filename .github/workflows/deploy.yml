name: üöÄ SafeWork Production Deployment

# Prevent concurrent deployments
concurrency:
  group: production-deploy-${{ github.ref_name }}
  cancel-in-progress: false

on:
  push:
    branches: [master]
    paths:
      - 'app/**'
      - 'postgres/**'
      - 'redis/**'
      - 'Dockerfile*'
      - '.github/workflows/deploy-optimized.yml'

  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all containers'
        required: false
        default: false
        type: boolean

env:
  APP_NAME: safework2
  REGISTRY_HOST: registry.jclee.me
  REGISTRY_USER: admin
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  TZ: Asia/Seoul

  # Application URLs
  PRD_URL: https://safework.jclee.me
  DEV_URL: https://safework-dev.jclee.me

  # Infrastructure APIs
  PORTAINER_URL: https://portainer.jclee.me
  PORTAINER_API_KEY: ${{ secrets.PORTAINER_API_KEY }}
  WATCHTOWER_URL: https://watchtower.jclee.me
  WATCHTOWER_HTTP_API_TOKEN: ${{ secrets.WATCHTOWER_HTTP_API_TOKEN }}

  # Database Configuration
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: safework_db
  POSTGRES_USER: safework
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

permissions:
  contents: write
  actions: write
  packages: write
  security-events: write
  deployments: write

jobs:
  # Phase 1: Build Independent Containers
  build-containers:
    name: üî® Build Independent Containers
    runs-on: ubuntu-latest
    outputs:
      app_tag: ${{ steps.app_meta.outputs.tags }}
      postgres_tag: ${{ steps.postgres_meta.outputs.tags }}
      redis_tag: ${{ steps.redis_meta.outputs.tags }}

    steps:
      - name: üìÇ Checkout Repository
        uses: actions/checkout@v4

      - name: üîê Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: üè∑Ô∏è Generate Container Metadata
        id: app_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}-app
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: üè∑Ô∏è Generate Postgres Metadata
        id: postgres_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}-postgres
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: üè∑Ô∏è Generate Redis Metadata
        id: redis_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}-redis
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: üê≥ Build and Push App Container
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: ${{ steps.app_meta.outputs.tags }}
          labels: ${{ steps.app_meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VCS_URL=${{ github.server_url }}/${{ github.repository }}

      - name: üê≥ Build and Push Postgres Container
        uses: docker/build-push-action@v5
        with:
          context: ./postgres
          file: ./postgres/Dockerfile
          push: true
          tags: ${{ steps.postgres_meta.outputs.tags }}
          labels: ${{ steps.postgres_meta.outputs.labels }}

      - name: üê≥ Build and Push Redis Container
        uses: docker/build-push-action@v5
        with:
          context: ./redis
          file: ./redis/Dockerfile
          push: true
          tags: ${{ steps.redis_meta.outputs.tags }}
          labels: ${{ steps.redis_meta.outputs.labels }}

  # Phase 2: Test Container Connectivity
  test-connectivity:
    name: üîó Test Independent Container Connectivity
    runs-on: ubuntu-latest
    needs: build-containers

    steps:
      - name: üê≥ Create Test Network
        run: docker network create safework-test-network

      - name: üü¢ Start PostgreSQL Container
        run: |
          docker run -d --name test-postgres \
            --network safework-test-network \
            -e POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
            -e POSTGRES_DB=${{ env.POSTGRES_DB }} \
            -e POSTGRES_USER=${{ env.POSTGRES_USER }} \
            ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}-postgres:latest

      - name: üî¥ Start Redis Container
        run: |
          docker run -d --name test-redis \
            --network safework-test-network \
            ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}-redis:latest

      - name: ‚è±Ô∏è Wait for Database Startup
        run: sleep 30

      - name: üß™ Test PostgreSQL Connectivity
        run: |
          docker run --rm --network safework-test-network \
            postgres:15 pg_isready -h test-postgres -p 5432 -U ${{ env.POSTGRES_USER }}

      - name: üß™ Test Redis Connectivity
        run: |
          docker run --rm --network safework-test-network \
            redis:7 redis-cli -h test-redis ping

      - name: üßπ Cleanup Test Environment
        if: always()
        run: |
          docker stop test-postgres test-redis || true
          docker rm test-postgres test-redis || true
          docker network rm safework-test-network || true

  # Phase 3: Deploy via Watchtower
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-containers, test-connectivity]
    environment: production

    steps:
      - name: üîî Trigger Watchtower Auto-Deploy
        run: |
          curl -H "Authorization: Bearer ${{ env.WATCHTOWER_HTTP_API_TOKEN }}" \
               -X POST \
               "${{ env.WATCHTOWER_URL }}/v1/update"

      - name: ‚è±Ô∏è Wait for Deployment
        run: sleep 60

      - name: üè• Health Check - Production
        run: |
          for i in {1..10}; do
            if curl -f "${{ env.PRD_URL }}/health"; then
              echo "‚úÖ Production health check passed"
              exit 0
            fi
            echo "‚è≥ Waiting for production... ($i/10)"
            sleep 30
          done
          echo "‚ùå Production health check failed"
          exit 1

      - name: üìä Verify Database Connectivity
        run: |
          # Test survey submission to verify database schema fix
          response=$(curl -s -X POST "${{ env.PRD_URL }}/survey/api/submit" \
            -H "Content-Type: application/json" \
            -d '{
              "form_type": "001",
              "name": "Production Test",
              "age": 30,
              "gender": "Male",
              "years_of_service": 5,
              "employee_number": "TEST001",
              "department": "QA",
              "position": "Tester",
              "employee_id": "QA001",
              "work_years": 3,
              "work_months": 6,
              "data": {"has_symptoms": false}
            }')

          if echo "$response" | grep -q '"success": true'; then
            echo "‚úÖ Database connectivity and schema verified"
          else
            echo "‚ùå Database connectivity test failed: $response"
            exit 1
          fi

  # Phase 4: Container Health Monitoring
  monitor-deployment:
    name: üìä Monitor Container Health
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()

    steps:
      - name: üìã Check Container Status via Portainer
        run: |
          if [ -n "${{ env.PORTAINER_API_KEY }}" ]; then
            echo "üîç Checking container status..."

            containers=$(curl -s -H "X-API-Key: ${{ env.PORTAINER_API_KEY }}" \
              "${{ env.PORTAINER_URL }}/api/endpoints/2/docker/containers/json" || echo "[]")

            echo "üìä SafeWork Container Status:"
            echo "$containers" | jq -r '.[] | select(.Names[0] | contains("safework")) | "\(.Names[0]): \(.State)"' || echo "No containers found"
          else
            echo "‚ö†Ô∏è Portainer API key not configured"
          fi

      - name: üìà Performance Metrics
        run: |
          echo "üéØ Production Performance Metrics:"

          # Response time test
          start_time=$(date +%s%N)
          curl -s "${{ env.PRD_URL }}" > /dev/null
          end_time=$(date +%s%N)
          response_time=$(( (end_time - start_time) / 1000000 ))

          echo "‚ö° Homepage response time: ${response_time}ms"

          if [ $response_time -lt 3000 ]; then
            echo "‚úÖ Performance: Excellent"
          elif [ $response_time -lt 5000 ]; then
            echo "‚ö†Ô∏è Performance: Good"
          else
            echo "‚ùå Performance: Needs optimization"
          fi

  # Phase 5: Rollback on Failure
  rollback-on-failure:
    name: üîÑ Emergency Rollback
    runs-on: ubuntu-latest
    needs: [deploy-production, monitor-deployment]
    if: failure()

    steps:
      - name: üö® Rollback Deployment
        run: |
          echo "üîÑ Initiating emergency rollback..."

          # Stop current containers
          curl -H "Authorization: Bearer ${{ env.WATCHTOWER_HTTP_API_TOKEN }}" \
               -X POST \
               "${{ env.WATCHTOWER_URL }}/v1/stop"

          # Wait and restart with previous stable version
          sleep 30

          curl -H "Authorization: Bearer ${{ env.WATCHTOWER_HTTP_API_TOKEN }}" \
               -X POST \
               "${{ env.WATCHTOWER_URL }}/v1/update?rollback=true"

      - name: üÜò Create Emergency Issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® EMERGENCY: Production Deployment Failed - Auto-Rollback Initiated',
              body: `
              ## üö® Critical Deployment Failure

              **Deployment Details:**
              - Commit: ${{ github.sha }}
              - Branch: ${{ github.ref_name }}
              - Workflow: ${{ github.workflow }}
              - Run ID: ${{ github.run_id }}

              **Actions Taken:**
              - ‚úÖ Emergency rollback initiated
              - ‚úÖ Previous stable version restored
              - ‚úÖ Monitoring activated

              **Required Actions:**
              - [ ] Investigate deployment failure logs
              - [ ] Fix identified issues
              - [ ] Test in development environment
              - [ ] Re-deploy with fixes

              **Monitoring:**
              - Production URL: ${{ env.PRD_URL }}
              - Health Check: ${{ env.PRD_URL }}/health

              @qws941 Please investigate immediately.
              `,
              labels: ['critical', 'deployment', 'auto-generated', 'emergency']
            })

  # Phase 6: Success Notification
  notify-success:
    name: ‚úÖ Deployment Success Notification
    runs-on: ubuntu-latest
    needs: [deploy-production, monitor-deployment]
    if: success()

    steps:
      - name: üéâ Deployment Success
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üåê Production URL: ${{ env.PRD_URL }}"
          echo "üè• Health Check: ${{ env.PRD_URL }}/health"
          echo "üìä Container Status: All services running"
          echo "‚úÖ Database Schema: Fixed and verified"