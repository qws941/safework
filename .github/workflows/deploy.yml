name: SafeWork Docker Build & Deploy

on:
  push:
    branches: [master]
    paths:
      - 'src/app/**'
      - 'infrastructure/docker/**'
      - 'docker-compose.yml'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:  # 수동 실행 가능
    inputs:
      deploy_to_production:
        description: 'Deploy to production after build'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  # Registry 설정
  REGISTRY_HOST: registry.jclee.me
  REGISTRY_USER: admin
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

  # Application 설정
  APP_NAME: safework
  APP_PORT: 4545

  # Database 설정
  DB_NAME: safework_db
  DB_USER: safework
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  # Portainer 설정
  PORTAINER_URL: https://portainer.jclee.me
  PORTAINER_TOKEN: ${{ secrets.PORTAINER_TOKEN }}
  PORTAINER_ENDPOINT: 3

  # Admin 설정
  ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
  ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

  # Security 설정
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

jobs:
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 타임아웃 추가로 무한 대기 방지

    strategy:
      matrix:
        service:
          - name: app
            context: ./src/app
            dockerfile: ./src/app/Dockerfile
          - name: postgres
            context: ./infrastructure/docker/postgres
            dockerfile: ./infrastructure/docker/postgres/Dockerfile
          - name: redis
            context: ./infrastructure/docker/redis
            dockerfile: ./infrastructure/docker/redis/Dockerfile
      fail-fast: false  # 하나의 빌드가 실패해도 다른 빌드 계속 진행

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build & Push ${{ matrix.service.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}/${{ matrix.service.name }}:latest
            ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}/${{ matrix.service.name }}:${{ github.sha }}
            ${{ env.REGISTRY_HOST }}/${{ env.APP_NAME }}/${{ matrix.service.name }}:${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64  # 플랫폼 명시적 지정
          build-args: |
            DB_NAME=${{ env.DB_NAME }}
            DB_USER=${{ env.DB_USER }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}

  deploy:
    name: Deploy to Production via Portainer API
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_production == 'true')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy via Portainer API
        env:
          PORTAINER_URL: ${{ env.PORTAINER_URL }}
          PORTAINER_TOKEN: ${{ env.PORTAINER_TOKEN }}
          ENDPOINT_ID: ${{ env.PORTAINER_ENDPOINT }}
          STACK_NAME: ${{ env.APP_NAME }}
          REGISTRY_URL: ${{ env.REGISTRY_HOST }}
        run: |
          echo "🚀 Portainer API 배포 시작..."

          # 스크립트 실행 권한 설정
          chmod +x ./scripts/portainer_api_deploy.sh

          # 배포 실행
          ./scripts/portainer_api_deploy.sh deploy

          if [ $? -eq 0 ]; then
            echo "✅ 배포 성공!"
          else
            echo "❌ 배포 실패"
            exit 1
          fi

      - name: Verify Deployment Health
        run: |
          echo "🔍 배포 검증 중..."
          sleep 10
          ./scripts/portainer_api_deploy.sh health

      - name: Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ SafeWork deployment successful!"
            echo "🌐 URL: https://safework.jclee.me"
            echo "📦 Version: ${{ github.sha }}"
          else
            echo "❌ SafeWork deployment failed!"
            echo "Please check the logs for details"
          fi