name: SafeWork CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    paths:
      - 'app/**'
      - 'mysql/**' 
      - 'redis/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
      - 'Makefile'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: '배포할 버전 (예: 1.2.0, 비워두면 자동 생성)'
        required: false
        type: string
      environment:
        description: '배포 환경'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      target_branch:
        description: '대상 브랜치'
        required: false
        default: ''
        type: string

env:
  REGISTRY: ${{ secrets.REGISTRY_URL || 'registry.jclee.me' }}
  PROJECT: safework
  REGISTRY_USER: ${{ secrets.REGISTRY_USER || 'admin' }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.REGISTRY_USER }}
        password: ${{ env.REGISTRY_PASSWORD }}
    
    - name: Get version and environment from git
      id: version
      run: |
        # Git fetch를 먼저 수행
        git fetch --tags || true
        
        # 브랜치에 따른 환경 자동 결정
        BRANCH_NAME="${{ github.ref_name }}"
        echo "🌿 현재 브랜치: $BRANCH_NAME"
        
        # 환경 자동 매핑
        case $BRANCH_NAME in
          "main"|"master")
            AUTO_ENVIRONMENT="production"
            ENV_PREFIX=""
            ;;
          "staging")
            AUTO_ENVIRONMENT="staging"
            ENV_PREFIX="staging-"
            ;;
          "develop")
            AUTO_ENVIRONMENT="development"
            ENV_PREFIX="dev-"
            ;;
          *)
            AUTO_ENVIRONMENT="development"
            ENV_PREFIX="feature-"
            ;;
        esac
        
        # 수동 입력이 있으면 우선 적용, 없으면 브랜치 기반 자동 결정
        ENVIRONMENT="${{ github.event.inputs.environment || '$AUTO_ENVIRONMENT' }}"
        echo "🎯 배포 환경: $ENVIRONMENT (브랜치 기반: $AUTO_ENVIRONMENT)"
        
        # 수동 입력된 버전이 있는지 확인
        if [[ -n "${{ github.event.inputs.version }}" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "👤 수동 입력 버전: $VERSION"
        elif git describe --tags --exact-match HEAD 2>/dev/null; then
          VERSION=$(git describe --tags --exact-match HEAD | sed 's/^v//')
          echo "📌 Git 태그 기반 버전: $VERSION"
        else
          # 태그가 없으면 날짜 기반 버전 생성 (브랜치별 prefix 적용)
          if [[ "$ENVIRONMENT" == "production" ]]; then
            VERSION="1.$(date +%Y%m%d).$(date +%H%M)"
          else
            VERSION="${ENV_PREFIX}1.$(date +%Y%m%d).$(date +%H%M)"
          fi
          echo "🗓️ 날짜 기반 버전: $VERSION"
        fi
        
        # 환경별 태그 처리 (production이 아닌 경우에만)
        if [[ "$ENVIRONMENT" != "production" && "$VERSION" != *"-$ENVIRONMENT"* ]]; then
          VERSION="${VERSION}-${ENVIRONMENT}"
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        echo "DATE_VERSION=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "🏷️ Building SafeWork version: $VERSION ($ENVIRONMENT 환경, $BRANCH_NAME 브랜치)"
        
        # VERSION 파일도 자동 업데이트
        echo $VERSION > app/VERSION
    
    - name: Run database migrations
      run: |
        cd app
        echo "🗂️ Running database migrations..."
        python migrate.py migrate || echo "⚠️ Migration failed, but continuing deployment"
    
    - name: Build and push App image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT }}/app:latest
          ${{ env.REGISTRY }}/${{ env.PROJECT }}/app:v${{ steps.version.outputs.VERSION }}
          ${{ env.REGISTRY }}/${{ env.PROJECT }}/app:${{ steps.version.outputs.SHA_SHORT }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push MySQL image
      uses: docker/build-push-action@v5
      with:
        context: ./mysql
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT }}/mysql:latest
          ${{ env.REGISTRY }}/${{ env.PROJECT }}/mysql:v${{ steps.version.outputs.VERSION }}
          ${{ env.REGISTRY }}/${{ env.PROJECT }}/mysql:${{ steps.version.outputs.SHA_SHORT }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Redis image
      uses: docker/build-push-action@v5
      with:
        context: ./redis
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT }}/redis:latest
          ${{ env.REGISTRY }}/${{ env.PROJECT }}/redis:v${{ steps.version.outputs.VERSION }}
          ${{ env.REGISTRY }}/${{ env.PROJECT }}/redis:${{ steps.version.outputs.SHA_SHORT }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Create Release
      if: steps.version.outputs.ENVIRONMENT == 'production' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: SafeWork v${{ steps.version.outputs.VERSION }} (Production)
        body: |
          ## 🎉 SafeWork v${{ steps.version.outputs.VERSION }} 프로덕션 배포
          
          **배포 환경**: ${{ steps.version.outputs.ENVIRONMENT }}  
          **브랜치**: ${{ steps.version.outputs.BRANCH_NAME }}  
          **커밋**: ${{ github.sha }}
          
          ### 📦 Docker 이미지
          ```bash
          # 프로덕션 이미지 가져오기
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT }}/app:v${{ steps.version.outputs.VERSION }}
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT }}/mysql:v${{ steps.version.outputs.VERSION }}
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT }}/redis:v${{ steps.version.outputs.VERSION }}
          ```
          
          ### 🚀 배포 방법
          ```bash
          # Makefile 사용 (권장)
          make deploy
          
          # Docker Compose 사용
          ./docker-compose-up.sh
          
          # 간편 스크립트
          ./deploy.sh local
          ```
          
          ### 🔧 주요 기능
          - 📱 모바일 최적화 완료
          - 📊 관리자 대시보드 및 조사표 관리 시스템
          - 🔄 Git 기반 동적 버전 관리
          - 🐳 Docker Compose 지원
          - 🌿 브랜치별 자동 배포 환경 결정
          
          ### 📋 접속 정보
          - 🌐 웹사이트: http://localhost:4545
          - 👤 관리자: admin / safework2024
        draft: false
        prerelease: false
    
    - name: Create Pre-release (Staging/Development)
      if: steps.version.outputs.ENVIRONMENT != 'production' && (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: SafeWork v${{ steps.version.outputs.VERSION }} (${{ steps.version.outputs.ENVIRONMENT }})
        body: |
          ## 🧪 SafeWork v${{ steps.version.outputs.VERSION }} 테스트 배포
          
          **배포 환경**: ${{ steps.version.outputs.ENVIRONMENT }}  
          **브랜치**: ${{ steps.version.outputs.BRANCH_NAME }}  
          **커밋**: ${{ github.sha }}
          
          ⚠️ **이 버전은 테스트용입니다. 프로덕션 환경에서는 사용하지 마세요.**
          
          ### 📦 Docker 이미지
          ```bash
          # 테스트 이미지 가져오기
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT }}/app:v${{ steps.version.outputs.VERSION }}
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT }}/mysql:v${{ steps.version.outputs.VERSION }}
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT }}/redis:v${{ steps.version.outputs.VERSION }}
          ```
          
          ### 🧪 테스트 환경 배포
          ```bash
          # 테스트 환경으로 배포
          ENVIRONMENT=${{ steps.version.outputs.ENVIRONMENT }} ./docker-compose-up.sh
          ```
        draft: false
        prerelease: true
    
    - name: Create deployment info
      run: |
        cat > deployment-info.json <<EOF
        {
          "version": "v${{ steps.version.outputs.VERSION }}",
          "sha": "${{ github.sha }}",
          "sha_short": "${{ steps.version.outputs.SHA_SHORT }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "registry": "${{ env.REGISTRY }}",
          "images": {
            "app": "${{ env.REGISTRY }}/${{ env.PROJECT }}/app:v${{ steps.version.outputs.VERSION }}",
            "mysql": "${{ env.REGISTRY }}/${{ env.PROJECT }}/mysql:v${{ steps.version.outputs.VERSION }}",
            "redis": "${{ env.REGISTRY }}/${{ env.PROJECT }}/redis:v${{ steps.version.outputs.VERSION }}"
          },
          "deploy_commands": [
            "./docker-compose-up.sh",
            "./docker-run.sh"
          ]
        }
        EOF
        echo "📋 Deployment Info:"
        cat deployment-info.json
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info-v${{ steps.version.outputs.VERSION }}
        path: deployment-info.json
        retention-days: 90
    
    - name: Success notification
      if: success()
      run: |
        echo "🎉 SafeWork v${{ steps.version.outputs.VERSION }} 배포 성공!"
        echo "📦 Docker 이미지가 ${{ env.REGISTRY }}에 푸시되었습니다."
        echo "🏷️  Tags: latest, v${{ steps.version.outputs.VERSION }}, ${{ steps.version.outputs.SHA_SHORT }}"
        echo ""
        echo "🚀 배포 명령어:"
        echo "  ./docker-compose-up.sh"
        echo ""
        echo "🌐 접속 정보:"
        echo "  URL: http://localhost:4545"
        echo "  관리자: admin / safework2024"