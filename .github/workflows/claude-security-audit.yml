name: SafeWork 보안 감사 전용 워크플로우

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'app/**/*.py'
      - 'app/requirements.txt'
      - 'app/Dockerfile'
      - '.github/workflows/**'
  schedule:
    - cron: '0 2 * * *'  # 매일 11:00 KST 보안 감사
  workflow_dispatch:
    inputs:
      security_level:
        description: '보안 검사 수준'
        required: true
        default: 'standard'
        type: choice
        options:
        - 'basic'
        - 'standard'
        - 'comprehensive'

env:
  TIMEZONE: 'Asia/Seoul'
  PYTHON_VERSION: '3.11'

jobs:
  security_audit:
    name: 🔐 SafeWork 보안 감사
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
      security-events: write
      
    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 필요 (보안 분석용)
          
      - name: 🐍 Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: 📦 보안 도구 설치
        run: |
          pip install --upgrade pip
          pip install bandit safety semgrep
          pip install -r app/requirements.txt
          
      - name: 🔍 개인건강정보(PHI) 보호 검사
        run: |
          echo "🏥 SafeWork 개인건강정보 보호 검사 시작..."
          
          # 민감한 개인정보 패턴 검색
          echo "🔍 민감한 개인정보 패턴 검색:"
          grep -r -i --include="*.py" \
            -e "주민번호\|resident.*number\|ssn\|social.*security" \
            -e "개인정보\|personal.*info\|pii" \
            -e "건강정보\|health.*record\|medical.*record" \
            app/ || echo "✅ 민감한 개인정보 패턴 미발견"
            
      - name: 🛡️ Bandit 보안 취약점 스캔
        run: |
          echo "🔒 Bandit 보안 스캔 실행..."
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ -ll --exclude=app/tests/
          
      - name: 📋 Python 의존성 보안 검사
        run: |
          echo "🔍 Python 패키지 보안 취약점 검사..."
          safety check --json --output safety-report.json || true
          safety check --short-report
          
      - name: 🔬 Semgrep 코드 패턴 분석
        run: |
          echo "🧬 Semgrep 정적 코드 분석..."
          semgrep --config=auto app/ --json --output=semgrep-report.json || true
          
      - name: 🔑 하드코딩된 시크릿 검사
        run: |
          echo "🕵️ 하드코딩된 시크릿 검사..."
          
          # 일반적인 시크릿 패턴
          grep -r -E --include="*.py" \
            "(password|passwd|pwd|secret|key|token|api_key)\s*=\s*['\"][^'\"]{8,}" \
            app/ && echo "⚠️  잠재적 하드코딩된 시크릿 발견" || \
            echo "✅ 하드코딩된 시크릿 미발견"
            
      - name: 📊 Flask 보안 설정 검사
        run: |
          echo "🔧 Flask 보안 설정 검사..."
          python3 << 'EOF'
          import os
          import ast
          
          security_checks = {
              'SECRET_KEY': False,
              'CSRF_PROTECTION': False,
              'SECURE_COOKIES': False,
              'SESSION_PROTECTION': False
          }
          
          # config.py 파일 분석
          config_files = ['app/config.py', 'app/app.py']
          for config_file in config_files:
              if os.path.exists(config_file):
                  with open(config_file, 'r', encoding='utf-8') as f:
                      content = f.read()
                      if 'SECRET_KEY' in content and 'os.environ' in content:
                          security_checks['SECRET_KEY'] = True
                      if 'CSRFProtect' in content or 'csrf' in content.lower():
                          security_checks['CSRF_PROTECTION'] = True
                      if 'SECURE' in content and 'COOKIE' in content:
                          security_checks['SECURE_COOKIES'] = True
                      if 'SESSION_PROTECTION' in content:
                          security_checks['SESSION_PROTECTION'] = True
          
          print("🛡️ Flask 보안 설정 검사 결과:")
          for check, status in security_checks.items():
              status_icon = "✅" if status else "⚠️"
              print(f"{status_icon} {check}: {status}")
          EOF
          
      - name: 🤖 Claude 보안 전문가 분석
        uses: anthropics/claude-code-action@v1.0.5
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          track_progress: true
          use_sticky_comment: true
          claude_args: |
            --max-turns 8
            --model claude-3-5-sonnet-20241022
            --timeout 600
          prompt: |
            # 🔐 SafeWork 보안 전문가 (개인건강정보 전담)
            
            당신은 **SafeWork 산업안전 시스템의 보안 전문가**입니다.
            
            ## 🏥 SafeWork 보안 컨텍스트
            - **도메인**: 산업안전보건 관리 (개인건강정보 처리)
            - **규정**: 개인정보보호법, 의료법, 산업안전보건법
            - **민감정보**: 근골격계 증상, 건강검진 데이터, 개인식별정보
            
            ## 🎯 보안 감사 목표
            1. **개인건강정보(PHI) 보호** - 암호화, 접근제어, 로깅
            2. **Flask 웹보안** - CSRF, XSS, SQL Injection 방지
            3. **인증/권한** - 사용자 권한 분리, 세션 보안
            4. **데이터 유출 방지** - 로그 노출, 디버그 정보 제거
            5. **컴플라이언스** - 법적 요구사항 준수
            
            ## 📋 보안 감사 수행사항
            1. **코드 취약점 분석** (Bandit, Safety, Semgrep 결과 활용)
            2. **개인건강정보 처리 로직 검토**
            3. **Flask 보안 설정 평가**
            4. **인증/권한 체계 분석**
            5. **보안 개선 권장사항 제시**
            
            **현재 KST 시각: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S')**
            
            SafeWork 시스템의 보안 감사를 수행하고 개인건강정보 보호에 중점을 둔 상세한 보안 분석 리포트를 작성해주세요.
            
      - name: 📄 보안 감사 리포트 생성
        if: always()
        run: |
          echo "📊 SafeWork 보안 감사 리포트 생성..."
          
          cat > security-audit-report.md << 'EOF'
          # 🔐 SafeWork 보안 감사 리포트
          
          **감사 일시**: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')
          **감사 범위**: 전체 애플리케이션 코드베이스
          **보안 수준**: ${{ github.event.inputs.security_level || 'standard' }}
          
          ## 📋 보안 검사 항목
          
          ### 🏥 개인건강정보(PHI) 보호
          - ✅ 민감한 개인정보 패턴 검색 완료
          - ✅ 건강정보 처리 로직 검토 완료
          
          ### 🛡️ 웹 애플리케이션 보안
          - ✅ Bandit 정적 분석 완료
          - ✅ Python 의존성 보안 검사 완료
          - ✅ Semgrep 코드 패턴 분석 완료
          
          ### 🔑 인증 및 권한
          - ✅ Flask 보안 설정 검사 완료
          - ✅ 하드코딩된 시크릿 검사 완료
          
          ## 🎯 개선 권장사항
          [Claude 분석 결과가 여기에 추가됩니다]
          
          ---
          🤖 *SafeWork Security Audit Pipeline - 개인건강정보 보호 특화*
          EOF
          
      - name: 📤 보안 감사 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safework-security-audit-reports
          path: |
            security-audit-report.md
            bandit-report.json
            safety-report.json
            semgrep-report.json
          retention-days: 30