name: ü§ñ Automated Issue Handler

on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to analyze'
        required: true
        type: number
      analysis_type:
        description: 'Analysis type'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - 'comprehensive'
          - 'bug-report'
          - 'feature-request'
          - 'security-issue'
          - 'performance-issue'

jobs:
  issue-analysis:
    name: üîç Issue Analysis & Auto-Response
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'issue_comment' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: ü§ñ Intelligent Issue Analysis
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            ü§ñ **SafeWork Issue Analysis & Automated Response System**
            
            REPOSITORY: ${{ github.repository }}
            ISSUE_NUMBER: ${{ github.event.issue.number || github.event.inputs.issue_number }}
            ISSUE_TITLE: "${{ github.event.issue.title }}"
            ISSUE_BODY: "${{ github.event.issue.body }}"
            ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
            ANALYSIS_TYPE: ${{ github.event.inputs.analysis_type || 'comprehensive' }}
            
            Please analyze the GitHub issue and provide intelligent automated response and resolution.
            Focus on SafeWork-specific domain knowledge including Flask application, survey systems,
            Docker deployment, database management, and MSDS functionality.

            **Issue Analysis Framework:**

            **1. Issue Classification & Triage**
            ```
            - Issue type identification (bug, feature, security, performance, documentation)
            - Severity assessment (critical, high, medium, low)
            - Component mapping (backend, frontend, database, deployment, security)
            - Priority scoring based on user impact and system criticality
            ```

            **2. Context Analysis**
            ```
            - Related SafeWork functionality analysis
            - Similar historical issue patterns
            - Affected system components identification
            - Technical complexity assessment
            ```

            **3. Automated Response Generation**
            ```
            - Initial acknowledgment response
            - Technical analysis and diagnosis
            - Step-by-step resolution guidance
            - Workaround suggestions (if applicable)
            - Additional information requests
            ```

            **MCP Tools Usage Instructions:**
            1. **mcp__serena__***: Codebase analysis for issue context
               - `mcp__serena__activate_project('.')`
               - `mcp__serena__search_for_pattern()`: Search for related code patterns
               - `mcp__serena__find_symbol()`: Locate relevant functions/classes

            2. **mcp__sequential-thinking__sequentialthinking**: Systematic issue analysis
               - Issue understanding ‚Üí Context gathering ‚Üí Solution planning ‚Üí Response crafting

            3. **mcp__shrimp-task-manager__***: Resolution planning
               - `mcp__shrimp-task-manager__plan_task()`: Create resolution task plan
               - `mcp__shrimp-task-manager__analyze_task()`: Technical feasibility analysis
               - `mcp__shrimp-task-manager__split_tasks()`: Break down complex fixes

            4. **mcp__github__***: GitHub interaction
               - `mcp__github__add_issue_comment()`: Post analysis and response
               - `mcp__github__update_issue()`: Update labels and status
               - `mcp__github__search_issues()`: Find similar issues

            **SafeWork-Specific Domain Knowledge:**
            - Survey system (001 Musculoskeletal, 002 New Employee Health)
            - Flask application architecture with SQLAlchemy
            - Docker containerization (app, mysql, redis containers)
            - Admin panel with 13 specialized management sections
            - MSDS (Material Safety Data Sheet) management system
            - Document management with version control
            - User authentication and role-based access
            - Database migration system
            - Watchtower-based deployment

            **Analysis Scenarios:**

            üîç **comprehensive**: Complete issue analysis and resolution
            - Full context analysis with codebase search
            - Technical root cause analysis
            - Comprehensive resolution plan
            - Similar issue pattern analysis

            üêõ **bug-report**: Bug-specific analysis
            - Error reproduction steps analysis
            - Code path investigation
            - Fix suggestion and testing guidance
            - Regression prevention measures

            üöÄ **feature-request**: Feature analysis
            - Feasibility assessment
            - Implementation complexity analysis
            - Architecture impact evaluation
            - Development timeline estimation

            üîí **security-issue**: Security-focused analysis
            - Vulnerability assessment
            - Impact analysis and risk scoring
            - Immediate mitigation steps
            - Long-term security improvements

            ‚ö° **performance-issue**: Performance analysis
            - Bottleneck identification
            - Performance profiling guidance
            - Optimization recommendations
            - Monitoring setup suggestions

            **Automated Actions to Perform:**
            1. Analyze issue content and classify appropriately
            2. Add relevant labels (bug, feature, security, etc.)
            3. Set appropriate priority based on impact analysis
            4. Search codebase for relevant context
            5. Generate detailed technical response
            6. Create action items and resolution plan
            7. Suggest immediate workarounds if applicable
            8. Set up tracking for resolution progress

            Provide comprehensive analysis with specific, actionable guidance
            tailored to SafeWork's architecture and domain requirements.

          claude_args: |
            --model claude-opus-4-1-20250805
            --allowedTools "mcp__serena__*,mcp__sequential-thinking__*,mcp__shrimp-task-manager__*,mcp__github__*,mcp__exa__*"

  security-issue-escalation:
    name: üîí Security Issue Auto-Escalation
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'security') || contains(github.event.issue.title, 'security') || contains(github.event.issue.title, 'vulnerability')
    
    steps:
      - name: üö® Security Issue Alert
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            üö® **SECURITY ALERT: SafeWork Security Issue Auto-Escalation**
            
            ISSUE_NUMBER: ${{ github.event.issue.number }}
            ISSUE_TITLE: "${{ github.event.issue.title }}"
            ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
            
            A potential security issue has been identified in SafeWork.
            Please perform immediate security assessment and escalation.

            **Security Analysis Tasks:**
            1. Assess security impact and severity
            2. Identify affected components and attack vectors
            3. Generate immediate mitigation steps
            4. Create security incident response plan
            5. Prepare detailed security briefing

            **MCP Tools Usage:**
            - `mcp__shrimp-task-manager__plan_task()`: Security response planning
            - `mcp__sequential-thinking__sequentialthinking()`: Risk assessment
            - `mcp__github__update_issue()`: Mark as high priority security issue

            Generate comprehensive security analysis and immediate action plan.
            This is a high-priority security matter requiring urgent attention.

          claude_args: |
            --model claude-opus-4-1-20250805
            --allowedTools "mcp__shrimp-task-manager__*,mcp__sequential-thinking__*,mcp__github__*"

      - name: üìß Security Alert Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "üö® URGENT: SafeWork Security Issue #${{ github.event.issue.number }}"
          to: ${{ secrets.SECURITY_ALERT_EMAIL }}
          from: SafeWork Security <noreply@jclee.me>
          body: |
            URGENT: A security issue has been reported in SafeWork repository.
            
            Issue: #${{ github.event.issue.number }}
            Title: ${{ github.event.issue.title }}
            Reporter: ${{ github.event.issue.user.login }}
            URL: ${{ github.event.issue.html_url }}
            
            Please review immediately and take appropriate security measures.

  performance-issue-analyzer:
    name: ‚ö° Performance Issue Analyzer  
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'performance') || contains(github.event.issue.title, 'slow') || contains(github.event.issue.title, 'performance')
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: ‚ö° Performance Issue Analysis
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            ‚ö° **SafeWork Performance Issue Deep Analysis**
            
            ISSUE_NUMBER: ${{ github.event.issue.number }}
            ISSUE_CONTENT: "${{ github.event.issue.body }}"
            
            A performance issue has been reported. Please conduct thorough analysis
            focusing on SafeWork's Flask application, database queries, and system bottlenecks.

            **Performance Analysis Framework:**
            1. Identify potential bottlenecks in codebase
            2. Analyze database query patterns  
            3. Review caching strategies (Redis usage)
            4. Assess container resource allocation
            5. Examine survey form processing efficiency

            **MCP Tools for Performance Analysis:**
            - `mcp__serena__search_for_pattern()`: Find slow query patterns
            - `mcp__serena__find_symbol()`: Analyze suspect functions
            - `mcp__sequential-thinking__sequentialthinking()`: Systematic bottleneck analysis

            Generate comprehensive performance optimization recommendations
            with specific code improvements and infrastructure adjustments.

          claude_args: |
            --model claude-opus-4-1-20250805  
            --allowedTools "mcp__serena__*,mcp__sequential-thinking__*,mcp__shrimp-task-manager__*,mcp__github__*"