name: Claude

on:
  issues:
    types: [opened, edited, reopened]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, edited, synchronize, reopened]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: false
        type: string
      pr_number:
        description: 'Pull request number to process'  
        required: false
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read
  checks: read
  discussions: read
  repository-projects: read
  id-token: write

jobs:
  claude:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    # Advanced conditions for intelligent triggering
    if: |
      (github.event_name == 'issues' && 
       (github.event.action == 'opened' || 
        github.event.action == 'edited' || 
        github.event.action == 'reopened')) ||
      (github.event_name == 'issue_comment' && 
       github.event.action == 'created' && 
       (contains(github.event.comment.body, '@claude') || 
        contains(github.event.comment.body, 'claude'))) ||
      (github.event_name == 'pull_request' && 
       (github.event.action == 'opened' || 
        github.event.action == 'edited' || 
        github.event.action == 'synchronize' || 
        github.event.action == 'reopened')) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Event Debug
        run: |
          echo "üîç Event debugging information:"
          echo "Event name: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "Issue number: ${{ github.event.issue.number }}"
            echo "Issue title: ${{ github.event.issue.title }}"
            echo "Issue author: ${{ github.event.issue.user.login }}"
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "Issue number: ${{ github.event.issue.number }}"
            echo "Comment author: ${{ github.event.comment.user.login }}"
            echo "Comment contains @claude: $(echo '${{ github.event.comment.body }}' | grep -q '@claude' && echo 'yes' || echo 'no')"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR number: ${{ github.event.pull_request.number }}"
            echo "PR title: ${{ github.event.pull_request.title }}"
            echo "PR author: ${{ github.event.pull_request.user.login }}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger"
            echo "Issue number: ${{ github.event.inputs.issue_number }}"
            echo "PR number: ${{ github.event.inputs.pr_number }}"
          fi

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Context Analysis
        id: context
        run: |
          echo "üß† SafeWork context analysis..."
          
          # Initialize variables
          context_type="general"
          domain_context=""
          korean_context=""
          
          # Extract content for analysis with proper escaping
          if [ "${{ github.event_name }}" = "issues" ]; then
            title=$(echo '${{ github.event.issue.title }}' | sed 's/"/\\"/g')
            body=$(echo '${{ github.event.issue.body }}' | sed 's/"/\\"/g')
            content="$title $body"
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            comment=$(echo '${{ github.event.comment.body }}' | sed 's/"/\\"/g')
            issue_title=$(echo '${{ github.event.issue.title }}' | sed 's/"/\\"/g')
            content="$comment $issue_title"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            pr_title=$(echo '${{ github.event.pull_request.title }}' | sed 's/"/\\"/g')
            pr_body=$(echo '${{ github.event.pull_request.body }}' | sed 's/"/\\"/g')
            content="$pr_title $pr_body"
            context_type="pull_request"
          fi
          
          # SafeWork domain detection
          if echo "$content" | grep -qi -E "(ÏÑ§Î¨∏|survey|001|002|Í∑ºÍ≥®Í≤©|musculoskeletal)"; then
            domain_context="survey_system"
          elif echo "$content" | grep -qi -E "(Í¥ÄÎ¶¨Ïûê|admin|safework|dashboard)"; then
            domain_context="admin_system"
          elif echo "$content" | grep -qi -E "(ÏùòÎ£å|health|medical|Í≤ÄÏßÑ|medication)"; then
            domain_context="medical_system"
          elif echo "$content" | grep -qi -E "(Î¨∏ÏÑú|document|upload|download)"; then
            domain_context="document_system"
          elif echo "$content" | grep -qi -E "(api|Ïó∞Îèô|integration)"; then
            domain_context="api_system"
          elif echo "$content" | grep -qi -E "(Ïù∏Ï¶ù|auth|login|password)"; then
            domain_context="auth_system"
          elif echo "$content" | grep -qi -E "(Î∞∞Ìè¨|deploy|docker|watchtower)"; then
            domain_context="deployment_system"
          fi
          
          # Korean language detection
          if echo "$content" | grep -q '[Í∞Ä-Ìû£]'; then
            korean_context="detected"
          fi
          
          echo "context_type=$context_type" >> $GITHUB_OUTPUT
          echo "domain_context=$domain_context" >> $GITHUB_OUTPUT
          echo "korean_context=$korean_context" >> $GITHUB_OUTPUT
          
          echo "üìã Context analysis results:"
          echo "  - Type: $context_type"
          echo "  - Domain: $domain_context"
          echo "  - Korean: $korean_context"

      - name: Claude Code Action
        uses: anthropics/claude-code-action@v1
        with:
          # Authentication using OAuth token
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # Advanced configuration
          track_progress: ${{ github.event_name != 'workflow_dispatch' }}
          use_sticky_comment: true
          use_commit_signing: false
          
          # Dynamic prompts based on context
          prompt: |
            You are Claude, an AI assistant specialized in SafeWork industrial health & safety management system.
            
            ## System Context
            SafeWork is a Flask 3.0+ application managing Korean workplace health surveys, medical checkups, and safety administration.
            
            **Core Components:**
            - Survey System: 001 (musculoskeletal), 002 (new employee health)
            - SafeWork Admin: 13 specialized panels (workers, health checks, medications, etc.)
            - Document Management: Version control, access logging
            - API v2: RESTful endpoints for external integrations
            - Database: MySQL 8.0 UTF8MB4, Redis 5.0 caching
            - Deployment: Docker + Watchtower on registry.jclee.me
            
            **Domain Context Detected:** ${{ steps.context.outputs.domain_context }}
            **Event Type:** ${{ github.event_name }}
            **Korean Language:** ${{ steps.context.outputs.korean_context }}
            
            ## Response Guidelines
            - Use Korean for user communication when Korean content detected
            - Provide specific file paths (e.g., `app/routes/admin.py:123`)
            - Include deployment considerations for production changes
            - Reference SafeWork domain expertise in solutions
            - Always test solutions against MySQL 8.0 UTF8MB4 compatibility
            
            ## Current Task Analysis
            Please analyze the current GitHub event and provide appropriate assistance based on the SafeWork domain context detected above.

      - name: Notification
        if: always()
        run: |
          echo "üéØ Claude Code Action completed"
          echo "Event: ${{ github.event_name }}"
          echo "Context: ${{ steps.context.outputs.domain_context }}"
          echo "Status: ${{ job.status }}"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ SafeWork AI automation successful"
          else
            echo "‚ö†Ô∏è SafeWork AI automation completed with issues"
          fi