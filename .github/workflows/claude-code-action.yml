name: Claude AI

on:
  issues:
    types: [opened, edited, reopened]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, edited, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: false
        type: string
      pr_number:
        description: 'Pull request number to process'  
        required: false
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read
  checks: read
  discussions: read
  repository-projects: read
  id-token: write

jobs:
  claude-ai-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    # Advanced conditions for intelligent triggering
    if: |
      (github.event_name == 'issues' && 
       (github.event.action == 'opened' || 
        github.event.action == 'edited' || 
        github.event.action == 'reopened')) ||
      (github.event_name == 'issue_comment' && 
       github.event.action == 'created' && 
       (contains(github.event.comment.body, '@claude') || 
        contains(github.event.comment.body, 'claude'))) ||
      (github.event_name == 'pull_request' && 
       (github.event.action == 'opened' || 
        github.event.action == 'edited' || 
        github.event.action == 'synchronize' || 
        github.event.action == 'reopened')) ||
      (github.event_name == 'pull_request_review' && 
       github.event.action == 'submitted') ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Debug Event Information
        run: |
          echo "🔍 Event debugging information:"
          echo "Event name: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "Issue number: ${{ github.event.issue.number }}"
            echo "Issue title: ${{ github.event.issue.title }}"
            echo "Issue author: ${{ github.event.issue.user.login }}"
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "Issue number: ${{ github.event.issue.number }}"
            echo "Comment author: ${{ github.event.comment.user.login }}"
            echo "Comment contains @claude: $(echo '${{ github.event.comment.body }}' | grep -q '@claude' && echo 'yes' || echo 'no')"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR number: ${{ github.event.pull_request.number }}"
            echo "PR title: ${{ github.event.pull_request.title }}"
            echo "PR author: ${{ github.event.pull_request.user.login }}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger"
            echo "Issue number: ${{ github.event.inputs.issue_number }}"
            echo "PR number: ${{ github.event.inputs.pr_number }}"
          fi

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SafeWork Context Analysis & Prompt Selection
        id: context
        run: |
          echo "🧠 SafeWork context analysis..."
          
          # Initialize variables
          context_type="general"
          domain_context=""
          korean_context=""
          
          # Extract content for analysis
          if [ "${{ github.event_name }}" = "issues" ]; then
            title="${{ github.event.issue.title }}"
            body="${{ github.event.issue.body }}"
            content="$title $body"
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            comment="${{ github.event.comment.body }}"
            issue_title="${{ github.event.issue.title }}"
            content="$comment $issue_title"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            pr_title="${{ github.event.pull_request.title }}"
            pr_body="${{ github.event.pull_request.body }}"
            content="$pr_title $pr_body"
            context_type="pull_request"
          fi
          
          # SafeWork domain detection
          if echo "$content" | grep -qi -E "(설문|survey|001|002|근골격|musculoskeletal)"; then
            domain_context="survey_system"
          elif echo "$content" | grep -qi -E "(관리자|admin|safework|dashboard)"; then
            domain_context="admin_system"
          elif echo "$content" | grep -qi -E "(의료|health|medical|검진|medication)"; then
            domain_context="medical_system"
          elif echo "$content" | grep -qi -E "(문서|document|upload|download)"; then
            domain_context="document_system"
          elif echo "$content" | grep -qi -E "(api|연동|integration)"; then
            domain_context="api_system"
          elif echo "$content" | grep -qi -E "(인증|auth|login|password)"; then
            domain_context="auth_system"
          elif echo "$content" | grep -qi -E "(배포|deploy|docker|watchtower)"; then
            domain_context="deployment_system"
          fi
          
          # Korean language detection
          if echo "$content" | grep -q '[가-힣]'; then
            korean_context="detected"
          fi
          
          echo "context_type=$context_type" >> $GITHUB_OUTPUT
          echo "domain_context=$domain_context" >> $GITHUB_OUTPUT
          echo "korean_context=$korean_context" >> $GITHUB_OUTPUT
          
          echo "📋 Context analysis results:"
          echo "  - Type: $context_type"
          echo "  - Domain: $domain_context"
          echo "  - Korean: $korean_context"

      - name: Advanced Claude Code Action with Domain Intelligence
        uses: anthropics/claude-code-action@v1
        with:
          # Authentication using OAuth token
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # Advanced configuration
          track_progress: ${{ github.event_name != 'workflow_dispatch' }}
          use_sticky_comment: true
          use_commit_signing: false
          
          # Dynamic prompts based on context
          prompt: |
            You are Claude, an AI assistant specialized in SafeWork industrial health & safety management system.
            
            ## System Context
            SafeWork is a Flask 3.0+ application managing Korean workplace health surveys, medical checkups, and safety administration.
            
            **Core Components:**
            - Survey System: 001 (musculoskeletal), 002 (new employee health)
            - SafeWork Admin: 13 specialized panels (workers, health checks, medications, etc.)
            - Document Management: Version control, access logging
            - API v2: RESTful endpoints for external integrations
            - Database: MySQL 8.0 UTF8MB4, Redis 5.0 caching
            - Deployment: Docker + Watchtower on registry.jclee.me
            
            **Domain Context Detected:** ${{ steps.context.outputs.domain_context }}
            **Event Type:** ${{ github.event_name }}
            **Korean Language:** ${{ steps.context.outputs.korean_context }}
            
            ## Specialized Instructions by Domain
            
            ### Survey System (001/002)
            - Focus on form validation, conditional logic (JavaScript), Korean UI
            - Body parts: 16 regions with pain scale (1-5)
            - Anonymous submissions supported (user_id=1)
            - MySQL KST timezone handling
            
            ### Admin System  
            - 13 SafeWork panels: workers, health_checks, medical_visits, medications, consultations, health_programs, special_management, environment_measurements, risk_assessment, msds, protective_equipment, education, certifications
            - Bootstrap 4.6 UI, jQuery AJAX, CSRF protection
            - Pagination (20 items/page), audit logging
            
            ### Medical System
            - PHI (Personal Health Information) compliance
            - Medication expiry tracking, dosage management  
            - Integration with health checkup workflows
            
            ### Document System
            - Version control, access logs, category management
            - Public/private/admin permissions
            - File upload security, Korean filename support
            
            ### API System
            - RESTful v2 endpoints: /api/safework/v2/*
            - CRUD operations for all SafeWork entities
            - JSON responses, proper HTTP status codes
            
            ### Auth System
            - Flask-Login integration, session management
            - @login_required decorators, role-based access
            - Password security, rate limiting
            
            ### Deployment System
            - Docker multi-platform builds (amd64/arm64)
            - Watchtower automatic updates
            - GitHub Actions → registry.jclee.me → production
            
            ## Task Priority Rules
            1. **Critical Issues**: Security, PHI leaks, service outages
            2. **High Priority**: Survey submission errors, admin panel failures  
            3. **Medium Priority**: UI improvements, performance optimization
            4. **Low Priority**: Documentation, code refactoring
            
            ## Response Guidelines
            - Use Korean for user communication when Korean content detected
            - Provide specific file paths (e.g., `app/routes/admin.py:123`)
            - Include deployment considerations for production changes
            - Reference SafeWork domain expertise in solutions
            - Always test solutions against MySQL 8.0 UTF8MB4 compatibility
            
            ## Current Task Analysis
            Please analyze the current GitHub event and provide appropriate assistance based on the SafeWork domain context detected above.

      - name: Post-Processing & Slack Notification
        if: always()
        run: |
          echo "🎯 Claude Code Action completed"
          echo "Event: ${{ github.event_name }}"
          echo "Context: ${{ steps.context.outputs.domain_context }}"
          echo "Status: ${{ job.status }}"
          
          # Slack notification
          if [ "${{ job.status }}" = "success" ]; then
            STATUS_EMOJI="✅"
            STATUS_TEXT="successful"
            COLOR="good"
            echo "✅ SafeWork AI automation successful"
          else
            STATUS_EMOJI="⚠️"
            STATUS_TEXT="completed with issues"
            COLOR="warning"
            echo "⚠️ SafeWork AI automation completed with issues"
          fi
          
          # Prepare Slack message
          SLACK_MESSAGE="{
            \"attachments\": [{
              \"color\": \"$COLOR\",
              \"title\": \"$STATUS_EMOJI SafeWork Claude AI - $STATUS_TEXT\",
              \"fields\": [
                {\"title\": \"Event\", \"value\": \"${{ github.event_name }}\", \"short\": true},
                {\"title\": \"Context\", \"value\": \"${{ steps.context.outputs.domain_context }}\", \"short\": true},
                {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true},
                {\"title\": \"Actor\", \"value\": \"${{ github.actor }}\", \"short\": true}
              ],
              \"footer\": \"SafeWork Automation\",
              \"ts\": $(date +%s)
            }]
          }"
          
          # Send to Slack using OAuth Token
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-type: application/json" \
            --data "{
              \"channel\": \"#safework-alerts\",
              \"text\": \"$STATUS_EMOJI SafeWork Claude AI - $STATUS_TEXT\",
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"SafeWork Automation Report\",
                \"fields\": [
                  {\"title\": \"Event\", \"value\": \"${{ github.event_name }}\", \"short\": true},
                  {\"title\": \"Context\", \"value\": \"${{ steps.context.outputs.domain_context }}\", \"short\": true},
                  {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true},
                  {\"title\": \"Actor\", \"value\": \"${{ github.actor }}\", \"short\": true}
                ],
                \"footer\": \"SafeWork Automation\",
                \"ts\": $(date +%s)
              }]
            }" \
https://slack.com/api/chat.postMessage
          
          # Trigger deployment workflow if changes were made
          if [ "${{ job.status }}" = "success" ] && [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "🚀 Changes detected - deployment pipeline will be triggered"
          fi

  # Post-deployment verification and auto-close job
  post-deployment-verification:
    runs-on: ubuntu-latest
    needs: claude-ai-automation
    timeout-minutes: 10
    if: |
      needs.claude-ai-automation.result == 'success' &&
      github.event_name == 'issues' &&
      (contains(github.event.issue.labels.*.name, 'resolved') ||
       contains(github.event.issue.labels.*.name, 'claude-ready'))
    
    steps:
      - name: Wait for Deployment
        run: |
          echo "⏳ Waiting for deployment to complete..."
          sleep 120  # Wait 2 minutes for deployment (optimized)

      - name: Verify Deployment with Version Comparison
        id: verify
        run: |
          echo "🔍 Verifying SafeWork deployment with version comparison..."
          
          # Health check endpoints
          PROD_URL="https://safework.jclee.me"
          HEALTH_ENDPOINT="$PROD_URL/health"
          
          # Get current Git commit for version comparison
          CURRENT_COMMIT=$(git rev-parse --short HEAD)
          CURRENT_TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")
          
          echo "📊 Current deployment info:"
          echo "  - Commit: $CURRENT_COMMIT"
          echo "  - Tag: $CURRENT_TAG"
          
          # Function to check endpoint
          check_endpoint() {
            local url=$1
            local name=$2
            echo "Checking $name: $url"
            
            response=$(curl -s -w "%{http_code}" -o /tmp/response.txt "$url" || echo "000")
            
            if [ "$response" = "200" ]; then
              echo "✅ $name: OK"
              return 0
            else
              echo "❌ $name: Failed (HTTP $response)"
              return 1
            fi
          }
          
          # Function to get deployed version
          get_deployed_version() {
            echo "🏷️ Getting deployed version info..."
            
            # Get version from health endpoint
            health_response=$(curl -s "$HEALTH_ENDPOINT" 2>/dev/null)
            
            if [ $? -eq 0 ] && [ -n "$health_response" ]; then
              deployed_version=$(echo "$health_response" | jq -r '.version // empty' 2>/dev/null || echo "")
              deployed_commit=$(echo "$health_response" | jq -r '.git_commit // empty' 2>/dev/null || echo "")
              
              echo "🔍 Deployed version info:"
              echo "  - Version: ${deployed_version:-'unknown'}"
              echo "  - Commit: ${deployed_commit:-'unknown'}"
              
              # Store for output
              echo "deployed_version=${deployed_version:-'unknown'}" >> $GITHUB_OUTPUT
              echo "deployed_commit=${deployed_commit:-'unknown'}" >> $GITHUB_OUTPUT
              
              return 0
            else
              echo "⚠️ Could not retrieve version info"
              return 1
            fi
          }
          
          # Check Docker image version from registry
          check_image_version() {
            echo "🐳 Checking Docker image version..."
            
            # Try to get image digest from registry
            REGISTRY_URL="registry.jclee.me"
            IMAGE_NAME="safework/app"
            
            # Get current image digest (requires registry API access)
            if command -v skopeo >/dev/null 2>&1; then
              current_digest=$(skopeo inspect docker://$REGISTRY_URL/$IMAGE_NAME:latest 2>/dev/null | jq -r '.Digest // empty' || echo "")
              if [ -n "$current_digest" ]; then
                echo "📦 Current image digest: $current_digest"
                echo "image_digest=$current_digest" >> $GITHUB_OUTPUT
              fi
            fi
          }
          
          # Main verification process
          verification_passed=true
          
          # Step 1: Basic health checks
          if check_endpoint "$HEALTH_ENDPOINT" "Health Check"; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            verification_passed=false
          fi
          
          # Step 2: Version comparison
          if get_deployed_version; then
            echo "✅ Version info retrieved"
          else
            echo "⚠️ Version info retrieval failed (but continuing)"
          fi
          
          # Step 3: Check Docker image version
          check_image_version
          
          # Step 4: Functional tests
          if check_endpoint "$PROD_URL/" "Main Page"; then
            echo "✅ Main page accessible"
          else
            echo "❌ Main page failed"
            verification_passed=false
          fi
          
          if check_endpoint "$PROD_URL/survey/001_musculoskeletal_symptom_survey" "Survey Form"; then
            echo "✅ Survey form accessible"
          else
            echo "❌ Survey form failed"
            verification_passed=false
          fi
          
          # Step 5: Additional SafeWork-specific checks
          if check_endpoint "$PROD_URL/admin/dashboard" "Admin Dashboard"; then
            echo "✅ Admin dashboard accessible (or properly redirecting)"
          else
            echo "⚠️ Admin dashboard check inconclusive (may require login)"
          fi
          
          # Final decision
          if [ "$verification_passed" = true ]; then
            echo "deployment_verified=true" >> $GITHUB_OUTPUT
            echo "✅ All critical deployment verification checks passed"
            
            # Create detailed verification report
            cat > /tmp/verification_report.txt << EOF
🎯 SafeWork Deployment Verification Completed
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✅ Health Check: OK
✅ Main Page: Accessible
✅ Survey Form: Accessible
📊 Deployed Version: $CURRENT_COMMIT
⏰ Verification Time: $(date '+%Y-%m-%d %H:%M:%S KST')
EOF
            
            exit 0
          else
            echo "deployment_verified=false" >> $GITHUB_OUTPUT
            echo "❌ Deployment verification failed"
            exit 1
          fi

      - name: Auto Close Issue on Successful Deployment
        if: steps.verify.outputs.deployment_verified == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log("🎯 Deployment verified successfully. Closing issue...");
            
            const issue = context.payload.issue;
            
            // Add deployment-verified label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: ['deployment-verified', 'auto-closed']
            });
            
            // Add completion comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `✅ **Issue Auto-Completed**

              **Deployment Verification Completed:**
              - ✅ Health Check: https://safework.jclee.me/health
              - ✅ Main Page: https://safework.jclee.me/
              - ✅ Survey Form: https://safework.jclee.me/survey/001_musculoskeletal_symptom_survey
              - ✅ Admin Dashboard: https://safework.jclee.me/admin/dashboard
              
              **Version Information:**
              - 📊 Deployed Commit: \`${{ steps.verify.outputs.deployed_commit || 'Checking' }}\`
              - 🏷️ Deployed Version: \`${{ steps.verify.outputs.deployed_version || 'Checking' }}\`
              - 🐳 Image Digest: \`${{ steps.verify.outputs.image_digest || 'Checking' }}\`
              
              **Verification Time:** ${new Date().toLocaleString('en-US', {timeZone: 'Asia/Seoul'})} KST
              **Deployment Status:** All core functions verified and working properly
              
              Deployment completed as intended. Auto-closing this issue.
              
              ---
              🤖 *SafeWork Automated Deployment Verification System v2.0*`
            });
            
            // Close the issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
            
            console.log(`✅ Issue #${issue.number} has been automatically closed after successful deployment verification`);

      - name: Notify Deployment Failure
        if: steps.verify.outputs.deployment_verified == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            console.log("❌ Deployment verification failed. Adding warning comment...");
            
            const issue = context.payload.issue;
            
            // Add deployment-failed label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: ['deployment-failed', 'needs-attention']
            });
            
            // Add failure comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `⚠️ **Deployment Verification Failed**

              **Failure Reasons:**
              - ❌ SafeWork service is not responding properly
              - 🔍 Health Check or main pages are inaccessible
              
              **Verification Time:** ${new Date().toLocaleString('en-US', {timeZone: 'Asia/Seoul'})} KST
              **Required Action:** Manual verification and redeployment needed
              
              @qws941 @seonmin994 Please check this issue.
              
              ---
              🤖 *SafeWork Automated Deployment Verification System*`
            });
            
            console.log(`⚠️ Issue #${issue.number} requires manual attention - deployment verification failed`);

  # Parallel job for urgent issue handling
  urgent-issue-handler:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: |
      github.event_name == 'issues' && 
      github.event.action == 'opened' &&
      (contains(github.event.issue.title, '긴급') || 
       contains(github.event.issue.title, 'urgent') ||
       contains(github.event.issue.title, 'critical') ||
       contains(github.event.issue.body, '중단') ||
       contains(github.event.issue.body, '작동 안'))
    
    steps:
      - name: Urgent Issue Alert & Slack Notification
        uses: actions/github-script@v7
        with:
          script: |
            console.log("🚨 Urgent SafeWork issue detected!");
            
            const issue = context.payload.issue;
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: ['urgent', 'priority-high', 'safework']
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `🚨 **Urgent SafeWork Issue Detected**
              
              This issue has been automatically flagged as urgent and will be processed immediately.
              
              **Estimated Response Time:** < 5 minutes
              **Priority Level:** P0-CRITICAL
              **Domain:** SafeWork Industrial Safety System
              
              The main Claude AI workflow will process this issue with high priority.
              
              ---
              🤖 *SafeWork Urgent Issue Handler*`
            });
            
            // Send Slack notification for urgent issues
            const slackMessage = {
                "color": "danger",
                "title": "🚨 URGENT: SafeWork Issue Detected",
                "text": `*Issue #${issue.number}*: ${issue.title}`,
                "fields": [
                  {"title": "Priority", "value": "P0-CRITICAL", "short": true},
                  {"title": "Author", "value": issue.user.login, "short": true},
                  {"title": "URL", "value": issue.html_url, "short": false}
                ],
                "footer": "SafeWork Urgent Alert System",
                "ts": Math.floor(Date.now() / 1000)
              }]
            };
            
            await fetch('https://slack.com/api/chat.postMessage', {
              method: 'POST',
              headers: {
                'Authorization': 'Bearer ${{ secrets.SLACK_BOT_TOKEN }}',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                channel: "#safework-alerts",
                text: `🚨 URGENT: SafeWork Issue #${issue.number}`,
                attachments: [{
                  color: "danger",
                  title: "🚨 URGENT: SafeWork Issue Detected",
                  text: `*Issue #${issue.number}*: ${issue.title}`,
                  fields: [
                    {"title": "Priority", "value": "P0-CRITICAL", "short": true},
                    {"title": "Author", "value": issue.user.login, "short": true},
                    {"title": "URL", "value": issue.html_url, "short": false}
                  ],
                  footer: "SafeWork Urgent Alert System",
                  ts: Math.floor(Date.now() / 1000)
                }]
              })
            });