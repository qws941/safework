name: Security Scan Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 매일 오전 2시 보안 스캔 (UTC)
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  vulnerability-scan:
    name: Vulnerability Assessment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # 전체 히스토리 필요 (보안 분석용)
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('app/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-
          ${{ runner.os }}-pip-
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety semgrep gitpython
    
    - name: Python dependency vulnerability scan
      run: |
        echo "🔍 Python 패키지 취약점 스캔..."
        cd app
        safety check --json --output safety-report.json || true
        safety check --short-report || echo "⚠️ 취약점 발견됨"
    
    - name: Bandit security scan
      run: |
        echo "🔒 Python 코드 보안 스캔..."
        cd app
        bandit -r . -f json -o bandit-report.json -x tests/ || true
        bandit -r . -ll -x tests/ || echo "⚠️ 보안 이슈 발견됨"
    
    - name: Semgrep SAST scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
          p/flask
          p/docker
          p/secrets
        publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
      continue-on-error: true
    
    - name: Git secrets scan
      run: |
        echo "🔐 Git 히스토리 민감정보 스캔..."
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline || echo "⚠️ 잠재적 비밀 정보 발견"
    
    - name: License compliance check
      run: |
        echo "📜 라이선스 컴플라이언스 확인..."
        cd app
        pip install pip-licenses
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --summary || echo "⚠️ 라이선스 이슈 확인 필요"
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_id }}
        path: |
          app/safety-report.json
          app/bandit-report.json
          app/licenses.json
        retention-days: 30
    
    - name: Security summary
      run: |
        echo "## 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Safety (Dependencies)**: $(cd app && safety check --json | jq -r '.vulnerabilities | length') vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- **Bandit (SAST)**: $(cd app && bandit -r . -f json -x tests/ | jq -r '.results | length') issues" >> $GITHUB_STEP_SUMMARY
        echo "- **License Check**: Completed" >> $GITHUB_STEP_SUMMARY

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build test image
      run: |
        docker build -t safework-security-test:latest ./app
    
    - name: Docker security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'safework-security-test:latest'
        format: 'sarif'
        output: 'docker-trivy.sarif'
    
    - name: Docker security scan with Snyk
      continue-on-error: true
      run: |
        # Snyk CLI 설치 및 실행
        curl -o snyk https://static.snyk.io/cli/latest/snyk-linux
        chmod +x ./snyk
        ./snyk auth ${{ secrets.SNYK_TOKEN }} || echo "Snyk token not configured"
        ./snyk container test safework-security-test:latest --json > snyk-docker.json || echo "Docker vulnerabilities found"
    
    - name: Dockerfile best practices scan
      run: |
        echo "🐳 Dockerfile 모범 사례 확인..."
        # Hadolint로 Dockerfile 린팅
        docker run --rm -i hadolint/hadolint < app/Dockerfile || echo "⚠️ Dockerfile 개선 사항 존재"
    
    - name: Upload Docker security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-security-reports-${{ github.run_id }}
        path: |
          docker-trivy.sarif
          snyk-docker.json
        retention-days: 30
    
    - name: Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: docker-trivy.sarif

  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: TruffleHog OSS secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: GitLeaks secrets scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
    
    - name: Secrets baseline update
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline --exclude-files '\.git/'
        
  compliance-check:
    name: Compliance Assessment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: GDPR compliance check
      run: |
        echo "📋 GDPR 컴플라이언스 확인..."
        # 개인정보 처리 관련 코드 패턴 확인
        grep -r "password\|email\|phone\|ssn\|personal" app/ || echo "개인정보 처리 코드 없음"
    
    - name: Security headers check
      run: |
        echo "🔒 보안 헤더 설정 확인..."
        grep -r "X-Content-Type-Options\|X-Frame-Options\|X-XSS-Protection" app/ || echo "⚠️ 보안 헤더 설정 확인 필요"
    
    - name: Audit logging check
      run: |
        echo "📊 감사 로깅 확인..."
        grep -r "AuditLog\|audit\|logging" app/ || echo "⚠️ 감사 로깅 구현 확인 필요"

  notify-security-results:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, docker-security, secrets-detection]
    if: always()
    
    steps:
    - name: Download security reports
      uses: actions/download-artifact@v4
      with:
        name: security-reports-${{ github.run_id }}
        path: ./reports
      continue-on-error: true
    
    - name: Security notification
      if: contains(needs.*.result, 'failure')
      run: |
        echo "🚨 보안 스캔에서 중요한 이슈가 발견되었습니다!"
        echo "상세 내용은 Actions 탭에서 확인하세요: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        
        # Slack/Teams 알림 (선택사항)
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"🚨 SafeWork Security Alert: Issues found in security scan"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Create security issue
      if: contains(needs.*.result, 'failure') && github.ref == 'refs/heads/main'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Security Scan Alert - ' + new Date().toISOString().split('T')[0],
            body: `## Security Scan Results
            
            보안 스캔에서 주의가 필요한 항목이 발견되었습니다.
            
            **실행 정보:**
            - Run ID: ${context.runId}
            - Branch: ${context.ref}
            - Commit: ${context.sha}
            
            **확인 필요 사항:**
            - [ ] 취약한 패키지 의존성 검토
            - [ ] 코드 보안 이슈 검토
            - [ ] Docker 이미지 보안 검토
            - [ ] 비밀 정보 노출 여부 검토
            
            [상세 보고서 확인](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `,
            labels: ['security', 'priority-high']
          })