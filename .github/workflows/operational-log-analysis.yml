name: üìä Operational Log Analysis

on:
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Application name to analyze'
        required: false
        default: 'safework'
        type: string
      hours_back:
        description: 'Hours of logs to analyze'
        required: false
        default: '4'
        type: string
      analysis_type:
        description: 'Analysis type'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - errors_only
          - performance
          - security

permissions:
  contents: read
  issues: write
  actions: read

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
  PORTAINER_API_KEY: ${{ secrets.PORTAINER_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  log-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: üîó Checkout Repository
        uses: actions/checkout@v4
        
      - name: üìä Collect Application Logs
        id: app_logs
        run: |
          APP_NAME="${{ github.event.inputs.app_name || 'safework' }}"
          HOURS_BACK="${{ github.event.inputs.hours_back || '4' }}"
          
          echo "=== SafeWork Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î°úÍ∑∏ ÏàòÏßë ===" > operational_logs.txt
          echo "ÏàòÏßë ÏãúÍ∞Ñ: $(date)" >> operational_logs.txt
          echo "Î∂ÑÏÑù ÎåÄÏÉÅ: $APP_NAME" >> operational_logs.txt
          echo "ÏàòÏßë Î≤îÏúÑ: ÏµúÍ∑º ${HOURS_BACK}ÏãúÍ∞Ñ" >> operational_logs.txt
          echo "" >> operational_logs.txt
          
          # Application URLs for SafeWork
          SAFEWORK_PROD_URL="https://safework.jclee.me"
          SAFEWORK_DEV_URL="https://safework-dev.jclee.me"
          
          echo "=== Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÉÅÌÉú ÌôïÏù∏ ===" >> operational_logs.txt
          
          # Health check
          echo "üè• Health Check:" >> operational_logs.txt
          curl -s "$SAFEWORK_PROD_URL/health" >> operational_logs.txt 2>&1 || echo "Health check failed" >> operational_logs.txt
          echo "" >> operational_logs.txt
          
          # API stats
          echo "üìä API ÌÜµÍ≥Ñ:" >> operational_logs.txt
          curl -s "$SAFEWORK_PROD_URL/api/stats" >> operational_logs.txt 2>&1 || echo "API stats unavailable" >> operational_logs.txt
          echo "" >> operational_logs.txt
          
          # Development environment check
          echo "üîß Í∞úÎ∞ú ÌôòÍ≤Ω ÏÉÅÌÉú:" >> operational_logs.txt
          curl -s "$SAFEWORK_DEV_URL/health" >> operational_logs.txt 2>&1 || echo "Dev environment unreachable" >> operational_logs.txt
          echo "" >> operational_logs.txt
          
      - name: üê≥ Collect Container Logs via Portainer
        id: container_logs
        run: |
          if [ -n "$PORTAINER_API_KEY" ]; then
            echo "=== Portainer Ïª®ÌÖåÏù¥ÎÑà Î°úÍ∑∏ ÏàòÏßë ===" >> operational_logs.txt
            
            # Get container list
            CONTAINERS_JSON=$(curl -s -H "X-API-Key: $PORTAINER_API_KEY" \
              "https://portainer.jclee.me/api/endpoints/1/docker/containers/json" || echo "[]")
            
            echo "Î∞úÍ≤¨Îêú Ïª®ÌÖåÏù¥ÎÑà:" >> operational_logs.txt
            echo "$CONTAINERS_JSON" | jq -r '.[] | select(.Names[0] | contains("safework")) | .Names[0]' >> operational_logs.txt 2>/dev/null || echo "SafeWork Ïª®ÌÖåÏù¥ÎÑà ÏóÜÏùå" >> operational_logs.txt
            echo "" >> operational_logs.txt
            
            # Collect logs from SafeWork containers
            for container in $(echo "$CONTAINERS_JSON" | jq -r '.[] | select(.Names[0] | contains("safework")) | .Id' 2>/dev/null || echo ""); do
              if [ -n "$container" ]; then
                CONTAINER_NAME=$(echo "$CONTAINERS_JSON" | jq -r --arg id "$container" '.[] | select(.Id == $id) | .Names[0]')
                echo "=== $CONTAINER_NAME Î°úÍ∑∏ ===" >> operational_logs.txt
                
                # Get recent logs (last 1000 lines)
                curl -s -H "X-API-Key: $PORTAINER_API_KEY" \
                  "https://portainer.jclee.me/api/endpoints/1/docker/containers/$container/logs?stdout=1&stderr=1&tail=1000" \
                  >> operational_logs.txt 2>&1 || echo "Î°úÍ∑∏ ÏàòÏßë Ïã§Ìå®" >> operational_logs.txt
                echo "" >> operational_logs.txt
              fi
            done
          else
            echo "‚ö†Ô∏è Portainer API Key ÏóÜÏùå - Ïª®ÌÖåÏù¥ÎÑà Î°úÍ∑∏ ÏàòÏßë Í±¥ÎÑàÎúÄ" >> operational_logs.txt
          fi
          
      - name: üîç Intelligent Log Analysis
        run: |
          # Check if we have meaningful logs
          LOG_SIZE=$(wc -l < operational_logs.txt)
          echo "ÏàòÏßëÎêú Î°úÍ∑∏ ÎùºÏù∏ Ïàò: $LOG_SIZE"
          
          if [ "$LOG_SIZE" -gt 10 ]; then
            echo "Î°úÍ∑∏ Î∂ÑÏÑùÏùÑ ÏúÑÌï¥ Claude Ìò∏Ï∂ú Ï§ë..."
            
            curl -fsSL https://claude.ai/install.sh | bash
            echo "$CLAUDE_CODE_OAUTH_TOKEN" | claude auth
            
            claude code --dir . << 'EOF'
            üìä **SafeWork Ïö¥ÏòÅ Î°úÍ∑∏ Î∂ÑÏÑù ÏöîÏ≤≠**
            
            **ÌîÑÎ°úÏ†ùÌä∏ Ïª®ÌÖçÏä§Ìä∏:**
            - SafeWork Flask 3.0+ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò (ÏÇ∞ÏóÖ ÏïàÏ†Ñ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú)
            - ÎèÖÎ¶Ω Ïª®ÌÖåÏù¥ÎÑà ÏïÑÌÇ§ÌÖçÏ≤ò: safework-postgres (4546), safework-redis (4547), safework-app (4545)
            - ÌîÑÎ°úÎçïÏÖò: https://safework.jclee.me
            - Í∞úÎ∞ú: https://safework-dev.jclee.me
            
            **Î∂ÑÏÑù ÏÑ§Ï†ï:**
            - Î∂ÑÏÑù Ïú†Ìòï: ${{ github.event.inputs.analysis_type || 'comprehensive' }}
            - ÏàòÏßë Í∏∞Í∞Ñ: ÏµúÍ∑º ${{ github.event.inputs.hours_back || '4' }}ÏãúÍ∞Ñ
            - Ïã§Ìñâ ÏãúÍ∞Ñ: $(date)
            
            **Î∂ÑÏÑù ÏöîÏ≤≠:**
            
            1. **`operational_logs.txt` ÌååÏùºÏùÑ ÏùΩÍ≥† Î∂ÑÏÑù**:
               - Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÉÅÌÉú Î∞è ÏÑ±Îä• Î©îÌä∏Î¶≠
               - Ïª®ÌÖåÏù¥ÎÑà Î°úÍ∑∏ÏóêÏÑú ÏóêÎü¨/Í≤ΩÍ≥† Ìå®ÌÑ¥ Í∞êÏßÄ
               - Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Î∞è Redis ÏÉÅÌÉú
               - API ÏùëÎãµ ÏãúÍ∞Ñ Î∞è ÏóêÎü¨Ïú®
            
            2. **Î∂ÑÏÑù Ïú†ÌòïÎ≥Ñ ÏßëÏ§ë ÏòÅÏó≠**:
               - **comprehensive**: Ï†ÑÏ≤¥Ï†ÅÏù∏ ÏãúÏä§ÌÖú Í±¥Í∞ïÎèÑ, ÏÑ±Îä•, ÏóêÎü¨ Î∂ÑÏÑù
               - **errors_only**: ÏóêÎü¨ Î°úÍ∑∏Îßå ÏßëÏ§ë Î∂ÑÏÑù, Í∑ºÎ≥∏ ÏõêÏù∏ ÌååÏïÖ
               - **performance**: ÏùëÎãµ ÏãúÍ∞Ñ, Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏøºÎ¶¨ ÏÑ±Îä•, Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ
               - **security**: Ïù∏Ï¶ù Ïã§Ìå®, ÎπÑÏ†ïÏÉÅ Ï†ëÍ∑º Ìå®ÌÑ¥, Î≥¥Ïïà Í¥ÄÎ†® Í≤ΩÍ≥†
            
            3. **ÌïúÍµ≠Ïñ¥ Ïö¥ÏòÅ Î≥¥Í≥†ÏÑú ÏÉùÏÑ±**:
               - üìä **ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏöîÏïΩ**
               - üö® **Î∞úÍ≤¨Îêú Ïù¥Ïäà Î∞è Ïö∞ÏÑ†ÏàúÏúÑ**
               - üìà **ÏÑ±Îä• ÏßÄÌëú Î∂ÑÏÑù**
               - üîß **Í∂åÏû• Ï°∞ÏπòÏÇ¨Ìï≠**
               - üìÖ **Îã§Ïùå Ï†êÍ≤Ä Ìè¨Ïù∏Ìä∏**
            
            4. **ÏûêÎèô Ïù¥Ïäà ÏÉùÏÑ± ÌåêÎã®**:
               - Critical: ÏÑúÎπÑÏä§ Ïû•Ïï†, Î≥¥Ïïà ÏúÑÌóò, Îç∞Ïù¥ÌÑ∞ ÏÜêÏã§
               - High: ÏÑ±Îä• Ï†ÄÌïò, ÏóêÎü¨Ïú® Ï¶ùÍ∞Ä, Ïó∞Í≤∞ Ïã§Ìå®
               - Medium: Í≤ΩÍ≥† Ï¶ùÍ∞Ä, ÎπÑÏ†ïÏÉÅ Ìå®ÌÑ¥
               
            **Ï∂úÎ†• ÌòïÏãù:**
            - Î™ÖÌôïÌïòÍ≥† Ïã§Ìñâ Í∞ÄÎä•Ìïú ÌïúÍµ≠Ïñ¥ Î≥¥Í≥†ÏÑú
            - Í∏∞Ïà†Ï†Å ÏÑ∏Î∂ÄÏÇ¨Ìï≠Í≥º ÎπÑÏ¶àÎãàÏä§ ÏòÅÌñ•ÎèÑ Ìè¨Ìï®
            - Ïö∞ÏÑ†ÏàúÏúÑÎ≥Ñ Ïï°ÏÖò ÏïÑÏù¥ÌÖú Ï†úÏãú
            - ÌïÑÏöîÏãú GitHub Ïù¥Ïäà ÏÉùÏÑ±ÏùÑ ÏúÑÌïú Í∂åÍ≥†
            
            **ÌäπÎ≥Ñ Ï£ºÏùòÏÇ¨Ìï≠:**
            - Í∞úÏù∏Ï†ïÎ≥¥ÎÇò ÎØºÍ∞êÌïú Ï†ïÎ≥¥Îäî Ï†úÏô∏ÌïòÍ≥† Î∂ÑÏÑù
            - SafeWork ÏÇ∞ÏóÖ ÏïàÏ†Ñ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖúÏùò ÌäπÏÑ± Í≥†Î†§
            - ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î≥¥Ìò∏ Î∞è Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§ Ï§ÄÏàò
            
            ÏßÄÍ∏à Î°úÍ∑∏ Î∂ÑÏÑùÏùÑ ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî.
            EOF
          else
            echo "‚ö†Ô∏è ÏàòÏßëÎêú Î°úÍ∑∏Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§. Î∂ÑÏÑùÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§."
            echo "ÏàòÏßëÎêú Î°úÍ∑∏ ÎÇ¥Ïö©:" 
            cat operational_logs.txt
          fi
          
      - name: üìã Analysis Summary
        if: always()
        run: |
          echo "=== Ïö¥ÏòÅ Î°úÍ∑∏ Î∂ÑÏÑù ÏôÑÎ£å ==="
          echo "Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò: ${{ github.event.inputs.app_name || 'safework' }}"
          echo "Î∂ÑÏÑù Ïú†Ìòï: ${{ github.event.inputs.analysis_type || 'comprehensive' }}"
          echo "ÏàòÏßë Í∏∞Í∞Ñ: ${{ github.event.inputs.hours_back || '4' }}ÏãúÍ∞Ñ"
          echo "Ïã§Ìñâ ÏÉÅÌÉú: ${{ job.status }}"
          echo "ÏôÑÎ£å ÏãúÍ∞Ñ: $(date)"
          
          # Check if any critical issues were found that need immediate attention
          if [ -f operational_logs.txt ]; then
            CRITICAL_ERRORS=$(grep -i "critical\|error\|exception\|fail" operational_logs.txt | wc -l)
            echo "Î∞úÍ≤¨Îêú ÏóêÎü¨/Í≤ΩÍ≥†: $CRITICAL_ERRORS"
            
            if [ "$CRITICAL_ERRORS" -gt 10 ]; then
              echo "üö® ÎÜíÏùÄ ÏóêÎü¨Ïú® Í∞êÏßÄ - Ï∂îÍ∞Ä Í≤ÄÌÜ† ÌïÑÏöî"
            fi
          fi