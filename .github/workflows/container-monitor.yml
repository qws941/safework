name: 🐳 컨테이너 모니터링 및 자동 이슈 생성

on:
  push:
    branches: [main, master]
  schedule:
    # 10분마다 실행 (운영 시간 중)
    - cron: '*/10 6-22 * * *'  # KST 06:00-22:00
    # 30분마다 실행 (야간)
    - cron: '0,30 23,0-5 * * *'  # KST 23:00-05:00
  workflow_dispatch:
    inputs:
      check_type:
        description: '검사 유형'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - health
        - logs
        - performance

permissions:
  contents: read
  issues: write
  actions: read

env:
  CONTAINER_NAME: safework-app
  ERROR_THRESHOLD: 5  # 에러 임계값
  RESTART_THRESHOLD: 3  # 재시작 임계값

jobs:
  # ========================================
  # 1. 컨테이너 상태 모니터링
  # ========================================
  container-health:
    name: "🏥 컨테이너 상태 검사"
    runs-on: self-hosted
    outputs:
      has_errors: ${{ steps.check.outputs.has_errors }}
      error_count: ${{ steps.check.outputs.error_count }}
      container_status: ${{ steps.check.outputs.container_status }}
      need_issue: ${{ steps.check.outputs.need_issue }}
      error_details: ${{ steps.check.outputs.error_details }}
    
    steps:
    - name: "📥 코드 체크아웃"
      uses: actions/checkout@v4
      
    - name: "🔍 컨테이너 상태 확인"
      id: check
      run: |
        echo "🔍 SafeWork 컨테이너 상태 확인 중..."
        
        HAS_ERRORS=false
        ERROR_COUNT=0
        NEED_ISSUE=false
        CONTAINER_STATUS="unknown"
        ERROR_DETAILS=""
        
        # 컨테이너 상태 확인
        if docker ps --format "table {{.Names}}\t{{.Status}}\t{{.RunningFor}}" | grep -q "${{ env.CONTAINER_NAME }}"; then
          CONTAINER_INFO=$(docker ps --format "{{.Status}}|{{.RunningFor}}" --filter "name=${{ env.CONTAINER_NAME }}")
          CONTAINER_STATUS="running"
          echo "✅ 컨테이너 실행 중: $CONTAINER_INFO"
          
          # 재시작 횟수 확인
          RESTART_COUNT=$(docker inspect ${{ env.CONTAINER_NAME }} --format='{{.RestartCount}}' 2>/dev/null || echo "0")
          if [ "$RESTART_COUNT" -gt "${{ env.RESTART_THRESHOLD }}" ]; then
            echo "⚠️ 컨테이너가 $RESTART_COUNT 번 재시작됨"
            HAS_ERRORS=true
            ERROR_DETAILS="${ERROR_DETAILS}Container restarted $RESTART_COUNT times. "
          fi
          
        else
          echo "❌ 컨테이너가 실행되지 않음"
          CONTAINER_STATUS="stopped"
          HAS_ERRORS=true
          NEED_ISSUE=true
          ERROR_DETAILS="${ERROR_DETAILS}Container is not running. "
        fi
        
        # 최근 로그에서 에러 검사 (컨테이너가 실행 중인 경우)
        if [ "$CONTAINER_STATUS" = "running" ]; then
          echo "📋 최근 로그 검사 중..."
          
          # 최근 100줄 로그에서 에러 패턴 검색
          RECENT_LOGS=$(docker logs ${{ env.CONTAINER_NAME }} --tail 100 2>&1 || echo "")
          
          # 에러 패턴 검사
          ERROR_PATTERNS=(
            "ERROR"
            "CRITICAL"
            "FATAL"
            "Exception"
            "Traceback"
            "500 Internal Server Error"
            "502 Bad Gateway"
            "Connection refused"
            "Database connection failed"
            "OperationalError"
            "MySQLdb._exceptions"
          )
          
          for pattern in "${ERROR_PATTERNS[@]}"; do
            PATTERN_COUNT=$(echo "$RECENT_LOGS" | grep -c "$pattern" || echo "0")
            if [ "$PATTERN_COUNT" -gt 0 ]; then
              ERROR_COUNT=$((ERROR_COUNT + PATTERN_COUNT))
              echo "⚠️ '$pattern' 패턴 $PATTERN_COUNT 개 발견"
              ERROR_DETAILS="${ERROR_DETAILS}Found $PATTERN_COUNT occurrences of '$pattern'. "
            fi
          done
          
          # 에러 임계값 초과 확인
          if [ "$ERROR_COUNT" -gt "${{ env.ERROR_THRESHOLD }}" ]; then
            echo "❌ 에러 수가 임계값 초과: $ERROR_COUNT > ${{ env.ERROR_THRESHOLD }}"
            HAS_ERRORS=true
            NEED_ISSUE=true
          elif [ "$ERROR_COUNT" -gt 0 ]; then
            echo "⚠️ 에러 발견: $ERROR_COUNT 개"
            HAS_ERRORS=true
          fi
        fi
        
        # 헬스체크
        echo "💚 헬스체크 수행 중..."
        if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:5000/health | grep -qE "200|204"; then
          echo "✅ 헬스체크 성공"
        else
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/health || echo "000")
          echo "❌ 헬스체크 실패 (HTTP $HTTP_CODE)"
          HAS_ERRORS=true
          ERROR_DETAILS="${ERROR_DETAILS}Health check failed with HTTP $HTTP_CODE. "
          
          if [ "$HTTP_CODE" = "000" ] || [ "$HTTP_CODE" = "502" ]; then
            NEED_ISSUE=true
          fi
        fi
        
        # 메모리 사용량 확인
        if [ "$CONTAINER_STATUS" = "running" ]; then
          MEMORY_USAGE=$(docker stats ${{ env.CONTAINER_NAME }} --no-stream --format "{{.MemPerc}}" | sed 's/%//')
          MEMORY_USAGE_INT=${MEMORY_USAGE%.*}
          
          if [ "$MEMORY_USAGE_INT" -gt 80 ]; then
            echo "⚠️ 높은 메모리 사용량: ${MEMORY_USAGE}%"
            ERROR_DETAILS="${ERROR_DETAILS}High memory usage: ${MEMORY_USAGE}%. "
            HAS_ERRORS=true
          fi
        fi
        
        # 결과 출력
        echo "has_errors=$HAS_ERRORS" >> $GITHUB_OUTPUT
        echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
        echo "container_status=$CONTAINER_STATUS" >> $GITHUB_OUTPUT
        echo "need_issue=$NEED_ISSUE" >> $GITHUB_OUTPUT
        echo "error_details=$ERROR_DETAILS" >> $GITHUB_OUTPUT
        
        # 상태 요약
        echo "## 🐳 컨테이너 모니터링 결과" >> $GITHUB_STEP_SUMMARY
        echo "| 항목 | 상태 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 컨테이너 상태 | $CONTAINER_STATUS |" >> $GITHUB_STEP_SUMMARY
        echo "| 에러 발견 | $HAS_ERRORS |" >> $GITHUB_STEP_SUMMARY
        echo "| 에러 수 | $ERROR_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| 이슈 생성 필요 | $NEED_ISSUE |" >> $GITHUB_STEP_SUMMARY
        if [ -n "$ERROR_DETAILS" ]; then
          echo "| 에러 상세 | $ERROR_DETAILS |" >> $GITHUB_STEP_SUMMARY
        fi

    - name: "📋 상세 로그 수집"
      if: steps.check.outputs.has_errors == 'true'
      run: |
        echo "📋 상세 로그 수집 중..."
        
        # 에러 로그 수집
        docker logs ${{ env.CONTAINER_NAME }} --tail 500 > container-full-logs.txt 2>&1 || echo "로그 수집 실패"
        
        # 에러만 필터링
        grep -E "ERROR|CRITICAL|FATAL|Exception|Traceback|500|502" container-full-logs.txt > container-error-logs.txt || echo "에러 로그 없음"
        
        # 시스템 정보 수집
        echo "=== System Information ===" > system-info.txt
        echo "Date: $(date)" >> system-info.txt
        echo "Container Status:" >> system-info.txt
        docker ps -a | grep safework >> system-info.txt || echo "No safework containers" >> system-info.txt
        echo "" >> system-info.txt
        echo "Docker Stats:" >> system-info.txt
        docker stats --no-stream >> system-info.txt || echo "Stats not available" >> system-info.txt
        echo "" >> system-info.txt
        echo "Disk Usage:" >> system-info.txt
        df -h >> system-info.txt
        
    - name: "📊 로그 아티팩트 업로드"
      if: steps.check.outputs.has_errors == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: container-logs-${{ github.run_number }}
        path: |
          container-full-logs.txt
          container-error-logs.txt
          system-info.txt
        retention-days: 7

  # ========================================
  # 2. 자동 이슈 생성
  # ========================================
  create-issue:
    name: "📝 자동 이슈 생성"
    needs: container-health
    if: needs.container-health.outputs.need_issue == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: "🔍 기존 이슈 확인"
      id: check_issue
      uses: actions/github-script@v6
      with:
        script: |
          // 오늘 날짜 생성
          const today = new Date().toISOString().split('T')[0];
          
          // 기존 오픈 이슈 확인
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'container-error,auto-generated',
            per_page: 10
          });
          
          // 오늘 생성된 이슈가 있는지 확인
          const todayIssue = issues.data.find(issue => 
            issue.title.includes(today) && 
            issue.title.includes('Container Error')
          );
          
          if (todayIssue) {
            console.log(`기존 이슈 발견: #${todayIssue.number}`);
            core.setOutput('existing_issue', todayIssue.number);
            return todayIssue.number;
          }
          
          core.setOutput('existing_issue', '');
          return null;
          
    - name: "📝 새 이슈 생성"
      if: steps.check_issue.outputs.existing_issue == ''
      uses: actions/github-script@v6
      with:
        script: |
          const errorCount = '${{ needs.container-health.outputs.error_count }}';
          const containerStatus = '${{ needs.container-health.outputs.container_status }}';
          const errorDetails = '${{ needs.container-health.outputs.error_details }}';
          const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          // 이슈 제목과 본문 생성
          const date = new Date().toISOString();
          const title = `🐳 [Container Error] SafeWork 컨테이너 오류 감지 - ${date.split('T')[0]}`;
          
          const body = `## 🚨 컨테이너 오류 자동 감지
          
          SafeWork 컨테이너에서 오류가 감지되어 자동으로 이슈가 생성되었습니다.
          
          ### 📊 오류 요약
          - **감지 시간:** ${date}
          - **컨테이너 상태:** ${containerStatus}
          - **오류 수:** ${errorCount}개
          - **실행 번호:** #${context.runNumber}
          
          ### 🔍 오류 상세
          ${errorDetails || '상세 정보는 로그를 확인해주세요.'}
          
          ### 📋 확인 필요 사항
          - [ ] 컨테이너 로그 확인
          - [ ] 데이터베이스 연결 상태 확인
          - [ ] 메모리 사용량 확인
          - [ ] 디스크 공간 확인
          - [ ] 애플리케이션 에러 로그 분석
          - [ ] 필요시 컨테이너 재시작
          
          ### 🔧 권장 조치
          1. [GitHub Actions 로그 확인](${runUrl})
          2. 서버 접속하여 상태 확인
             \`\`\`bash
             docker logs safework-app --tail 100
             docker stats safework-app --no-stream
             docker inspect safework-app
             \`\`\`
          3. 필요시 재시작
             \`\`\`bash
             docker-compose restart app
             \`\`\`
          
          ### 🏷️ 관련 정보
          - **Workflow:** ${context.workflow}
          - **Commit:** ${context.sha}
          - **Actor:** ${context.actor}
          - **[상세 로그 다운로드](${runUrl}#artifacts)**
          
          ---
          *이 이슈는 GitHub Actions 워크플로우에 의해 자동 생성되었습니다.*
          `;
          
          // 이슈 생성
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['container-error', 'auto-generated', 'priority-high', 'bug'],
            assignees: ['qws941']
          });
          
          console.log(`새 이슈 생성됨: #${issue.data.number}`);
          core.setOutput('issue_number', issue.data.number);
          
    - name: "💬 기존 이슈에 코멘트 추가"
      if: steps.check_issue.outputs.existing_issue != ''
      uses: actions/github-script@v6
      with:
        script: |
          const issueNumber = ${{ steps.check_issue.outputs.existing_issue }};
          const errorCount = '${{ needs.container-health.outputs.error_count }}';
          const errorDetails = '${{ needs.container-health.outputs.error_details }}';
          const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          const comment = `## 🔄 추가 오류 감지
          
          **시간:** ${new Date().toISOString()}
          **오류 수:** ${errorCount}개
          **실행:** [#${context.runNumber}](${runUrl})
          
          ### 오류 상세
          ${errorDetails || '로그를 확인해주세요.'}
          
          [상세 로그 보기](${runUrl})
          `;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: comment
          });
          
          console.log(`기존 이슈 #${issueNumber}에 코멘트 추가됨`);

  # ========================================
  # 3. 자동 복구 시도 (선택적)
  # ========================================
  auto-recovery:
    name: "🔧 자동 복구 시도"
    needs: [container-health, create-issue]
    if: needs.container-health.outputs.container_status == 'stopped' || needs.container-health.outputs.error_count > 10
    runs-on: self-hosted
    
    steps:
    - name: "🔧 컨테이너 재시작 시도"
      id: restart
      run: |
        echo "🔧 SafeWork 컨테이너 자동 복구 시도..."
        
        # 컨테이너 상태 확인
        CONTAINER_STATUS="${{ needs.container-health.outputs.container_status }}"
        
        if [ "$CONTAINER_STATUS" = "stopped" ]; then
          echo "🔄 정지된 컨테이너 재시작 중..."
          
          # Docker Compose로 재시작
          cd /home/jclee/app/safework2 || cd ~/safework
          docker-compose restart app || docker-compose up -d app
          
          # 재시작 후 대기
          sleep 10
          
          # 상태 확인
          if docker ps | grep -q "${{ env.CONTAINER_NAME }}"; then
            echo "✅ 컨테이너 재시작 성공"
            RESTART_SUCCESS=true
          else
            echo "❌ 컨테이너 재시작 실패"
            RESTART_SUCCESS=false
          fi
        else
          echo "ℹ️ 컨테이너는 실행 중이지만 에러가 많음"
          
          # 로그 로테이션
          docker logs ${{ env.CONTAINER_NAME }} > "/tmp/safework-logs-$(date +%Y%m%d-%H%M%S).log" 2>&1
          
          # 부드러운 재시작
          echo "🔄 부드러운 재시작 수행 중..."
          docker-compose restart app
          
          sleep 10
          RESTART_SUCCESS=true
        fi
        
        echo "restart_success=$RESTART_SUCCESS" >> $GITHUB_OUTPUT
        
    - name: "📝 복구 결과 기록"
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const restartSuccess = '${{ steps.restart.outputs.restart_success }}' === 'true';
          const issueNumber = ${{ needs.create-issue.outputs.issue_number || 0 }};
          
          if (issueNumber > 0) {
            const comment = restartSuccess 
              ? `✅ **자동 복구 성공**\n\n컨테이너가 성공적으로 재시작되었습니다.\n시간: ${new Date().toISOString()}`
              : `❌ **자동 복구 실패**\n\n수동 개입이 필요합니다.\n시간: ${new Date().toISOString()}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });
          }

  # ========================================
  # 4. 알림 전송
  # ========================================
  notify:
    name: "📨 알림 전송"
    needs: [container-health, create-issue]
    if: needs.container-health.outputs.need_issue == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: "📨 알림 전송"
      run: |
        echo "📨 알림 전송 중..."
        
        # Slack 웹훅 (설정된 경우)
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"🚨 SafeWork Container Alert\",
              \"attachments\": [{
                \"color\": \"danger\",
                \"title\": \"Container Error Detected\",
                \"fields\": [
                  {\"title\": \"Status\", \"value\": \"${{ needs.container-health.outputs.container_status }}\", \"short\": true},
                  {\"title\": \"Errors\", \"value\": \"${{ needs.container-health.outputs.error_count }}\", \"short\": true},
                  {\"title\": \"Action\", \"value\": \"Issue created automatically\", \"short\": false}
                ],
                \"footer\": \"GitHub Actions\",
                \"ts\": $(date +%s)
              }]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }} || echo "Slack 알림 전송 실패"
        fi
        
        # Discord 웹훅 (설정된 경우)
        if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
          curl -X POST -H "Content-Type: application/json" \
            -d "{
              \"content\": \"🚨 **SafeWork Container Alert**\",
              \"embeds\": [{
                \"title\": \"Container Error Detected\",
                \"color\": 15158332,
                \"fields\": [
                  {\"name\": \"Status\", \"value\": \"${{ needs.container-health.outputs.container_status }}\", \"inline\": true},
                  {\"name\": \"Error Count\", \"value\": \"${{ needs.container-health.outputs.error_count }}\", \"inline\": true}
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            ${{ secrets.DISCORD_WEBHOOK_URL }} || echo "Discord 알림 전송 실패"
        fi
        
        echo "✅ 알림 전송 완료"