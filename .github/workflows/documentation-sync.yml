name: SafeWork Documentation Sync

on:
  push:
    branches: [master, main]
    paths:
      - 'app/routes/**/*.py'
      - 'app/models*.py'
      - 'app/api/**/*.py'
      - 'CLAUDE.md'
      - 'README.md'
      - 'docs/**/*'
  pull_request:
    branches: [master, main]
    paths:
      - 'app/routes/**/*.py'
      - 'app/models*.py'
      - 'app/api/**/*.py'
  schedule:
    - cron: '0 2 * * 0'  # 매주 일요일 오전 2시 전체 문서 동기화
  workflow_dispatch:
    inputs:
      sync_type:
        description: '동기화 유형'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - api_docs_only
          - user_manual_only
          - developer_docs_only

env:
  PYTHON_VERSION: '3.11'
  DOCS_OUTPUT_DIR: 'docs'

jobs:
  # 📚 API 문서 자동 생성
  generate-api-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Python 환경 설정
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 문서 생성 도구 설치
        run: |
          cd app/
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme pydoc-markdown flask-autodoc

      - name: 📋 SafeWork API 문서 자동 생성
        run: |
          echo "📋 SafeWork API 문서 자동 생성..."
          
          cd app/
          
          # API 엔드포인트 자동 검색 및 문서화
          python << 'EOF'
          import os
          import re
          import json
          from datetime import datetime
          
          def extract_api_endpoints():
              """API 엔드포인트 및 문서 자동 추출"""
              endpoints = []
              
              # routes 디렉토리의 모든 Python 파일 스캔
              for root, dirs, files in os.walk('routes'):
                  for file in files:
                      if file.endswith('.py'):
                          file_path = os.path.join(root, file)
                          with open(file_path, 'r', encoding='utf-8') as f:
                              content = f.read()
                          
                          # 라우트 패턴 추출
                          route_pattern = re.findall(r"@.*\.route\(['\"](.*?)['\"].*?methods.*?\[(.*?)\]", content)
                          for route, methods in route_pattern:
                              # 함수명 및 docstring 추출
                              func_match = re.search(rf"@.*\.route\(['\"].*?{re.escape(route)}.*?\).*?\ndef\s+(\w+)\s*\([^)]*\):\s*['\"]([^'\"]*)['\"]", content, re.DOTALL)
                              if func_match:
                                  func_name = func_match.group(1)
                                  docstring = func_match.group(2) if len(func_match.groups()) > 1 else ""
                              else:
                                  func_name = "unknown"
                                  docstring = ""
                              
                              endpoints.append({
                                  'path': route,
                                  'methods': [m.strip().strip('"\'') for m in methods.split(',')],
                                  'function': func_name,
                                  'description': docstring,
                                  'file': file_path
                              })
              
              return endpoints
          
          # API 엔드포인트 추출
          api_endpoints = extract_api_endpoints()
          
          # Markdown 문서 생성
          markdown_content = f"""# SafeWork API 문서
          
          **생성 시간:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S KST')}
          **버전:** v2.0
          **베이스 URL:** https://safework.jclee.me
          
          ## 🏥 SafeWork 개요
          
          SafeWork는 한국 산업안전보건 관리를 위한 종합적인 웹 시스템입니다.
          - **주요 기능**: 설문조사, 건강검진 관리, 의무실 운영, 문서 관리
          - **기술 스택**: Flask 3.0+, SQLAlchemy 2.0, MySQL 8.0, Redis 5.0
          - **보안**: PHI(개인건강정보) 보호 최우선
          
          ## 📊 API 엔드포인트 목록
          
          총 {len(api_endpoints)}개의 엔드포인트가 감지되었습니다.
          
          """
          
          # 카테고리별 분류
          categories = {
              'API': [],
              'Survey': [],
              'Admin': [],
              'Auth': [],
              'Document': [],
              'Health': [],
              'Main': []
          }
          
          for endpoint in api_endpoints:
              path = endpoint['path']
              if path.startswith('/api/'):
                  categories['API'].append(endpoint)
              elif 'survey' in path:
                  categories['Survey'].append(endpoint)
              elif 'admin' in path:
                  categories['Admin'].append(endpoint)
              elif 'auth' in path:
                  categories['Auth'].append(endpoint)
              elif 'document' in path:
                  categories['Document'].append(endpoint)
              elif 'health' in path:
                  categories['Health'].append(endpoint)
              else:
                  categories['Main'].append(endpoint)
          
          # 카테고리별 문서 생성
          for category, endpoints in categories.items():
              if endpoints:
                  markdown_content += f"### 🔗 {category} 엔드포인트\n\n"
                  for endpoint in endpoints:
                      methods_str = ', '.join(endpoint['methods'])
                      markdown_content += f"#### `{methods_str}` {endpoint['path']}\n\n"
                      if endpoint['description']:
                          markdown_content += f"**설명:** {endpoint['description']}\n\n"
                      markdown_content += f"**함수:** {endpoint['function']}\n"
                      markdown_content += f"**파일:** {endpoint['file']}\n\n"
                      markdown_content += "---\n\n"
          
          # 사용 예제 추가
          markdown_content += """
          ## 📝 사용 예제
          
          ### 1. 건강 체크 엔드포인트
          ```bash
          curl -X GET "https://safework.jclee.me/health"
          ```
          
          ### 2. 설문조사 001 (근골격계)
          ```bash
          curl -X GET "https://safework.jclee.me/survey/001"
          ```
          
          ### 3. API 통계 조회 (인증 필요)
          ```bash
          curl -X GET "https://safework.jclee.me/api/safework/v2/statistics" \\
               -H "Authorization: Bearer YOUR_TOKEN"
          ```
          
          ## 🔐 인증 방식
          
          SafeWork API는 다음과 같은 인증 방식을 지원합니다:
          - **세션 인증**: 웹 인터페이스 기본 방식
          - **토큰 인증**: API 전용 (헤더: `Authorization: Bearer TOKEN`)
          - **익명 접근**: 특정 설문조사 엔드포인트 (rate limiting 적용)
          
          ## 📊 응답 형식
          
          모든 API는 일관된 JSON 응답 형식을 사용합니다:
          
          ```json
          {
            "success": true,
            "data": {...},
            "message": "요청이 성공적으로 처리되었습니다",
            "timestamp": "2024-01-01T00:00:00+09:00"
          }
          ```
          
          ## ⚠️ 에러 처리
          
          | HTTP Code | 설명 | 대응 방안 |
          |-----------|------|-----------|
          | 400 | 잘못된 요청 | 요청 파라미터 확인 |
          | 401 | 인증 필요 | 로그인 또는 토큰 확인 |
          | 403 | 권한 부족 | 관리자 권한 확인 |
          | 404 | 리소스 없음 | URL 경로 확인 |
          | 500 | 서버 오류 | 잠시 후 재시도 |
          
          ## 📞 지원 및 문의
          
          - **기술 지원**: GitHub Issues
          - **보안 문제**: 비공개 채널 통해 신고
          - **기능 요청**: @claude 멘션으로 AI 지원 요청
          
          ---
          🤖 *자동 생성된 API 문서 - SafeWork Documentation System*
          """
          
          # API 문서 파일 저장
          os.makedirs('../docs', exist_ok=True)
          with open('../docs/API.md', 'w', encoding='utf-8') as f:
              f.write(markdown_content)
          
          # JSON 형태로도 저장 (향후 활용)
          with open('../docs/api-endpoints.json', 'w', encoding='utf-8') as f:
              json.dump(api_endpoints, f, ensure_ascii=False, indent=2)
          
          print(f"✅ API 문서 생성 완료: {len(api_endpoints)}개 엔드포인트 문서화")
          print("📄 생성 파일:")
          print("  - docs/API.md")
          print("  - docs/api-endpoints.json")
          EOF

      - name: 📖 사용자 매뉴얼 업데이트
        run: |
          echo "📖 SafeWork 사용자 매뉴얼 자동 업데이트..."
          
          cat > docs/USER_MANUAL.md << 'EOF'
          # SafeWork 사용자 매뉴얼
          
          **업데이트:** $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')
          
          ## 🏥 SafeWork란?
          
          SafeWork는 산업 현장의 안전보건 관리를 위한 종합적인 웹 시스템입니다.
          의료진, 안전관리자, 근로자 모두가 쉽게 사용할 수 있도록 설계되었습니다.
          
          ## 👥 사용자별 가이드
          
          ### 👷 근로자용 가이드
          
          #### 1. 설문조사 참여
          - **근골격계 설문 (001)**: https://safework.jclee.me/survey/001
          - **신규입사자 건강체크 (002)**: https://safework.jclee.me/survey/002
          
          **참여 방법:**
          1. 위 링크에 접속
          2. 개인정보 동의 후 설문 시작
          3. 신체 부위별 증상 체크 (001) 또는 의료력 입력 (002)
          4. 제출 완료 후 확인 메시지 확인
          
          #### 2. 의무실 이용
          - **위치**: 본관 1층 의무실
          - **운영시간**: 평일 09:00-17:00
          - **예약**: 내선 1234 또는 직접 방문
          
          ### 👩‍⚕️ 의료진용 가이드
          
          #### 1. 관리자 로그인
          - **로그인 페이지**: https://safework.jclee.me/auth/login
          - **계정 문의**: 시스템 관리자
          
          #### 2. 의무실 관리
          - **환자 기록**: /admin/safework/medical-visits
          - **의약품 관리**: /admin/safework/medications
          - **건강검진 결과**: /admin/safework/health-checks
          
          #### 3. 주요 기능
          - 방문자 증상 기록
          - 투약 내역 관리
          - 건강검진 일정 관리
          - 특수건강진단 대상자 관리
          
          ### 👨‍💼 안전관리자용 가이드
          
          #### 1. 관리 대시보드
          - **메인 대시보드**: https://safework.jclee.me/admin
          - **SafeWork 통합 관리**: /admin/safework
          
          #### 2. 13개 관리 영역
          1. **근로자 관리**: 직원 정보, 부서별 현황
          2. **건강검진**: 일반/특수 건강검진 일정
          3. **의료 방문**: 의무실 이용 현황
          4. **의약품**: 재고 관리, 유통기한 관리
          5. **건강 상담**: 상담 일정 및 기록
          6. **건강 프로그램**: 교육 및 프로그램 운영
          7. **특수 관리**: 특수건강진단 대상자
          8. **환경 측정**: 작업환경측정 결과
          9. **위험 평가**: 위험성 평가 자료
          10. **MSDS**: 물질안전보건자료 관리
          11. **보호구**: 개인보호구 지급/관리
          12. **안전교육**: 교육 계획 및 이수 현황
          13. **자격증**: 안전관리자 자격 관리
          
          ## 📱 모바일 사용 가이드
          
          SafeWork는 모바일 기기에서도 완전하게 작동합니다:
          - **브라우저**: Chrome, Safari, Samsung Internet 권장
          - **화면**: 반응형 디자인으로 모든 화면 크기 지원
          - **터치**: 터치 친화적 인터페이스
          
          ## 🔍 문제해결 가이드
          
          ### 자주 묻는 질문 (FAQ)
          
          **Q: 설문조사가 저장되지 않아요**
          A: 인터넷 연결 상태를 확인하고, 모든 필수 항목을 입력했는지 확인하세요.
          
          **Q: 로그인이 안 됩니다**
          A: 아이디/비밀번호를 확인하고, 관리자에게 계정 상태를 문의하세요.
          
          **Q: 모바일에서 글자가 작게 보여요**
          A: 브라우저 설정에서 글자 크기를 조정하거나, 확대/축소 기능을 사용하세요.
          
          ### 브라우저별 문제해결
          
          | 브라우저 | 권장 버전 | 알려진 문제 | 해결 방법 |
          |----------|-----------|-------------|-----------|
          | Chrome | 90+ | 없음 | - |
          | Safari | 14+ | 없음 | - |
          | Firefox | 88+ | 파일 업로드 이슈 | 최신 버전 업데이트 |
          | Edge | 90+ | 없음 | - |
          | IE | 11 | 기능 제한 | Chrome 사용 권장 |
          
          ## 📞 지원 및 문의
          
          ### 즉시 도움이 필요한 경우
          1. **기술 문제**: GitHub에 이슈 생성 + @claude 멘션
          2. **긴급 의료**: 의무실 직통 (내선 1234)
          3. **시스템 장애**: 시스템 관리자 (내선 5678)
          
          ### 피드백 및 개선 요청
          - **기능 개선**: GitHub Issues에 [개선요청] 태그로 등록
          - **버그 신고**: 상세한 재현 방법과 함께 신고
          - **사용성 피드백**: 어려운 점이나 개선 아이디어 공유
          
          ## 🔐 개인정보 보호
          
          SafeWork는 개인건강정보(PHI) 보호를 최우선으로 합니다:
          - **암호화**: 모든 민감한 데이터는 암호화 저장
          - **접근 제한**: 권한이 있는 사용자만 접근 가능
          - **감사 로그**: 모든 접근 기록이 보관됨
          - **법규 준수**: 개인정보보호법, 의료법 완전 준수
          
          ---
          
          **SafeWork 시스템 정보**
          - 버전: v3.2
          - 지원: 24시간 모니터링
          - 업데이트: 지속적 개선
          
          🤖 *SafeWork 자동 문서 시스템에서 생성됨*
          EOF
          
          echo "✅ 사용자 매뉴얼 업데이트 완료"

      - name: 🛠️ 개발자 문서 동기화
        run: |
          echo "🛠️ SafeWork 개발자 문서 동기화..."
          
          # 개발 가이드 생성
          cat > docs/DEVELOPER_GUIDE.md << 'EOF'
          # SafeWork 개발자 가이드
          
          ## 🛠️ 개발 환경 설정
          
          ### 1. 로컬 개발 환경
          ```bash
          # 저장소 클론
          git clone https://github.com/qws941/safework.git
          cd safework
          
          # Docker 환경 실행
          docker-compose up -d
          
          # 애플리케이션 로그 확인
          docker-compose logs -f app
          ```
          
          ### 2. 데이터베이스 마이그레이션
          ```bash
          # 컨테이너 내부 접근
          docker-compose exec app bash
          
          # 마이그레이션 실행
          cd app/
          python migrate.py migrate
          
          # 상태 확인
          python migrate.py status
          ```
          
          ## 📁 프로젝트 구조
          
          ```
          safework/
          ├── app/                    # Flask 애플리케이션
          │   ├── routes/            # 라우트 모듈들
          │   │   ├── main.py       # 메인 페이지
          │   │   ├── auth.py       # 인증
          │   │   ├── survey.py     # 설문조사
          │   │   ├── admin.py      # 관리자
          │   │   └── api_safework_v2.py  # API
          │   ├── models.py         # 기본 모델들
          │   ├── models_safework_v2.py   # SafeWork 모델들
          │   ├── models_document.py      # 문서 관리 모델들
          │   ├── app.py           # Flask 앱 팩토리
          │   ├── config.py        # 설정
          │   └── requirements.txt # Python 의존성
          ├── docs/                # 문서
          ├── .github/workflows/   # GitHub Actions
          └── docker-compose.yml   # Docker 설정
          ```
          
          ## 🎯 개발 워크플로우
          
          ### 1. 기능 개발 프로세스
          1. **이슈 생성**: GitHub Issues에 기능 명세 작성
          2. **브랜치 생성**: `feature/이슈번호-설명` 형태
          3. **개발 & 테스트**: 로컬에서 개발 및 테스트
          4. **PR 생성**: Claude AI가 자동 리뷰 수행
          5. **배포**: merge 시 자동 배포
          
          ### 2. 코딩 컨벤션
          ```python
          # 모델 클래스 (models_safework_v2.py)
          class SafeworkWorker(db.Model):
              """근로자 정보"""
              __tablename__ = 'safework_workers'
              
              id = db.Column(db.Integer, primary_key=True)
              name = db.Column(db.String(100), nullable=False)
              created_at = db.Column(db.DateTime, default=kst_now)
          
          # 라우트 함수 (routes/)
          @bp.route('/workers', methods=['GET', 'POST'])
          @login_required
          def workers():
              """근로자 목록 및 등록"""
              try:
                  # 로직 구현
                  return render_template('admin/safework/workers.html')
              except Exception as e:
                  flash(f'오류: {str(e)}', 'error')
                  return redirect(url_for('admin.safework_dashboard'))
          ```
          
          ## 🧪 테스트 가이드
          
          ### 1. 테스트 실행
          ```bash
          cd app/
          pytest                    # 모든 테스트 실행
          pytest -v               # 상세 출력
          pytest tests/test_models.py  # 특정 파일
          pytest --cov=.         # 커버리지 포함
          ```
          
          ### 2. 테스트 작성 패턴
          ```python
          def test_worker_creation(client, auth):
              """근로자 생성 테스트"""
              auth.login()
              
              response = client.post('/admin/safework/workers', data={
                  'name': '홍길동',
                  'employee_number': 'EMP001',
                  'department': '안전팀'
              })
              
              assert response.status_code == 302
              assert SafeworkWorker.query.filter_by(name='홍길동').first()
          ```
          
          ## 🔐 보안 가이드라인
          
          ### 1. PHI 보호 패턴
          ```python
          # ✅ 올바른 방법
          logger.info(f"Worker ID {worker.id} accessed")
          
          # ❌ 잘못된 방법
          logger.info(f"Worker {worker.name} with medical condition {worker.medical_conditions}")
          ```
          
          ### 2. SQL 인젝션 방지
          ```python
          # ✅ SQLAlchemy ORM 사용
          workers = SafeworkWorker.query.filter_by(department=dept).all()
          
          # ❌ 직접 SQL 실행 금지
          query = f"SELECT * FROM workers WHERE dept = '{dept}'"
          ```
          
          ## 📊 성능 최적화 가이드
          
          ### 1. 데이터베이스 쿼리 최적화
          ```python
          # ✅ 조인 최적화
          workers = db.session.query(SafeworkWorker)\
              .options(joinedload(SafeworkWorker.health_checks))\
              .filter(SafeworkWorker.is_active == True).all()
          
          # ✅ 페이지네이션
          workers = SafeworkWorker.query.paginate(
              page=page, per_page=20, error_out=False)
          ```
          
          ### 2. Redis 캐싱 활용
          ```python
          from redis import Redis
          
          @cache_key('worker_{worker_id}_stats')
          def get_worker_stats(worker_id):
              # 복잡한 계산 결과 캐싱
              pass
          ```
          
          ## 🚀 배포 프로세스
          
          ### 자동 배포 파이프라인
          1. **코드 푸시** → GitHub
          2. **Claude AI 검토** → 자동 코드 리뷰
          3. **보안 스캔** → Bandit, Safety 검사
          4. **테스트 실행** → pytest 전체 테스트
          5. **Docker 빌드** → registry.jclee.me
          6. **배포 실행** → Watchtower 자동 업데이트
          7. **상태 확인** → 헬스체크
          
          ### 수동 배포 (긴급시)
          ```bash
          # 이미지 빌드
          docker build -t registry.jclee.me/safework/app:manual ./app
          
          # 레지스트리 푸시
          docker push registry.jclee.me/safework/app:manual
          
          # Watchtower API 호출
          curl -H "Authorization: Bearer $WATCHTOWER_TOKEN" \
               -X POST https://watchtower.jclee.me/v1/update
          ```
          
          ## 🤖 Claude AI 통합
          
          SafeWork는 Claude AI와 완전 통합되어 있습니다:
          
          ### 자동화된 작업
          - **코드 리뷰**: PR 생성 시 자동 보안/성능 검토
          - **이슈 분류**: 이슈 생성 시 자동 라벨링 및 우선순위 설정
          - **문서 생성**: API 변경 시 문서 자동 업데이트
          - **성능 모니터링**: 성능 저하 감지 시 자동 최적화 제안
          
          ### Claude AI 활용법
          ```markdown
          # 이슈에서 Claude AI 호출
          @claude 이 성능 문제를 분석하고 최적화 방안을 제시해주세요.
          
          # PR에서 보안 검토 요청
          @claude 이 변경사항의 보안 영향도를 분석해주세요.
          ```
          
          ## 📞 개발 지원
          
          ### 문제 해결 순서
          1. **로그 확인**: `docker-compose logs app`
          2. **데이터베이스 상태**: MySQL, Redis 연결 확인
          3. **GitHub Issues**: 비슷한 문제 검색
          4. **Claude AI**: @claude 멘션으로 즉시 지원
          
          ### 유용한 명령어
          ```bash
          # 개발 환경 리셋
          docker-compose down -v && docker-compose up -d
          
          # 데이터베이스 백업
          docker-compose exec mysql mysqldump -u safework -p safework_db > backup.sql
          
          # 로그 실시간 모니터링
          docker-compose logs -f --tail=100 app
          ```
          
          ---
          
          **개발팀 연락처**
          - **기술 지원**: GitHub Issues
          - **긴급 문의**: Claude AI (@claude)
          - **보안 제보**: 비공개 채널
          
          🤖 *SafeWork 자동 문서 시스템*
          EOF
          
          echo "✅ 개발자 가이드 생성 완료"

      - name: 📤 문서 변경사항 커밋 및 푸시
        if: github.event_name != 'pull_request'
        run: |
          git config --global user.name "SafeWork Documentation Bot"
          git config --global user.email "noreply@safework.jclee.me"
          
          # 변경사항 확인
          if git diff --quiet docs/; then
            echo "📄 문서 변경사항 없음"
          else
            echo "📤 문서 변경사항 커밋..."
            git add docs/
            git commit -m "📚 자동 문서 업데이트

            - API 엔드포인트 문서 자동 생성
            - 사용자 매뉴얼 업데이트  
            - 개발자 가이드 동기화
            
            🤖 Generated by SafeWork Documentation System
            ⏰ $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')"
            
            git push origin HEAD
            echo "✅ 문서 변경사항 푸시 완료"
          fi

  # 📋 문서 품질 검사
  documentation-quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4

      - name: 📋 문서 품질 및 일관성 검사
        run: |
          echo "📋 SafeWork 문서 품질 검사..."
          
          # 문서 파일 존재 여부 확인
          REQUIRED_DOCS=(
            "README.md"
            "CLAUDE.md" 
            "docs/API.md"
            "docs/USER_MANUAL.md"
            "docs/DEVELOPER_GUIDE.md"
          )
          
          MISSING_DOCS=()
          for doc in "${REQUIRED_DOCS[@]}"; do
            if [ ! -f "$doc" ]; then
              MISSING_DOCS+=("$doc")
            else
              echo "✅ $doc 존재"
            fi
          done
          
          if [ ${#MISSING_DOCS[@]} -gt 0 ]; then
            echo "❌ 누락된 문서:"
            printf '  - %s\n' "${MISSING_DOCS[@]}"
          else
            echo "✅ 모든 필수 문서 존재"
          fi
          
          # 문서 내용 품질 검사
          echo "🔍 문서 내용 품질 검사..."
          
          # 한글 문서 깨짐 검사
          if find docs/ -name "*.md" -exec grep -l "????" {} \; | head -5; then
            echo "⚠️ 한글 깨짐 문서 발견"
          fi
          
          # 링크 검사 (기본적인 내부 링크)
          echo "🔗 내부 링크 검사..."
          BROKEN_LINKS=$(find docs/ -name "*.md" -exec grep -H "](.*\.md)" {} \; | while read line; do
            file=$(echo "$line" | cut -d: -f1)
            link=$(echo "$line" | sed 's/.*](\([^)]*\)).*/\1/')
            if [[ "$link" == *".md" ]] && [ ! -f "$(dirname "$file")/$link" ] && [ ! -f "$link" ]; then
              echo "$file: $link"
            fi
          done)
          
          if [ -n "$BROKEN_LINKS" ]; then
            echo "🔗 깨진 내부 링크 발견:"
            echo "$BROKEN_LINKS"
          else
            echo "✅ 내부 링크 검사 통과"
          fi
          
          # 문서 업데이트 날짜 확인
          echo "📅 문서 최신성 확인..."
          find docs/ -name "*.md" -mtime +30 -ls | while read old_doc; do
            echo "⚠️ 30일 이상 업데이트되지 않은 문서: $old_doc"
          done

      - name: 📊 문서 통계 및 리포트
        run: |
          echo "📊 SafeWork 문서 통계..."
          
          # 문서 파일 개수
          TOTAL_DOCS=$(find . -name "*.md" | wc -l)
          DOCS_SIZE=$(find . -name "*.md" -exec cat {} \; | wc -c)
          DOCS_LINES=$(find . -name "*.md" -exec cat {} \; | wc -l)
          
          echo "📈 문서 통계:"
          echo "  - 총 문서 파일: $TOTAL_DOCS 개"
          echo "  - 총 문서 크기: $(numfmt --to=iec $DOCS_SIZE)B"
          echo "  - 총 문서 라인: $DOCS_LINES 줄"
          
          # 카테고리별 통계
          echo "📋 카테고리별 문서:"
          echo "  - API 문서: $(find docs/ -name "*API*" -o -name "*api*" | wc -l) 개"
          echo "  - 사용자 가이드: $(find docs/ -name "*USER*" -o -name "*user*" -o -name "*MANUAL*" | wc -l) 개"
          echo "  - 개발자 가이드: $(find docs/ -name "*DEV*" -o -name "*dev*" | wc -l) 개"
          echo "  - 설정 파일: $(find . -name "*.md" -path "./.github/*" | wc -l) 개"
          
          echo "✅ 문서 품질 검사 완료"

  # 📈 문서 동기화 결과 리포트
  documentation-report:
    needs: [generate-api-docs, documentation-quality-check]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📈 SafeWork 문서 동기화 결과 리포트
        run: |
          echo "📈 SafeWork 문서 동기화 완료 리포트"
          echo "⏰ 완료 시간: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')"
          
          # 작업 결과 요약
          echo "🎯 작업 결과 요약:"
          echo "  - API 문서 생성: ${{ needs.generate-api-docs.result }}"
          echo "  - 문서 품질 검사: ${{ needs.documentation-quality-check.result }}"
          
          if [ "${{ needs.generate-api-docs.result }}" = "success" ] && [ "${{ needs.documentation-quality-check.result }}" = "success" ]; then
            echo "✅ 모든 문서 동기화 작업 성공!"
            echo "📚 업데이트된 문서:"
            echo "  - docs/API.md (API 엔드포인트 자동 생성)"
            echo "  - docs/USER_MANUAL.md (사용자 매뉴얼)"
            echo "  - docs/DEVELOPER_GUIDE.md (개발자 가이드)"
            echo "  - docs/api-endpoints.json (API 메타데이터)"
          else
            echo "⚠️ 일부 문서 동기화 작업 실패"
          fi
          
          echo "🔄 다음 자동 동기화: 매주 일요일 오전 2시"
          echo "📞 문서 관련 문의: @claude 멘션으로 즉시 지원"