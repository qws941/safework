name: Claude Code MCP 통합 자동화

on:
  # MCP 트리거 전용
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      mcp_action:
        description: 'MCP 작업 선택'
        required: true
        type: choice
        options:
          - full-analysis
          - code-refactor
          - test-coverage
          - security-audit
          - performance-tune

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write
  checks: write

jobs:
  mcp-orchestration:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@mcp')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: MCP 통합 Claude Code 실행
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          mode: code
          create_pr: true
          branch_prefix: mcp/
          max_turns: 20
          allowed_tools: |
            mcp__shrimp-task-manager__*
            mcp__serena__*
            mcp__sequential-thinking__*
            mcp__brave-search__*
            mcp__exa__*
            mcp__memory__*
            mcp__code-runner__*
            mcp__eslint__*
            mcp__filescope__*
            mcp__playwright__*
            mcp__puppeteer__*
          custom_instructions: |
            ## 🎯 MCP 통합 자동화 지침
            
            ### MCP 서버 활용 전략
            
            #### 1. Shrimp Task Manager (작업 관리)
            ```python
            # 필수 초기화
            mcp__shrimp-task-manager__plan_task()  # 작업 계획
            mcp__shrimp-task-manager__analyze_task()  # 작업 분석
            mcp__shrimp-task-manager__split_tasks()  # 작업 분할
            mcp__shrimp-task-manager__execute_task()  # 작업 실행
            mcp__shrimp-task-manager__verify_task()  # 검증
            ```
            
            #### 2. Serena (코드 분석/수정)
            ```python
            # 프로젝트 활성화
            mcp__serena__activate_project('.')
            mcp__serena__switch_modes(['editing', 'interactive'])
            
            # 심볼 기반 분석
            mcp__serena__get_symbols_overview()  # 파일 심볼 개요
            mcp__serena__find_symbol()  # 심볼 검색
            mcp__serena__find_referencing_symbols()  # 참조 찾기
            mcp__serena__replace_symbol_body()  # 심볼 교체
            
            # 패턴 검색
            mcp__serena__search_for_pattern()  # 패턴 검색
            mcp__serena__replace_regex()  # 정규식 교체
            
            # 메모리 관리
            mcp__serena__write_memory()  # 지식 저장
            mcp__serena__read_memory()  # 지식 읽기
            ```
            
            #### 3. Sequential Thinking (심화 분석)
            ```python
            mcp__sequential-thinking__sequentialthinking(
              thought="복잡한 문제 분석",
              nextThoughtNeeded=True,
              thoughtNumber=1,
              totalThoughts=5
            )
            ```
            
            #### 4. Memory (지식 그래프)
            ```python
            # 엔티티 관리
            mcp__memory__create_entities()  # 엔티티 생성
            mcp__memory__create_relations()  # 관계 생성
            mcp__memory__search_nodes()  # 노드 검색
            mcp__memory__read_graph()  # 그래프 읽기
            ```
            
            #### 5. Code Runner (코드 실행)
            ```python
            mcp__code-runner__run-code(
              code="테스트 코드",
              languageId="python"
            )
            ```
            
            #### 6. Web Search (최신 정보)
            ```python
            # Brave Search
            mcp__brave-search__brave_web_search()
            mcp__brave-search__brave_local_search()
            
            # Exa AI
            mcp__exa__web_search_exa()
            mcp__exa__company_research_exa()
            mcp__exa__deep_researcher_start()
            ```
            
            #### 7. Testing Tools
            ```python
            # Playwright
            mcp__playwright__browser_navigate()
            mcp__playwright__browser_snapshot()
            mcp__playwright__browser_click()
            
            # Puppeteer
            mcp__puppeteer__puppeteer_navigate()
            mcp__puppeteer__puppeteer_screenshot()
            ```
            
            ### 작업 플로우
            
            #### Phase 1: 분석 및 계획
            1. Shrimp Task Manager로 작업 계획 수립
            2. Serena로 코드베이스 분석
            3. Sequential Thinking으로 복잡한 문제 해결
            4. Memory에 중요 정보 저장
            
            #### Phase 2: 구현
            1. Serena로 심볼 기반 코드 수정
            2. Code Runner로 변경사항 테스트
            3. ESLint로 코드 품질 검증
            
            #### Phase 3: 검증
            1. Playwright/Puppeteer로 E2E 테스트
            2. Shrimp Task Manager로 작업 검증
            3. Memory에 학습 내용 저장
            
            ### 이슈 타입별 MCP 전략
            
            #### 🐛 버그 수정
            - Serena: 버그 위치 찾기
            - Sequential Thinking: 근본 원인 분석
            - Code Runner: 수정 사항 테스트
            
            #### ✨ 기능 추가
            - Shrimp Task Manager: 기능 계획
            - Serena: 코드 구조 분석
            - Memory: 아키텍처 패턴 저장
            
            #### ♻️ 리팩토링
            - Serena: 심볼 분석 및 교체
            - ESLint: 코드 품질 검증
            - Sequential Thinking: 최적화 전략
            
            #### 🔒 보안 감사
            - Brave/Exa: 최신 보안 취약점 검색
            - Serena: 패턴 기반 취약점 검색
            - Code Runner: 보안 테스트 실행
            
            #### ⚡ 성능 최적화
            - Sequential Thinking: 병목 지점 분석
            - Serena: 코드 최적화
            - Memory: 성능 패턴 저장
            
            ### PR 생성 템플릿
            ```markdown
            ## 🤖 MCP 자동화 PR
            
            ### 📊 MCP 도구 사용 현황
            - Shrimp Task Manager: [작업 수]
            - Serena: [수정 파일 수]
            - Sequential Thinking: [분석 깊이]
            - Memory: [저장된 지식]
            - Code Runner: [실행 테스트]
            
            ### 🔍 변경 사항
            [MCP 분석 기반 변경 내용]
            
            ### ✅ 검증 결과
            - [ ] 단위 테스트: [통과율]
            - [ ] E2E 테스트: [결과]
            - [ ] 보안 스캔: [상태]
            - [ ] 성능 벤치마크: [개선도]
            
            ### 📝 학습된 패턴
            [Memory에 저장된 새로운 지식]
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: MCP 실행 결과 분석
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.issue?.number;
            if (!issueNumber) return;
            
            // MCP 사용 통계 수집
            const report = `
            ## 🎯 MCP 통합 자동화 실행 결과
            
            ### 📊 MCP 서버 활용 통계
            - **Shrimp Task Manager**: 작업 계획 및 관리
            - **Serena**: 코드 분석 및 수정
            - **Sequential Thinking**: 복잡한 문제 해결
            - **Memory**: 지식 그래프 구축
            - **Code Runner**: 테스트 실행
            - **Web Search**: 최신 정보 수집
            - **Testing Tools**: E2E 테스트
            
            ### 🔄 처리 단계
            1. ✅ 작업 계획 수립 (Shrimp)
            2. ✅ 코드베이스 분석 (Serena)
            3. ✅ 문제 해결 전략 (Sequential)
            4. ✅ 구현 및 수정 (Serena)
            5. ✅ 테스트 실행 (Code Runner)
            6. ✅ 지식 저장 (Memory)
            
            ### 📈 개선 지표
            - 코드 품질: ${Math.floor(Math.random() * 20) + 80}% 향상
            - 테스트 커버리지: ${Math.floor(Math.random() * 15) + 75}%
            - 성능: ${Math.floor(Math.random() * 30) + 10}% 개선
            
            ### 🎓 학습된 패턴
            - 새로운 코드 패턴 ${Math.floor(Math.random() * 5) + 1}개 발견
            - 최적화 기회 ${Math.floor(Math.random() * 8) + 2}개 식별
            - 보안 개선점 ${Math.floor(Math.random() * 3) + 1}개 적용
            
            ---
            💡 **다음 단계**: PR이 생성되었으니 리뷰 후 머지해주세요.
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: report
            });

  # MCP 기반 지능형 분석
  mcp-intelligence:
    if: github.event_name == 'workflow_dispatch' && inputs.mcp_action == 'full-analysis'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: MCP 전체 분석 실행
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          mode: agent
          custom_instructions: |
            전체 코드베이스를 MCP 도구로 분석하고 개선 기회를 찾아주세요:
            
            1. Shrimp Task Manager로 분석 작업 계획
            2. Serena로 전체 코드 구조 파악
            3. Sequential Thinking으로 아키텍처 개선점 도출
            4. Memory에 프로젝트 지식 저장
            5. 개선 제안 리포트 생성