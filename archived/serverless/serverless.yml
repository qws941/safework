service: safework2

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  region: ap-northeast-2
  stage: ${opt:stage, 'prod'}
  memorySize: 512
  timeout: 30
  environment:
    FLASK_CONFIG: production
    DB_HOST: !GetAtt AuroraCluster.Endpoint.Address
    DB_NAME: safework_db
    DB_USER: safework
    DB_PASSWORD: ${ssm:/safework2/db/password}
    REDIS_HOST: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
    SECRET_KEY: ${ssm:/safework2/secret/key}
    TZ: Asia/Seoul
    SERVERLESS: true

  vpc:
    securityGroupIds:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - rds:*
            - elasticache:*
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: "*"

package:
  patterns:
    - '!node_modules/**'
    - '!.git/**'
    - '!.serverless/**'
    - '!tests/**'
    - '!docker-compose.yml'
    - '!Dockerfile'
    - '!postgres/**'
    - '!redis/**'

functions:
  # 인증 관련 함수
  auth:
    handler: handlers/auth.handler
    memorySize: 256
    timeout: 15
    events:
      - http:
          path: /auth/{proxy+}
          method: ANY
          cors: true
      - http:
          path: /login
          method: ANY
          cors: true
      - http:
          path: /logout
          method: ANY
          cors: true
    environment:
      FUNCTION_TYPE: auth

  # 설문 관련 함수 (메인 기능)
  survey:
    handler: handlers/survey.handler
    memorySize: 1024
    timeout: 60
    events:
      - http:
          path: /survey/{proxy+}
          method: ANY
          cors: true
      - http:
          path: /api/safework/{proxy+}
          method: ANY
          cors: true
    environment:
      FUNCTION_TYPE: survey
    reservedConcurrency: 50

  # 관리자 기능
  admin:
    handler: handlers/admin.handler
    memorySize: 512
    timeout: 30
    events:
      - http:
          path: /admin/{proxy+}
          method: ANY
          cors: true
    environment:
      FUNCTION_TYPE: admin

  # 정적 파일 및 문서
  documents:
    handler: handlers/documents.handler
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: /documents/{proxy+}
          method: ANY
          cors: true
      - http:
          path: /static/{proxy+}
          method: ANY
          cors: true
    environment:
      FUNCTION_TYPE: documents

  # 헬스 체크 및 메인 페이지
  health:
    handler: handlers/health.handler
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: /health
          method: GET
          cors: true
      - http:
          path: /
          method: GET
          cors: true
    environment:
      FUNCTION_TYPE: health

  # 마이그레이션 관리
  migration:
    handler: handlers/migration.handler
    memorySize: 256
    timeout: 30
    events:
      - http:
          path: /admin/migration/{proxy+}
          method: ANY
          cors: true
    environment:
      FUNCTION_TYPE: migration

layers:
  SafeworkCommon:
    path: layers/common
    name: safework2-common-${self:provider.stage}
    description: SafeWork common dependencies and utilities
    compatibleRuntimes:
      - python3.11
    retain: false

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-plugin-warmup

custom:
  pythonRequirements:
    dockerizePip: true
    layer: true
    slim: true
    strip: false
    noDeps:
      - boto3
      - botocore

  customDomain:
    domainName: api-safework2.jclee.me
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: false
    certificateName: '*.jclee.me'
    hostedZoneId: Z2FDTNDATAQYW2
    endpointType: 'regional'
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: true

  warmup:
    enabled: true
    events:
      - schedule: 'rate(5 minutes)'
    timeout: 20
    prewarm: true
    concurrency: 1
    cleanFolder: false

resources:
  Resources:
    # VPC 구성
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          - Key: Name
            Value: safework2-vpc

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: ap-northeast-2a
        Tags:
          - Key: Name
            Value: safework2-private-1

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: ap-northeast-2c
        Tags:
          - Key: Name
            Value: safework2-private-2

    # 보안 그룹
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for SafeWork Lambda functions
        VpcId: !Ref VPC
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0

    DatabaseSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for SafeWork Aurora database
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            SourceSecurityGroupId: !Ref LambdaSecurityGroup

    # Aurora Serverless v2 클러스터
    AuroraSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for SafeWork Aurora cluster
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        Tags:
          - Key: Name
            Value: safework2-aurora-subnet-group

    AuroraCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        DBClusterIdentifier: safework2-aurora
        Engine: aurora-postgresql
        EngineVersion: '15.4'
        DatabaseName: safework_db
        MasterUsername: safework
        MasterUserPassword: ${ssm:/safework2/db/password}
        DBSubnetGroupName: !Ref AuroraSubnetGroup
        VpcSecurityGroupIds:
          - !Ref DatabaseSecurityGroup
        BackupRetentionPeriod: 7
        PreferredBackupWindow: "03:00-04:00"
        PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
        StorageEncrypted: true
        DeletionProtection: false
        EnableHttpEndpoint: true
        ServerlessV2ScalingConfiguration:
          MinCapacity: 0.5
          MaxCapacity: 4.0
        Tags:
          - Key: Name
            Value: safework2-aurora-cluster

    AuroraInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: safework2-aurora-instance
        DBClusterIdentifier: !Ref AuroraCluster
        DBInstanceClass: db.serverless
        Engine: aurora-postgresql
        PubliclyAccessible: false

    # ElastiCache Serverless (Redis)
    ElastiCacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: Subnet group for SafeWork ElastiCache
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

    ElastiCacheSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for SafeWork ElastiCache
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 6379
            ToPort: 6379
            SourceSecurityGroupId: !Ref LambdaSecurityGroup

    ElastiCacheCluster:
      Type: AWS::ElastiCache::ServerlessCache
      Properties:
        ServerlessCacheName: safework2-redis
        Engine: redis
        Description: SafeWork Redis cache
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref ElastiCacheSecurityGroup
        Tags:
          - Key: Name
            Value: safework2-redis

  Outputs:
    ApiGatewayRestApiId:
      Value: !Ref ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiId

    ApiGatewayRestApiRootResourceId:
      Value: !GetAtt ApiGatewayRestApi.RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiRootResourceId

    CustomDomainName:
      Value: api-safework2.jclee.me
      Export:
        Name: ${self:service}-${self:provider.stage}-CustomDomainName

    DatabaseEndpoint:
      Value: !GetAtt AuroraCluster.Endpoint.Address
      Export:
        Name: ${self:service}-${self:provider.stage}-DatabaseEndpoint

    RedisEndpoint:
      Value: !GetAtt ElastiCacheCluster.Endpoint.Address
      Export:
        Name: ${self:service}-${self:provider.stage}-RedisEndpoint